
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074ec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004074ec  004074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  004074f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000030c  204009d0  00407ec4  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400cdc  004081d0  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402ce0  0040a1d4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b9f5  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e79  00000000  00000000  0003c44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006b18  00000000  00000000  000402c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a90  00000000  00000000  00046ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  0004786d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022531  00000000  00000000  0004838d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000108f4  00000000  00000000  0006a8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000908a0  00000000  00000000  0007b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002390  00000000  00000000  0010ba54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 2c 40 20 cd 14 40 00 c9 14 40 00 c9 14 40 00     .,@ ..@...@...@.
  400010:	c9 14 40 00 c9 14 40 00 c9 14 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c9 14 40 00 c9 14 40 00 00 00 00 00 c9 14 40 00     ..@...@.......@.
  40003c:	c9 14 40 00 c9 14 40 00 c9 14 40 00 9d 18 40 00     ..@...@...@...@.
  40004c:	61 18 40 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     a.@...@...@...@.
  40005c:	c9 14 40 00 c9 14 40 00 00 00 00 00 2d 10 40 00     ..@...@.....-.@.
  40006c:	41 10 40 00 55 10 40 00 c9 14 40 00 c9 14 40 00     A.@.U.@...@...@.
  40007c:	c9 14 40 00 69 10 40 00 7d 10 40 00 c9 14 40 00     ..@.i.@.}.@...@.
  40008c:	c9 14 40 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     ..@...@...@...@.
  40009c:	c9 14 40 00 e9 17 40 00 c9 14 40 00 c9 14 40 00     ..@...@...@...@.
  4000ac:	11 18 40 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     ..@...@...@...@.
  4000bc:	c9 14 40 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     ..@...@...@...@.
  4000cc:	c9 14 40 00 00 00 00 00 c9 14 40 00 00 00 00 00     ..@.......@.....
  4000dc:	c9 14 40 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     ..@...@...@...@.
  4000ec:	c9 14 40 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     ..@...@...@...@.
  4000fc:	c9 14 40 00 39 18 40 00 c9 14 40 00 c9 14 40 00     ..@.9.@...@...@.
  40010c:	c9 14 40 00 c9 14 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c9 14 40 00 c9 14 40 00 c9 14 40 00     ......@...@...@.
  40012c:	c9 14 40 00 c9 14 40 00 00 00 00 00 c9 14 40 00     ..@...@.......@.
  40013c:	c9 14 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	004074f4 	.word	0x004074f4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004074f4 	.word	0x004074f4
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	004074f4 	.word	0x004074f4
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002b2:	4d2a      	ldr	r5, [pc, #168]	; (40035c <rtc_set_date+0xac>)
  4002b4:	fba5 4603 	umull	r4, r6, r5, r3
  4002b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002ba:	9c03      	ldr	r4, [sp, #12]
  4002bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4002c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4002ce:	fba5 6402 	umull	r6, r4, r5, r2
  4002d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4002d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4002dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4002e4:	4b1e      	ldr	r3, [pc, #120]	; (400360 <rtc_set_date+0xb0>)
  4002e6:	fba3 4301 	umull	r4, r3, r3, r1
  4002ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4002f0:	4b1c      	ldr	r3, [pc, #112]	; (400364 <rtc_set_date+0xb4>)
  4002f2:	fba3 4301 	umull	r4, r3, r3, r1
  4002f6:	095b      	lsrs	r3, r3, #5
  4002f8:	fba5 6403 	umull	r6, r4, r5, r3
  4002fc:	08e4      	lsrs	r4, r4, #3
  4002fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400302:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400308:	fba5 4301 	umull	r4, r3, r5, r1
  40030c:	08db      	lsrs	r3, r3, #3
  40030e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400312:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40031a:	fba5 1503 	umull	r1, r5, r5, r3
  40031e:	08ed      	lsrs	r5, r5, #3
  400320:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400324:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40032c:	6983      	ldr	r3, [r0, #24]
  40032e:	f013 0f04 	tst.w	r3, #4
  400332:	d0fb      	beq.n	40032c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400334:	6803      	ldr	r3, [r0, #0]
  400336:	f043 0302 	orr.w	r3, r3, #2
  40033a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40033c:	6983      	ldr	r3, [r0, #24]
  40033e:	f013 0f01 	tst.w	r3, #1
  400342:	d0fb      	beq.n	40033c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400344:	2301      	movs	r3, #1
  400346:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400348:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40034a:	6803      	ldr	r3, [r0, #0]
  40034c:	f023 0302 	bic.w	r3, r3, #2
  400350:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400352:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400354:	f000 0002 	and.w	r0, r0, #2
  400358:	bc70      	pop	{r4, r5, r6}
  40035a:	4770      	bx	lr
  40035c:	cccccccd 	.word	0xcccccccd
  400360:	10624dd3 	.word	0x10624dd3
  400364:	51eb851f 	.word	0x51eb851f

00400368 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400368:	6980      	ldr	r0, [r0, #24]
}
  40036a:	4770      	bx	lr

0040036c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40036c:	61c1      	str	r1, [r0, #28]
  40036e:	4770      	bx	lr

00400370 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400370:	4b03      	ldr	r3, [pc, #12]	; (400380 <rtt_init+0x10>)
  400372:	681b      	ldr	r3, [r3, #0]
  400374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400378:	4319      	orrs	r1, r3
  40037a:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  40037c:	2000      	movs	r0, #0
  40037e:	4770      	bx	lr
  400380:	204009ec 	.word	0x204009ec

00400384 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400384:	b941      	cbnz	r1, 400398 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400386:	4a09      	ldr	r2, [pc, #36]	; (4003ac <rtt_sel_source+0x28>)
  400388:	6813      	ldr	r3, [r2, #0]
  40038a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40038e:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400390:	6802      	ldr	r2, [r0, #0]
  400392:	4313      	orrs	r3, r2
  400394:	6003      	str	r3, [r0, #0]
  400396:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400398:	4a04      	ldr	r2, [pc, #16]	; (4003ac <rtt_sel_source+0x28>)
  40039a:	6813      	ldr	r3, [r2, #0]
  40039c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4003a0:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4003a2:	6802      	ldr	r2, [r0, #0]
  4003a4:	4313      	orrs	r3, r2
  4003a6:	6003      	str	r3, [r0, #0]
  4003a8:	4770      	bx	lr
  4003aa:	bf00      	nop
  4003ac:	204009ec 	.word	0x204009ec

004003b0 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4003b0:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003b2:	4b03      	ldr	r3, [pc, #12]	; (4003c0 <rtt_enable_interrupt+0x10>)
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	4319      	orrs	r1, r3
  4003b8:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4003ba:	6001      	str	r1, [r0, #0]
  4003bc:	4770      	bx	lr
  4003be:	bf00      	nop
  4003c0:	204009ec 	.word	0x204009ec

004003c4 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4003c4:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4003c6:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003ca:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <rtt_disable_interrupt+0x10>)
  4003cc:	681b      	ldr	r3, [r3, #0]
  4003ce:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4003d0:	6001      	str	r1, [r0, #0]
  4003d2:	4770      	bx	lr
  4003d4:	204009ec 	.word	0x204009ec

004003d8 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4003d8:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4003da:	6883      	ldr	r3, [r0, #8]
  4003dc:	429a      	cmp	r2, r3
  4003de:	d003      	beq.n	4003e8 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4003e0:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4003e2:	6883      	ldr	r3, [r0, #8]
  4003e4:	4293      	cmp	r3, r2
  4003e6:	d1fb      	bne.n	4003e0 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	4770      	bx	lr

004003ec <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4003ec:	68c0      	ldr	r0, [r0, #12]
}
  4003ee:	4770      	bx	lr

004003f0 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4606      	mov	r6, r0
  4003f4:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4003f6:	6804      	ldr	r4, [r0, #0]
  4003f8:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4003fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400400:	4809      	ldr	r0, [pc, #36]	; (400428 <rtt_write_alarm_time+0x38>)
  400402:	4b0a      	ldr	r3, [pc, #40]	; (40042c <rtt_write_alarm_time+0x3c>)
  400404:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400406:	b92d      	cbnz	r5, 400414 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400408:	f04f 33ff 	mov.w	r3, #4294967295
  40040c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40040e:	b924      	cbnz	r4, 40041a <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400410:	2000      	movs	r0, #0
  400412:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400414:	3d01      	subs	r5, #1
  400416:	6075      	str	r5, [r6, #4]
  400418:	e7f9      	b.n	40040e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40041a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40041e:	4802      	ldr	r0, [pc, #8]	; (400428 <rtt_write_alarm_time+0x38>)
  400420:	4b03      	ldr	r3, [pc, #12]	; (400430 <rtt_write_alarm_time+0x40>)
  400422:	4798      	blx	r3
  400424:	e7f4      	b.n	400410 <rtt_write_alarm_time+0x20>
  400426:	bf00      	nop
  400428:	400e1830 	.word	0x400e1830
  40042c:	004003c5 	.word	0x004003c5
  400430:	004003b1 	.word	0x004003b1

00400434 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400434:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <spi_enable_clock+0x20>)
  400438:	4298      	cmp	r0, r3
  40043a:	d003      	beq.n	400444 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40043c:	4b06      	ldr	r3, [pc, #24]	; (400458 <spi_enable_clock+0x24>)
  40043e:	4298      	cmp	r0, r3
  400440:	d004      	beq.n	40044c <spi_enable_clock+0x18>
  400442:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400444:	2015      	movs	r0, #21
  400446:	4b05      	ldr	r3, [pc, #20]	; (40045c <spi_enable_clock+0x28>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	202a      	movs	r0, #42	; 0x2a
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <spi_enable_clock+0x28>)
  400450:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400452:	e7f6      	b.n	400442 <spi_enable_clock+0xe>
  400454:	40008000 	.word	0x40008000
  400458:	40058000 	.word	0x40058000
  40045c:	004011b1 	.word	0x004011b1

00400460 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400460:	6843      	ldr	r3, [r0, #4]
  400462:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400466:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400468:	6843      	ldr	r3, [r0, #4]
  40046a:	0409      	lsls	r1, r1, #16
  40046c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400470:	4319      	orrs	r1, r3
  400472:	6041      	str	r1, [r0, #4]
  400474:	4770      	bx	lr

00400476 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400476:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400478:	f643 2499 	movw	r4, #15001	; 0x3a99
  40047c:	6905      	ldr	r5, [r0, #16]
  40047e:	f015 0f02 	tst.w	r5, #2
  400482:	d103      	bne.n	40048c <spi_write+0x16>
		if (!timeout--) {
  400484:	3c01      	subs	r4, #1
  400486:	d1f9      	bne.n	40047c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400488:	2001      	movs	r0, #1
  40048a:	e00c      	b.n	4004a6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40048c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40048e:	f014 0f02 	tst.w	r4, #2
  400492:	d006      	beq.n	4004a2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400494:	0412      	lsls	r2, r2, #16
  400496:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40049a:	4311      	orrs	r1, r2
		if (uc_last) {
  40049c:	b10b      	cbz	r3, 4004a2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40049e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4004a2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	bc30      	pop	{r4, r5}
  4004a8:	4770      	bx	lr

004004aa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4004aa:	b932      	cbnz	r2, 4004ba <spi_set_clock_polarity+0x10>
  4004ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b2:	f023 0301 	bic.w	r3, r3, #1
  4004b6:	6303      	str	r3, [r0, #48]	; 0x30
  4004b8:	4770      	bx	lr
  4004ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4004be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004c0:	f043 0301 	orr.w	r3, r3, #1
  4004c4:	6303      	str	r3, [r0, #48]	; 0x30
  4004c6:	4770      	bx	lr

004004c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4004c8:	b932      	cbnz	r2, 4004d8 <spi_set_clock_phase+0x10>
  4004ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4004ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004d0:	f023 0302 	bic.w	r3, r3, #2
  4004d4:	6303      	str	r3, [r0, #48]	; 0x30
  4004d6:	4770      	bx	lr
  4004d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004de:	f043 0302 	orr.w	r3, r3, #2
  4004e2:	6303      	str	r3, [r0, #48]	; 0x30
  4004e4:	4770      	bx	lr

004004e6 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4004e6:	2a04      	cmp	r2, #4
  4004e8:	d003      	beq.n	4004f2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4004ea:	b16a      	cbz	r2, 400508 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4004ec:	2a08      	cmp	r2, #8
  4004ee:	d016      	beq.n	40051e <spi_configure_cs_behavior+0x38>
  4004f0:	4770      	bx	lr
  4004f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004f8:	f023 0308 	bic.w	r3, r3, #8
  4004fc:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400500:	f043 0304 	orr.w	r3, r3, #4
  400504:	6303      	str	r3, [r0, #48]	; 0x30
  400506:	4770      	bx	lr
  400508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40050c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40050e:	f023 0308 	bic.w	r3, r3, #8
  400512:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400514:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400516:	f023 0304 	bic.w	r3, r3, #4
  40051a:	6303      	str	r3, [r0, #48]	; 0x30
  40051c:	4770      	bx	lr
  40051e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400522:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400524:	f043 0308 	orr.w	r3, r3, #8
  400528:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40052a:	e7e1      	b.n	4004f0 <spi_configure_cs_behavior+0xa>

0040052c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40052c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400530:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400536:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400538:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40053a:	431a      	orrs	r2, r3
  40053c:	630a      	str	r2, [r1, #48]	; 0x30
  40053e:	4770      	bx	lr

00400540 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400540:	1e43      	subs	r3, r0, #1
  400542:	4419      	add	r1, r3
  400544:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400548:	1e43      	subs	r3, r0, #1
  40054a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40054c:	bf94      	ite	ls
  40054e:	b200      	sxthls	r0, r0
		return -1;
  400550:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400554:	4770      	bx	lr

00400556 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400556:	b17a      	cbz	r2, 400578 <spi_set_baudrate_div+0x22>
{
  400558:	b410      	push	{r4}
  40055a:	4614      	mov	r4, r2
  40055c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400560:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400566:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400568:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40056a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40056e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400570:	2000      	movs	r0, #0
}
  400572:	f85d 4b04 	ldr.w	r4, [sp], #4
  400576:	4770      	bx	lr
        return -1;
  400578:	f04f 30ff 	mov.w	r0, #4294967295
  40057c:	4770      	bx	lr

0040057e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40057e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400580:	0189      	lsls	r1, r1, #6
  400582:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400584:	2402      	movs	r4, #2
  400586:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400588:	f04f 31ff 	mov.w	r1, #4294967295
  40058c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40058e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400590:	605a      	str	r2, [r3, #4]
}
  400592:	f85d 4b04 	ldr.w	r4, [sp], #4
  400596:	4770      	bx	lr

00400598 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400598:	0189      	lsls	r1, r1, #6
  40059a:	2305      	movs	r3, #5
  40059c:	5043      	str	r3, [r0, r1]
  40059e:	4770      	bx	lr

004005a0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4005a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4005a4:	61ca      	str	r2, [r1, #28]
  4005a6:	4770      	bx	lr

004005a8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4005ac:	624a      	str	r2, [r1, #36]	; 0x24
  4005ae:	4770      	bx	lr

004005b0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4005b4:	6a08      	ldr	r0, [r1, #32]
}
  4005b6:	4770      	bx	lr

004005b8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4005b8:	b4f0      	push	{r4, r5, r6, r7}
  4005ba:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005bc:	2402      	movs	r4, #2
  4005be:	9401      	str	r4, [sp, #4]
  4005c0:	2408      	movs	r4, #8
  4005c2:	9402      	str	r4, [sp, #8]
  4005c4:	2420      	movs	r4, #32
  4005c6:	9403      	str	r4, [sp, #12]
  4005c8:	2480      	movs	r4, #128	; 0x80
  4005ca:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4005cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4005ce:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005d0:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4005d2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4005d6:	d814      	bhi.n	400602 <tc_find_mck_divisor+0x4a>
  4005d8:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4005da:	42a0      	cmp	r0, r4
  4005dc:	d217      	bcs.n	40060e <tc_find_mck_divisor+0x56>
  4005de:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4005e0:	af01      	add	r7, sp, #4
  4005e2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4005e6:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4005ea:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4005ec:	4284      	cmp	r4, r0
  4005ee:	d30a      	bcc.n	400606 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4005f0:	4286      	cmp	r6, r0
  4005f2:	d90d      	bls.n	400610 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4005f4:	3501      	adds	r5, #1
	for (ul_index = 0;
  4005f6:	2d05      	cmp	r5, #5
  4005f8:	d1f3      	bne.n	4005e2 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005fa:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005fc:	b006      	add	sp, #24
  4005fe:	bcf0      	pop	{r4, r5, r6, r7}
  400600:	4770      	bx	lr
			return 0;
  400602:	2000      	movs	r0, #0
  400604:	e7fa      	b.n	4005fc <tc_find_mck_divisor+0x44>
  400606:	2000      	movs	r0, #0
  400608:	e7f8      	b.n	4005fc <tc_find_mck_divisor+0x44>
	return 1;
  40060a:	2001      	movs	r0, #1
  40060c:	e7f6      	b.n	4005fc <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40060e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400610:	b12a      	cbz	r2, 40061e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400612:	a906      	add	r1, sp, #24
  400614:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400618:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40061c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40061e:	2b00      	cmp	r3, #0
  400620:	d0f3      	beq.n	40060a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400622:	601d      	str	r5, [r3, #0]
	return 1;
  400624:	2001      	movs	r0, #1
  400626:	e7e9      	b.n	4005fc <tc_find_mck_divisor+0x44>

00400628 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400628:	4b01      	ldr	r3, [pc, #4]	; (400630 <gfx_mono_set_framebuffer+0x8>)
  40062a:	6018      	str	r0, [r3, #0]
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009f0 	.word	0x204009f0

00400634 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <gfx_mono_framebuffer_put_byte+0xc>)
  400636:	681b      	ldr	r3, [r3, #0]
  400638:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40063c:	5442      	strb	r2, [r0, r1]
  40063e:	4770      	bx	lr
  400640:	204009f0 	.word	0x204009f0

00400644 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <gfx_mono_framebuffer_get_byte+0xc>)
  400646:	681b      	ldr	r3, [r3, #0]
  400648:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40064c:	5c40      	ldrb	r0, [r0, r1]
  40064e:	4770      	bx	lr
  400650:	204009f0 	.word	0x204009f0

00400654 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400658:	1884      	adds	r4, r0, r2
  40065a:	2c80      	cmp	r4, #128	; 0x80
  40065c:	dd02      	ble.n	400664 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40065e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400662:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400664:	b322      	cbz	r2, 4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400666:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400668:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40066c:	2601      	movs	r6, #1
  40066e:	fa06 f101 	lsl.w	r1, r6, r1
  400672:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400674:	2b01      	cmp	r3, #1
  400676:	d01d      	beq.n	4006b4 <gfx_mono_generic_draw_horizontal_line+0x60>
  400678:	2b00      	cmp	r3, #0
  40067a:	d035      	beq.n	4006e8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40067c:	2b02      	cmp	r3, #2
  40067e:	d117      	bne.n	4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400680:	3801      	subs	r0, #1
  400682:	b2c7      	uxtb	r7, r0
  400684:	19d4      	adds	r4, r2, r7
  400686:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400688:	f8df a090 	ldr.w	sl, [pc, #144]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40068c:	f04f 0900 	mov.w	r9, #0
  400690:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400694:	4621      	mov	r1, r4
  400696:	4628      	mov	r0, r5
  400698:	47d0      	blx	sl
			temp ^= pixelmask;
  40069a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40069e:	464b      	mov	r3, r9
  4006a0:	b2d2      	uxtb	r2, r2
  4006a2:	4621      	mov	r1, r4
  4006a4:	4628      	mov	r0, r5
  4006a6:	47c0      	blx	r8
  4006a8:	3c01      	subs	r4, #1
  4006aa:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ac:	42bc      	cmp	r4, r7
  4006ae:	d1f1      	bne.n	400694 <gfx_mono_generic_draw_horizontal_line+0x40>
  4006b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006b4:	3801      	subs	r0, #1
  4006b6:	b2c7      	uxtb	r7, r0
  4006b8:	19d4      	adds	r4, r2, r7
  4006ba:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006bc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4006c0:	f04f 0900 	mov.w	r9, #0
  4006c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006c8:	4621      	mov	r1, r4
  4006ca:	4628      	mov	r0, r5
  4006cc:	47d0      	blx	sl
			temp |= pixelmask;
  4006ce:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006d2:	464b      	mov	r3, r9
  4006d4:	b2d2      	uxtb	r2, r2
  4006d6:	4621      	mov	r1, r4
  4006d8:	4628      	mov	r0, r5
  4006da:	47c0      	blx	r8
  4006dc:	3c01      	subs	r4, #1
  4006de:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006e0:	42bc      	cmp	r4, r7
  4006e2:	d1f1      	bne.n	4006c8 <gfx_mono_generic_draw_horizontal_line+0x74>
  4006e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006e8:	3801      	subs	r0, #1
  4006ea:	b2c7      	uxtb	r7, r0
  4006ec:	19d4      	adds	r4, r2, r7
  4006ee:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006f0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4006f4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4006f6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006fa:	4621      	mov	r1, r4
  4006fc:	4628      	mov	r0, r5
  4006fe:	47c0      	blx	r8
			temp &= ~pixelmask;
  400700:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400704:	2300      	movs	r3, #0
  400706:	b2d2      	uxtb	r2, r2
  400708:	4621      	mov	r1, r4
  40070a:	4628      	mov	r0, r5
  40070c:	47c8      	blx	r9
  40070e:	3c01      	subs	r4, #1
  400710:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400712:	42bc      	cmp	r4, r7
  400714:	d1f1      	bne.n	4006fa <gfx_mono_generic_draw_horizontal_line+0xa6>
  400716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40071a:	bf00      	nop
  40071c:	00400955 	.word	0x00400955
  400720:	00400851 	.word	0x00400851

00400724 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400728:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40072c:	b18b      	cbz	r3, 400752 <gfx_mono_generic_draw_filled_rect+0x2e>
  40072e:	461c      	mov	r4, r3
  400730:	4690      	mov	r8, r2
  400732:	4606      	mov	r6, r0
  400734:	1e4d      	subs	r5, r1, #1
  400736:	b2ed      	uxtb	r5, r5
  400738:	442c      	add	r4, r5
  40073a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40073c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400758 <gfx_mono_generic_draw_filled_rect+0x34>
  400740:	463b      	mov	r3, r7
  400742:	4642      	mov	r2, r8
  400744:	4621      	mov	r1, r4
  400746:	4630      	mov	r0, r6
  400748:	47c8      	blx	r9
  40074a:	3c01      	subs	r4, #1
  40074c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40074e:	42ac      	cmp	r4, r5
  400750:	d1f6      	bne.n	400740 <gfx_mono_generic_draw_filled_rect+0x1c>
  400752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400756:	bf00      	nop
  400758:	00400655 	.word	0x00400655

0040075c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400760:	b083      	sub	sp, #12
  400762:	4604      	mov	r4, r0
  400764:	4688      	mov	r8, r1
  400766:	4691      	mov	r9, r2
  400768:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40076a:	7a5b      	ldrb	r3, [r3, #9]
  40076c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400770:	2100      	movs	r1, #0
  400772:	9100      	str	r1, [sp, #0]
  400774:	4649      	mov	r1, r9
  400776:	4640      	mov	r0, r8
  400778:	4d21      	ldr	r5, [pc, #132]	; (400800 <gfx_mono_draw_char+0xa4>)
  40077a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  40077c:	f89b 3000 	ldrb.w	r3, [fp]
  400780:	b113      	cbz	r3, 400788 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400782:	b003      	add	sp, #12
  400784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400788:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40078c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40078e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400792:	bf18      	it	ne
  400794:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400796:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40079a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40079e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4007a0:	fb17 f70a 	smulbb	r7, r7, sl
  4007a4:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4007a8:	f8db 3004 	ldr.w	r3, [fp, #4]
  4007ac:	fa13 f787 	uxtah	r7, r3, r7
  4007b0:	e01f      	b.n	4007f2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4007b2:	0064      	lsls	r4, r4, #1
  4007b4:	b2e4      	uxtb	r4, r4
  4007b6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4007b8:	b2eb      	uxtb	r3, r5
  4007ba:	429e      	cmp	r6, r3
  4007bc:	d910      	bls.n	4007e0 <gfx_mono_draw_char+0x84>
  4007be:	b2eb      	uxtb	r3, r5
  4007c0:	eb08 0003 	add.w	r0, r8, r3
  4007c4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4007c6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4007ca:	bf08      	it	eq
  4007cc:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4007d0:	f014 0f80 	tst.w	r4, #128	; 0x80
  4007d4:	d0ed      	beq.n	4007b2 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007d6:	2201      	movs	r2, #1
  4007d8:	4649      	mov	r1, r9
  4007da:	4b0a      	ldr	r3, [pc, #40]	; (400804 <gfx_mono_draw_char+0xa8>)
  4007dc:	4798      	blx	r3
  4007de:	e7e8      	b.n	4007b2 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4007e0:	f109 0901 	add.w	r9, r9, #1
  4007e4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007e8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007ec:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007f0:	d0c7      	beq.n	400782 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007f2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007f6:	2e00      	cmp	r6, #0
  4007f8:	d0f2      	beq.n	4007e0 <gfx_mono_draw_char+0x84>
  4007fa:	2500      	movs	r5, #0
  4007fc:	462c      	mov	r4, r5
  4007fe:	e7de      	b.n	4007be <gfx_mono_draw_char+0x62>
  400800:	00400725 	.word	0x00400725
  400804:	004008f1 	.word	0x004008f1

00400808 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40080c:	4604      	mov	r4, r0
  40080e:	4690      	mov	r8, r2
  400810:	461d      	mov	r5, r3
  400812:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400814:	4f0d      	ldr	r7, [pc, #52]	; (40084c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400816:	460e      	mov	r6, r1
  400818:	e008      	b.n	40082c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40081a:	7a6a      	ldrb	r2, [r5, #9]
  40081c:	3201      	adds	r2, #1
  40081e:	4442      	add	r2, r8
  400820:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400824:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400826:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40082a:	b16b      	cbz	r3, 400848 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  40082c:	7820      	ldrb	r0, [r4, #0]
  40082e:	280a      	cmp	r0, #10
  400830:	d0f3      	beq.n	40081a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400832:	280d      	cmp	r0, #13
  400834:	d0f7      	beq.n	400826 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400836:	462b      	mov	r3, r5
  400838:	4642      	mov	r2, r8
  40083a:	4649      	mov	r1, r9
  40083c:	47b8      	blx	r7
			x += font->width;
  40083e:	7a2b      	ldrb	r3, [r5, #8]
  400840:	4499      	add	r9, r3
  400842:	fa5f f989 	uxtb.w	r9, r9
  400846:	e7ee      	b.n	400826 <gfx_mono_draw_string+0x1e>
}
  400848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40084c:	0040075d 	.word	0x0040075d

00400850 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400850:	b570      	push	{r4, r5, r6, lr}
  400852:	4604      	mov	r4, r0
  400854:	460d      	mov	r5, r1
  400856:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400858:	b91b      	cbnz	r3, 400862 <gfx_mono_ssd1306_put_byte+0x12>
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <gfx_mono_ssd1306_put_byte+0x40>)
  40085c:	4798      	blx	r3
  40085e:	42b0      	cmp	r0, r6
  400860:	d015      	beq.n	40088e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400862:	4632      	mov	r2, r6
  400864:	4629      	mov	r1, r5
  400866:	4620      	mov	r0, r4
  400868:	4b0a      	ldr	r3, [pc, #40]	; (400894 <gfx_mono_ssd1306_put_byte+0x44>)
  40086a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40086c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400870:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400874:	4c08      	ldr	r4, [pc, #32]	; (400898 <gfx_mono_ssd1306_put_byte+0x48>)
  400876:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400878:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40087c:	f040 0010 	orr.w	r0, r0, #16
  400880:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400882:	f005 000f 	and.w	r0, r5, #15
  400886:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400888:	4630      	mov	r0, r6
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <gfx_mono_ssd1306_put_byte+0x4c>)
  40088c:	4798      	blx	r3
  40088e:	bd70      	pop	{r4, r5, r6, pc}
  400890:	00400645 	.word	0x00400645
  400894:	00400635 	.word	0x00400635
  400898:	00400961 	.word	0x00400961
  40089c:	00400b81 	.word	0x00400b81

004008a0 <gfx_mono_ssd1306_init>:
{
  4008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4008a4:	480d      	ldr	r0, [pc, #52]	; (4008dc <gfx_mono_ssd1306_init+0x3c>)
  4008a6:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <gfx_mono_ssd1306_init+0x40>)
  4008a8:	4798      	blx	r3
	ssd1306_init();
  4008aa:	4b0e      	ldr	r3, [pc, #56]	; (4008e4 <gfx_mono_ssd1306_init+0x44>)
  4008ac:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4008ae:	2040      	movs	r0, #64	; 0x40
  4008b0:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <gfx_mono_ssd1306_init+0x48>)
  4008b2:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008b4:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008b6:	f04f 0801 	mov.w	r8, #1
  4008ba:	462f      	mov	r7, r5
  4008bc:	4e0b      	ldr	r6, [pc, #44]	; (4008ec <gfx_mono_ssd1306_init+0x4c>)
{
  4008be:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008c0:	4643      	mov	r3, r8
  4008c2:	463a      	mov	r2, r7
  4008c4:	b2e1      	uxtb	r1, r4
  4008c6:	4628      	mov	r0, r5
  4008c8:	47b0      	blx	r6
  4008ca:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4008cc:	2c80      	cmp	r4, #128	; 0x80
  4008ce:	d1f7      	bne.n	4008c0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008d0:	3501      	adds	r5, #1
  4008d2:	b2ed      	uxtb	r5, r5
  4008d4:	2d04      	cmp	r5, #4
  4008d6:	d1f2      	bne.n	4008be <gfx_mono_ssd1306_init+0x1e>
  4008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008dc:	204009f4 	.word	0x204009f4
  4008e0:	00400629 	.word	0x00400629
  4008e4:	004009a1 	.word	0x004009a1
  4008e8:	00400961 	.word	0x00400961
  4008ec:	00400851 	.word	0x00400851

004008f0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008f0:	09c3      	lsrs	r3, r0, #7
  4008f2:	d12a      	bne.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008f4:	291f      	cmp	r1, #31
  4008f6:	d828      	bhi.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008fc:	4614      	mov	r4, r2
  4008fe:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400900:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400902:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400906:	2201      	movs	r2, #1
  400908:	fa02 f701 	lsl.w	r7, r2, r1
  40090c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400910:	4601      	mov	r1, r0
  400912:	4630      	mov	r0, r6
  400914:	4b0d      	ldr	r3, [pc, #52]	; (40094c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400916:	4798      	blx	r3
  400918:	4602      	mov	r2, r0
	switch (color) {
  40091a:	2c01      	cmp	r4, #1
  40091c:	d009      	beq.n	400932 <gfx_mono_ssd1306_draw_pixel+0x42>
  40091e:	b164      	cbz	r4, 40093a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400920:	2c02      	cmp	r4, #2
  400922:	d00e      	beq.n	400942 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400924:	2300      	movs	r3, #0
  400926:	4629      	mov	r1, r5
  400928:	4630      	mov	r0, r6
  40092a:	4c09      	ldr	r4, [pc, #36]	; (400950 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40092c:	47a0      	blx	r4
  40092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400932:	ea48 0200 	orr.w	r2, r8, r0
  400936:	b2d2      	uxtb	r2, r2
		break;
  400938:	e7f4      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40093a:	ea20 0207 	bic.w	r2, r0, r7
  40093e:	b2d2      	uxtb	r2, r2
		break;
  400940:	e7f0      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400942:	ea88 0200 	eor.w	r2, r8, r0
  400946:	b2d2      	uxtb	r2, r2
		break;
  400948:	e7ec      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
  40094a:	4770      	bx	lr
  40094c:	00400645 	.word	0x00400645
  400950:	00400851 	.word	0x00400851

00400954 <gfx_mono_ssd1306_get_byte>:
{
  400954:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400956:	4b01      	ldr	r3, [pc, #4]	; (40095c <gfx_mono_ssd1306_get_byte+0x8>)
  400958:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40095a:	bd08      	pop	{r3, pc}
  40095c:	00400645 	.word	0x00400645

00400960 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400960:	b538      	push	{r3, r4, r5, lr}
  400962:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400964:	2208      	movs	r2, #8
  400966:	4b09      	ldr	r3, [pc, #36]	; (40098c <ssd1306_write_command+0x2c>)
  400968:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40096a:	4c09      	ldr	r4, [pc, #36]	; (400990 <ssd1306_write_command+0x30>)
  40096c:	2101      	movs	r1, #1
  40096e:	4620      	mov	r0, r4
  400970:	4b08      	ldr	r3, [pc, #32]	; (400994 <ssd1306_write_command+0x34>)
  400972:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400974:	2301      	movs	r3, #1
  400976:	461a      	mov	r2, r3
  400978:	4629      	mov	r1, r5
  40097a:	4620      	mov	r0, r4
  40097c:	4c06      	ldr	r4, [pc, #24]	; (400998 <ssd1306_write_command+0x38>)
  40097e:	47a0      	blx	r4
	delay_us(10);
  400980:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <ssd1306_write_command+0x3c>)
  400986:	4798      	blx	r3
  400988:	bd38      	pop	{r3, r4, r5, pc}
  40098a:	bf00      	nop
  40098c:	400e1000 	.word	0x400e1000
  400990:	40008000 	.word	0x40008000
  400994:	00400461 	.word	0x00400461
  400998:	00400477 	.word	0x00400477
  40099c:	20400001 	.word	0x20400001

004009a0 <ssd1306_init>:
{
  4009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009a4:	4d66      	ldr	r5, [pc, #408]	; (400b40 <ssd1306_init+0x1a0>)
  4009a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4009aa:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009ac:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009b0:	4b64      	ldr	r3, [pc, #400]	; (400b44 <ssd1306_init+0x1a4>)
  4009b2:	2708      	movs	r7, #8
  4009b4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009ba:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009bc:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009c4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009c8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4009ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009ce:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4009d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009d6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4009d8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009da:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009de:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009e0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009e2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009e8:	f022 0208 	bic.w	r2, r2, #8
  4009ec:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009f0:	f022 0208 	bic.w	r2, r2, #8
  4009f4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009f6:	601f      	str	r7, [r3, #0]
  4009f8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009fa:	631f      	str	r7, [r3, #48]	; 0x30
  4009fc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009fe:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b7c <ssd1306_init+0x1dc>
  400a02:	2300      	movs	r3, #0
  400a04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a0c:	4640      	mov	r0, r8
  400a0e:	4c4e      	ldr	r4, [pc, #312]	; (400b48 <ssd1306_init+0x1a8>)
  400a10:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a12:	2300      	movs	r3, #0
  400a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a1c:	4640      	mov	r0, r8
  400a1e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a20:	2300      	movs	r3, #0
  400a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a2a:	4640      	mov	r0, r8
  400a2c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a2e:	2300      	movs	r3, #0
  400a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a38:	4640      	mov	r0, r8
  400a3a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a3c:	2300      	movs	r3, #0
  400a3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a46:	4640      	mov	r0, r8
  400a48:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a4a:	2300      	movs	r3, #0
  400a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a54:	4640      	mov	r0, r8
  400a56:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a58:	4c3c      	ldr	r4, [pc, #240]	; (400b4c <ssd1306_init+0x1ac>)
  400a5a:	f04f 0902 	mov.w	r9, #2
  400a5e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a62:	f04f 0880 	mov.w	r8, #128	; 0x80
  400a66:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a6a:	6863      	ldr	r3, [r4, #4]
  400a6c:	f043 0301 	orr.w	r3, r3, #1
  400a70:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400a72:	463a      	mov	r2, r7
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b35      	ldr	r3, [pc, #212]	; (400b50 <ssd1306_init+0x1b0>)
  400a7a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a7c:	2200      	movs	r2, #0
  400a7e:	2101      	movs	r1, #1
  400a80:	4620      	mov	r0, r4
  400a82:	4b34      	ldr	r3, [pc, #208]	; (400b54 <ssd1306_init+0x1b4>)
  400a84:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a86:	2200      	movs	r2, #0
  400a88:	2101      	movs	r1, #1
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b32      	ldr	r3, [pc, #200]	; (400b58 <ssd1306_init+0x1b8>)
  400a8e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a90:	6863      	ldr	r3, [r4, #4]
  400a92:	f023 0302 	bic.w	r3, r3, #2
  400a96:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a98:	2200      	movs	r2, #0
  400a9a:	2101      	movs	r1, #1
  400a9c:	4620      	mov	r0, r4
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <ssd1306_init+0x1bc>)
  400aa0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400aa8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400aaa:	6863      	ldr	r3, [r4, #4]
  400aac:	f043 0310 	orr.w	r3, r3, #16
  400ab0:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400ab2:	492b      	ldr	r1, [pc, #172]	; (400b60 <ssd1306_init+0x1c0>)
  400ab4:	482b      	ldr	r0, [pc, #172]	; (400b64 <ssd1306_init+0x1c4>)
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ssd1306_init+0x1c8>)
  400ab8:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400aba:	b2c2      	uxtb	r2, r0
  400abc:	2101      	movs	r1, #1
  400abe:	4620      	mov	r0, r4
  400ac0:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <ssd1306_init+0x1cc>)
  400ac2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ssd1306_init+0x1d0>)
  400ac8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400aca:	2301      	movs	r3, #1
  400acc:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400ace:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ad4:	4c27      	ldr	r4, [pc, #156]	; (400b74 <ssd1306_init+0x1d4>)
  400ad6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ad8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ade:	47a0      	blx	r4
  400ae0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400ae2:	20a8      	movs	r0, #168	; 0xa8
  400ae4:	4c24      	ldr	r4, [pc, #144]	; (400b78 <ssd1306_init+0x1d8>)
  400ae6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ae8:	201f      	movs	r0, #31
  400aea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400aec:	20d3      	movs	r0, #211	; 0xd3
  400aee:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400af0:	2000      	movs	r0, #0
  400af2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400af4:	2040      	movs	r0, #64	; 0x40
  400af6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400af8:	20a1      	movs	r0, #161	; 0xa1
  400afa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400afc:	20c8      	movs	r0, #200	; 0xc8
  400afe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b00:	20da      	movs	r0, #218	; 0xda
  400b02:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b04:	4648      	mov	r0, r9
  400b06:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b08:	2081      	movs	r0, #129	; 0x81
  400b0a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b0c:	208f      	movs	r0, #143	; 0x8f
  400b0e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b10:	20a4      	movs	r0, #164	; 0xa4
  400b12:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b14:	20a6      	movs	r0, #166	; 0xa6
  400b16:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b18:	20d5      	movs	r0, #213	; 0xd5
  400b1a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b1c:	4640      	mov	r0, r8
  400b1e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b20:	208d      	movs	r0, #141	; 0x8d
  400b22:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b24:	2014      	movs	r0, #20
  400b26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b28:	20db      	movs	r0, #219	; 0xdb
  400b2a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b2c:	2040      	movs	r0, #64	; 0x40
  400b2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b30:	20d9      	movs	r0, #217	; 0xd9
  400b32:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b34:	20f1      	movs	r0, #241	; 0xf1
  400b36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400b38:	20af      	movs	r0, #175	; 0xaf
  400b3a:	47a0      	blx	r4
  400b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b40:	400e1200 	.word	0x400e1200
  400b44:	400e1000 	.word	0x400e1000
  400b48:	00400e9d 	.word	0x00400e9d
  400b4c:	40008000 	.word	0x40008000
  400b50:	004004e7 	.word	0x004004e7
  400b54:	004004ab 	.word	0x004004ab
  400b58:	004004c9 	.word	0x004004c9
  400b5c:	0040052d 	.word	0x0040052d
  400b60:	08f0d180 	.word	0x08f0d180
  400b64:	001e8480 	.word	0x001e8480
  400b68:	00400541 	.word	0x00400541
  400b6c:	00400557 	.word	0x00400557
  400b70:	00400435 	.word	0x00400435
  400b74:	20400001 	.word	0x20400001
  400b78:	00400961 	.word	0x00400961
  400b7c:	400e1400 	.word	0x400e1400

00400b80 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b80:	b538      	push	{r3, r4, r5, lr}
  400b82:	4605      	mov	r5, r0
  400b84:	2208      	movs	r2, #8
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <ssd1306_write_data+0x2c>)
  400b88:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b8a:	4c09      	ldr	r4, [pc, #36]	; (400bb0 <ssd1306_write_data+0x30>)
  400b8c:	2101      	movs	r1, #1
  400b8e:	4620      	mov	r0, r4
  400b90:	4b08      	ldr	r3, [pc, #32]	; (400bb4 <ssd1306_write_data+0x34>)
  400b92:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b94:	2301      	movs	r3, #1
  400b96:	461a      	mov	r2, r3
  400b98:	4629      	mov	r1, r5
  400b9a:	4620      	mov	r0, r4
  400b9c:	4c06      	ldr	r4, [pc, #24]	; (400bb8 <ssd1306_write_data+0x38>)
  400b9e:	47a0      	blx	r4
	delay_us(10);
  400ba0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <ssd1306_write_data+0x3c>)
  400ba6:	4798      	blx	r3
  400ba8:	bd38      	pop	{r3, r4, r5, pc}
  400baa:	bf00      	nop
  400bac:	400e1000 	.word	0x400e1000
  400bb0:	40008000 	.word	0x40008000
  400bb4:	00400461 	.word	0x00400461
  400bb8:	00400477 	.word	0x00400477
  400bbc:	20400001 	.word	0x20400001

00400bc0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bc0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bc2:	4810      	ldr	r0, [pc, #64]	; (400c04 <sysclk_init+0x44>)
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <sysclk_init+0x48>)
  400bc6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bc8:	213e      	movs	r1, #62	; 0x3e
  400bca:	2000      	movs	r0, #0
  400bcc:	4b0f      	ldr	r3, [pc, #60]	; (400c0c <sysclk_init+0x4c>)
  400bce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400bd0:	4c0f      	ldr	r4, [pc, #60]	; (400c10 <sysclk_init+0x50>)
  400bd2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d0fc      	beq.n	400bd2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400bd8:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <sysclk_init+0x54>)
  400bda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <sysclk_init+0x58>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <sysclk_init+0x5c>)
  400be0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400be2:	4c0f      	ldr	r4, [pc, #60]	; (400c20 <sysclk_init+0x60>)
  400be4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400be6:	2800      	cmp	r0, #0
  400be8:	d0fc      	beq.n	400be4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400bea:	2002      	movs	r0, #2
  400bec:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <sysclk_init+0x64>)
  400bee:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400bf0:	2000      	movs	r0, #0
  400bf2:	4b0d      	ldr	r3, [pc, #52]	; (400c28 <sysclk_init+0x68>)
  400bf4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bf6:	4b0d      	ldr	r3, [pc, #52]	; (400c2c <sysclk_init+0x6c>)
  400bf8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bfa:	4802      	ldr	r0, [pc, #8]	; (400c04 <sysclk_init+0x44>)
  400bfc:	4b02      	ldr	r3, [pc, #8]	; (400c08 <sysclk_init+0x48>)
  400bfe:	4798      	blx	r3
  400c00:	bd10      	pop	{r4, pc}
  400c02:	bf00      	nop
  400c04:	11e1a300 	.word	0x11e1a300
  400c08:	004016a1 	.word	0x004016a1
  400c0c:	0040112d 	.word	0x0040112d
  400c10:	00401181 	.word	0x00401181
  400c14:	00401191 	.word	0x00401191
  400c18:	20183f01 	.word	0x20183f01
  400c1c:	400e0600 	.word	0x400e0600
  400c20:	004011a1 	.word	0x004011a1
  400c24:	00401091 	.word	0x00401091
  400c28:	004010c9 	.word	0x004010c9
  400c2c:	00401595 	.word	0x00401595

00400c30 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400c32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c36:	4b48      	ldr	r3, [pc, #288]	; (400d58 <board_init+0x128>)
  400c38:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400c3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c3e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400c42:	4b46      	ldr	r3, [pc, #280]	; (400d5c <board_init+0x12c>)
  400c44:	2200      	movs	r2, #0
  400c46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400c4a:	695a      	ldr	r2, [r3, #20]
  400c4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400c50:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400c52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c56:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400c5a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400c5e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400c62:	f007 0007 	and.w	r0, r7, #7
  400c66:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400c68:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400c6c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400c70:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400c74:	f3bf 8f4f 	dsb	sy
  400c78:	f04f 34ff 	mov.w	r4, #4294967295
  400c7c:	fa04 fc00 	lsl.w	ip, r4, r0
  400c80:	fa06 f000 	lsl.w	r0, r6, r0
  400c84:	fa04 f40e 	lsl.w	r4, r4, lr
  400c88:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400c8c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400c8e:	463a      	mov	r2, r7
  400c90:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400c92:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400c96:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400c9a:	3a01      	subs	r2, #1
  400c9c:	4423      	add	r3, r4
  400c9e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400ca2:	d1f6      	bne.n	400c92 <board_init+0x62>
        } while(sets--);
  400ca4:	3e01      	subs	r6, #1
  400ca6:	4460      	add	r0, ip
  400ca8:	f1b6 3fff 	cmp.w	r6, #4294967295
  400cac:	d1ef      	bne.n	400c8e <board_init+0x5e>
  400cae:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400cb2:	4b2a      	ldr	r3, [pc, #168]	; (400d5c <board_init+0x12c>)
  400cb4:	695a      	ldr	r2, [r3, #20]
  400cb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400cba:	615a      	str	r2, [r3, #20]
  400cbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cc0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400cc4:	4a26      	ldr	r2, [pc, #152]	; (400d60 <board_init+0x130>)
  400cc6:	4927      	ldr	r1, [pc, #156]	; (400d64 <board_init+0x134>)
  400cc8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400cca:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400cce:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cd4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400cd8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400cdc:	f022 0201 	bic.w	r2, r2, #1
  400ce0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ce4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ce8:	f022 0201 	bic.w	r2, r2, #1
  400cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cf4:	f3bf 8f6f 	isb	sy
  400cf8:	200a      	movs	r0, #10
  400cfa:	4c1b      	ldr	r4, [pc, #108]	; (400d68 <board_init+0x138>)
  400cfc:	47a0      	blx	r4
  400cfe:	200b      	movs	r0, #11
  400d00:	47a0      	blx	r4
  400d02:	200c      	movs	r0, #12
  400d04:	47a0      	blx	r4
  400d06:	2010      	movs	r0, #16
  400d08:	47a0      	blx	r4
  400d0a:	2011      	movs	r0, #17
  400d0c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d0e:	4b17      	ldr	r3, [pc, #92]	; (400d6c <board_init+0x13c>)
  400d10:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d14:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d1a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d24:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d2a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d30:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400d32:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400d38:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400d3a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400d3e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d40:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400d42:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400d46:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400d48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400d4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400d50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d56:	bf00      	nop
  400d58:	400e1850 	.word	0x400e1850
  400d5c:	e000ed00 	.word	0xe000ed00
  400d60:	400e0c00 	.word	0x400e0c00
  400d64:	5a00080c 	.word	0x5a00080c
  400d68:	004011b1 	.word	0x004011b1
  400d6c:	400e1200 	.word	0x400e1200

00400d70 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400d70:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400d74:	0053      	lsls	r3, r2, #1
  400d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d7a:	fbb2 f2f3 	udiv	r2, r2, r3
  400d7e:	3a01      	subs	r2, #1
  400d80:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400d84:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400d88:	4770      	bx	lr

00400d8a <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400d8a:	6301      	str	r1, [r0, #48]	; 0x30
  400d8c:	4770      	bx	lr

00400d8e <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400d8e:	6341      	str	r1, [r0, #52]	; 0x34
  400d90:	4770      	bx	lr

00400d92 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400d92:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400d96:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d9a:	d105      	bne.n	400da8 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400d9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400d9e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400da0:	bf14      	ite	ne
  400da2:	2001      	movne	r0, #1
  400da4:	2000      	moveq	r0, #0
  400da6:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400da8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400daa:	e7f8      	b.n	400d9e <pio_get+0xc>

00400dac <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400dac:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400dae:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400db2:	d03a      	beq.n	400e2a <pio_set_peripheral+0x7e>
  400db4:	d813      	bhi.n	400dde <pio_set_peripheral+0x32>
  400db6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400dba:	d025      	beq.n	400e08 <pio_set_peripheral+0x5c>
  400dbc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400dc0:	d10a      	bne.n	400dd8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dc2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400dc4:	4313      	orrs	r3, r2
  400dc6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dc8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400dcc:	400b      	ands	r3, r1
  400dce:	ea23 0302 	bic.w	r3, r3, r2
  400dd2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400dd4:	6042      	str	r2, [r0, #4]
  400dd6:	4770      	bx	lr
	switch (ul_type) {
  400dd8:	2900      	cmp	r1, #0
  400dda:	d1fb      	bne.n	400dd4 <pio_set_peripheral+0x28>
  400ddc:	4770      	bx	lr
  400dde:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400de2:	d021      	beq.n	400e28 <pio_set_peripheral+0x7c>
  400de4:	d809      	bhi.n	400dfa <pio_set_peripheral+0x4e>
  400de6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400dea:	d1f3      	bne.n	400dd4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400dee:	4313      	orrs	r3, r2
  400df0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400df2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400df4:	4313      	orrs	r3, r2
  400df6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400df8:	e7ec      	b.n	400dd4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400dfa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400dfe:	d013      	beq.n	400e28 <pio_set_peripheral+0x7c>
  400e00:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e04:	d010      	beq.n	400e28 <pio_set_peripheral+0x7c>
  400e06:	e7e5      	b.n	400dd4 <pio_set_peripheral+0x28>
{
  400e08:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e0a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e0c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400e0e:	43d3      	mvns	r3, r2
  400e10:	4021      	ands	r1, r4
  400e12:	461c      	mov	r4, r3
  400e14:	4019      	ands	r1, r3
  400e16:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e18:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e1a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e1c:	400b      	ands	r3, r1
  400e1e:	4023      	ands	r3, r4
  400e20:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400e22:	6042      	str	r2, [r0, #4]
}
  400e24:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e28:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e2a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e2c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400e2e:	400b      	ands	r3, r1
  400e30:	ea23 0302 	bic.w	r3, r3, r2
  400e34:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e36:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e38:	4313      	orrs	r3, r2
  400e3a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e3c:	e7ca      	b.n	400dd4 <pio_set_peripheral+0x28>

00400e3e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e3e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e40:	f012 0f01 	tst.w	r2, #1
  400e44:	d10d      	bne.n	400e62 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400e46:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e48:	f012 0f0a 	tst.w	r2, #10
  400e4c:	d00b      	beq.n	400e66 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400e4e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400e50:	f012 0f02 	tst.w	r2, #2
  400e54:	d109      	bne.n	400e6a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400e56:	f012 0f08 	tst.w	r2, #8
  400e5a:	d008      	beq.n	400e6e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400e5c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400e60:	e005      	b.n	400e6e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400e62:	6641      	str	r1, [r0, #100]	; 0x64
  400e64:	e7f0      	b.n	400e48 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400e66:	6241      	str	r1, [r0, #36]	; 0x24
  400e68:	e7f2      	b.n	400e50 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400e6a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400e6e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400e70:	6001      	str	r1, [r0, #0]
  400e72:	4770      	bx	lr

00400e74 <pio_set_output>:
{
  400e74:	b410      	push	{r4}
  400e76:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400e78:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e7a:	b94c      	cbnz	r4, 400e90 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400e7c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400e7e:	b14b      	cbz	r3, 400e94 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400e80:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400e82:	b94a      	cbnz	r2, 400e98 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400e84:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400e86:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400e88:	6001      	str	r1, [r0, #0]
}
  400e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e8e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400e90:	6641      	str	r1, [r0, #100]	; 0x64
  400e92:	e7f4      	b.n	400e7e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400e94:	6541      	str	r1, [r0, #84]	; 0x54
  400e96:	e7f4      	b.n	400e82 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400e98:	6301      	str	r1, [r0, #48]	; 0x30
  400e9a:	e7f4      	b.n	400e86 <pio_set_output+0x12>

00400e9c <pio_configure>:
{
  400e9c:	b570      	push	{r4, r5, r6, lr}
  400e9e:	b082      	sub	sp, #8
  400ea0:	4605      	mov	r5, r0
  400ea2:	4616      	mov	r6, r2
  400ea4:	461c      	mov	r4, r3
	switch (ul_type) {
  400ea6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400eaa:	d014      	beq.n	400ed6 <pio_configure+0x3a>
  400eac:	d90a      	bls.n	400ec4 <pio_configure+0x28>
  400eae:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400eb2:	d024      	beq.n	400efe <pio_configure+0x62>
  400eb4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400eb8:	d021      	beq.n	400efe <pio_configure+0x62>
  400eba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ebe:	d017      	beq.n	400ef0 <pio_configure+0x54>
		return 0;
  400ec0:	2000      	movs	r0, #0
  400ec2:	e01a      	b.n	400efa <pio_configure+0x5e>
	switch (ul_type) {
  400ec4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ec8:	d005      	beq.n	400ed6 <pio_configure+0x3a>
  400eca:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ece:	d002      	beq.n	400ed6 <pio_configure+0x3a>
  400ed0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ed4:	d1f4      	bne.n	400ec0 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400ed6:	4632      	mov	r2, r6
  400ed8:	4628      	mov	r0, r5
  400eda:	4b11      	ldr	r3, [pc, #68]	; (400f20 <pio_configure+0x84>)
  400edc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400ede:	f014 0f01 	tst.w	r4, #1
  400ee2:	d102      	bne.n	400eea <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400ee4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400ee6:	2001      	movs	r0, #1
  400ee8:	e007      	b.n	400efa <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400eea:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400eec:	2001      	movs	r0, #1
  400eee:	e004      	b.n	400efa <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400ef0:	461a      	mov	r2, r3
  400ef2:	4631      	mov	r1, r6
  400ef4:	4b0b      	ldr	r3, [pc, #44]	; (400f24 <pio_configure+0x88>)
  400ef6:	4798      	blx	r3
	return 1;
  400ef8:	2001      	movs	r0, #1
}
  400efa:	b002      	add	sp, #8
  400efc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400efe:	f004 0301 	and.w	r3, r4, #1
  400f02:	9300      	str	r3, [sp, #0]
  400f04:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400f08:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f0c:	bf14      	ite	ne
  400f0e:	2200      	movne	r2, #0
  400f10:	2201      	moveq	r2, #1
  400f12:	4631      	mov	r1, r6
  400f14:	4628      	mov	r0, r5
  400f16:	4c04      	ldr	r4, [pc, #16]	; (400f28 <pio_configure+0x8c>)
  400f18:	47a0      	blx	r4
	return 1;
  400f1a:	2001      	movs	r0, #1
		break;
  400f1c:	e7ed      	b.n	400efa <pio_configure+0x5e>
  400f1e:	bf00      	nop
  400f20:	00400dad 	.word	0x00400dad
  400f24:	00400e3f 	.word	0x00400e3f
  400f28:	00400e75 	.word	0x00400e75

00400f2c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400f2c:	f012 0f10 	tst.w	r2, #16
  400f30:	d012      	beq.n	400f58 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400f32:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400f36:	f012 0f20 	tst.w	r2, #32
  400f3a:	d007      	beq.n	400f4c <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400f3c:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400f40:	f012 0f40 	tst.w	r2, #64	; 0x40
  400f44:	d005      	beq.n	400f52 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400f46:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400f4a:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400f4c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400f50:	e7f6      	b.n	400f40 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400f52:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400f56:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400f58:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400f5c:	4770      	bx	lr

00400f5e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400f5e:	6401      	str	r1, [r0, #64]	; 0x40
  400f60:	4770      	bx	lr

00400f62 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f62:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f64:	4770      	bx	lr

00400f66 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f66:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f68:	4770      	bx	lr
	...

00400f6c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f70:	4604      	mov	r4, r0
  400f72:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f74:	4b0e      	ldr	r3, [pc, #56]	; (400fb0 <pio_handler_process+0x44>)
  400f76:	4798      	blx	r3
  400f78:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f7a:	4620      	mov	r0, r4
  400f7c:	4b0d      	ldr	r3, [pc, #52]	; (400fb4 <pio_handler_process+0x48>)
  400f7e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f80:	4005      	ands	r5, r0
  400f82:	d013      	beq.n	400fac <pio_handler_process+0x40>
  400f84:	4c0c      	ldr	r4, [pc, #48]	; (400fb8 <pio_handler_process+0x4c>)
  400f86:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f8a:	e003      	b.n	400f94 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f8c:	42b4      	cmp	r4, r6
  400f8e:	d00d      	beq.n	400fac <pio_handler_process+0x40>
  400f90:	3410      	adds	r4, #16
		while (status != 0) {
  400f92:	b15d      	cbz	r5, 400fac <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f94:	6820      	ldr	r0, [r4, #0]
  400f96:	4540      	cmp	r0, r8
  400f98:	d1f8      	bne.n	400f8c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f9a:	6861      	ldr	r1, [r4, #4]
  400f9c:	4229      	tst	r1, r5
  400f9e:	d0f5      	beq.n	400f8c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400fa0:	68e3      	ldr	r3, [r4, #12]
  400fa2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400fa4:	6863      	ldr	r3, [r4, #4]
  400fa6:	ea25 0503 	bic.w	r5, r5, r3
  400faa:	e7ef      	b.n	400f8c <pio_handler_process+0x20>
  400fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fb0:	00400f63 	.word	0x00400f63
  400fb4:	00400f67 	.word	0x00400f67
  400fb8:	20400bf4 	.word	0x20400bf4

00400fbc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400fbe:	4c18      	ldr	r4, [pc, #96]	; (401020 <pio_handler_set+0x64>)
  400fc0:	6826      	ldr	r6, [r4, #0]
  400fc2:	2e06      	cmp	r6, #6
  400fc4:	d82a      	bhi.n	40101c <pio_handler_set+0x60>
  400fc6:	f04f 0c00 	mov.w	ip, #0
  400fca:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fcc:	4f15      	ldr	r7, [pc, #84]	; (401024 <pio_handler_set+0x68>)
  400fce:	e004      	b.n	400fda <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400fd0:	3401      	adds	r4, #1
  400fd2:	b2e4      	uxtb	r4, r4
  400fd4:	46a4      	mov	ip, r4
  400fd6:	42a6      	cmp	r6, r4
  400fd8:	d309      	bcc.n	400fee <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400fda:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fdc:	0125      	lsls	r5, r4, #4
  400fde:	597d      	ldr	r5, [r7, r5]
  400fe0:	428d      	cmp	r5, r1
  400fe2:	d1f5      	bne.n	400fd0 <pio_handler_set+0x14>
  400fe4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400fe8:	686d      	ldr	r5, [r5, #4]
  400fea:	4295      	cmp	r5, r2
  400fec:	d1f0      	bne.n	400fd0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400fee:	4d0d      	ldr	r5, [pc, #52]	; (401024 <pio_handler_set+0x68>)
  400ff0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400ff4:	eb05 040e 	add.w	r4, r5, lr
  400ff8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400ffc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400ffe:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401000:	9906      	ldr	r1, [sp, #24]
  401002:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401004:	3601      	adds	r6, #1
  401006:	4566      	cmp	r6, ip
  401008:	d005      	beq.n	401016 <pio_handler_set+0x5a>
  40100a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40100c:	461a      	mov	r2, r3
  40100e:	4b06      	ldr	r3, [pc, #24]	; (401028 <pio_handler_set+0x6c>)
  401010:	4798      	blx	r3

	return 0;
  401012:	2000      	movs	r0, #0
  401014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401016:	4902      	ldr	r1, [pc, #8]	; (401020 <pio_handler_set+0x64>)
  401018:	600e      	str	r6, [r1, #0]
  40101a:	e7f6      	b.n	40100a <pio_handler_set+0x4e>
		return 1;
  40101c:	2001      	movs	r0, #1
}
  40101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401020:	20400c64 	.word	0x20400c64
  401024:	20400bf4 	.word	0x20400bf4
  401028:	00400f2d 	.word	0x00400f2d

0040102c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40102c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40102e:	210a      	movs	r1, #10
  401030:	4801      	ldr	r0, [pc, #4]	; (401038 <PIOA_Handler+0xc>)
  401032:	4b02      	ldr	r3, [pc, #8]	; (40103c <PIOA_Handler+0x10>)
  401034:	4798      	blx	r3
  401036:	bd08      	pop	{r3, pc}
  401038:	400e0e00 	.word	0x400e0e00
  40103c:	00400f6d 	.word	0x00400f6d

00401040 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401040:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401042:	210b      	movs	r1, #11
  401044:	4801      	ldr	r0, [pc, #4]	; (40104c <PIOB_Handler+0xc>)
  401046:	4b02      	ldr	r3, [pc, #8]	; (401050 <PIOB_Handler+0x10>)
  401048:	4798      	blx	r3
  40104a:	bd08      	pop	{r3, pc}
  40104c:	400e1000 	.word	0x400e1000
  401050:	00400f6d 	.word	0x00400f6d

00401054 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401054:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401056:	210c      	movs	r1, #12
  401058:	4801      	ldr	r0, [pc, #4]	; (401060 <PIOC_Handler+0xc>)
  40105a:	4b02      	ldr	r3, [pc, #8]	; (401064 <PIOC_Handler+0x10>)
  40105c:	4798      	blx	r3
  40105e:	bd08      	pop	{r3, pc}
  401060:	400e1200 	.word	0x400e1200
  401064:	00400f6d 	.word	0x00400f6d

00401068 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401068:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40106a:	2110      	movs	r1, #16
  40106c:	4801      	ldr	r0, [pc, #4]	; (401074 <PIOD_Handler+0xc>)
  40106e:	4b02      	ldr	r3, [pc, #8]	; (401078 <PIOD_Handler+0x10>)
  401070:	4798      	blx	r3
  401072:	bd08      	pop	{r3, pc}
  401074:	400e1400 	.word	0x400e1400
  401078:	00400f6d 	.word	0x00400f6d

0040107c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40107c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40107e:	2111      	movs	r1, #17
  401080:	4801      	ldr	r0, [pc, #4]	; (401088 <PIOE_Handler+0xc>)
  401082:	4b02      	ldr	r3, [pc, #8]	; (40108c <PIOE_Handler+0x10>)
  401084:	4798      	blx	r3
  401086:	bd08      	pop	{r3, pc}
  401088:	400e1600 	.word	0x400e1600
  40108c:	00400f6d 	.word	0x00400f6d

00401090 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401090:	2803      	cmp	r0, #3
  401092:	d011      	beq.n	4010b8 <pmc_mck_set_division+0x28>
  401094:	2804      	cmp	r0, #4
  401096:	d012      	beq.n	4010be <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401098:	2802      	cmp	r0, #2
  40109a:	bf0c      	ite	eq
  40109c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4010a0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4010a2:	4a08      	ldr	r2, [pc, #32]	; (4010c4 <pmc_mck_set_division+0x34>)
  4010a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4010aa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4010ac:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4010ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010b0:	f013 0f08 	tst.w	r3, #8
  4010b4:	d0fb      	beq.n	4010ae <pmc_mck_set_division+0x1e>
}
  4010b6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4010b8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4010bc:	e7f1      	b.n	4010a2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4010be:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4010c2:	e7ee      	b.n	4010a2 <pmc_mck_set_division+0x12>
  4010c4:	400e0600 	.word	0x400e0600

004010c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4010c8:	4a17      	ldr	r2, [pc, #92]	; (401128 <pmc_switch_mck_to_pllack+0x60>)
  4010ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4010d0:	4318      	orrs	r0, r3
  4010d2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010d6:	f013 0f08 	tst.w	r3, #8
  4010da:	d10a      	bne.n	4010f2 <pmc_switch_mck_to_pllack+0x2a>
  4010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010e0:	4911      	ldr	r1, [pc, #68]	; (401128 <pmc_switch_mck_to_pllack+0x60>)
  4010e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010e4:	f012 0f08 	tst.w	r2, #8
  4010e8:	d103      	bne.n	4010f2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010ea:	3b01      	subs	r3, #1
  4010ec:	d1f9      	bne.n	4010e2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4010ee:	2001      	movs	r0, #1
  4010f0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4010f2:	4a0d      	ldr	r2, [pc, #52]	; (401128 <pmc_switch_mck_to_pllack+0x60>)
  4010f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010f6:	f023 0303 	bic.w	r3, r3, #3
  4010fa:	f043 0302 	orr.w	r3, r3, #2
  4010fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401100:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401102:	f013 0f08 	tst.w	r3, #8
  401106:	d10a      	bne.n	40111e <pmc_switch_mck_to_pllack+0x56>
  401108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40110c:	4906      	ldr	r1, [pc, #24]	; (401128 <pmc_switch_mck_to_pllack+0x60>)
  40110e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401110:	f012 0f08 	tst.w	r2, #8
  401114:	d105      	bne.n	401122 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401116:	3b01      	subs	r3, #1
  401118:	d1f9      	bne.n	40110e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40111a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40111c:	4770      	bx	lr
	return 0;
  40111e:	2000      	movs	r0, #0
  401120:	4770      	bx	lr
  401122:	2000      	movs	r0, #0
  401124:	4770      	bx	lr
  401126:	bf00      	nop
  401128:	400e0600 	.word	0x400e0600

0040112c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40112c:	b9a0      	cbnz	r0, 401158 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40112e:	480e      	ldr	r0, [pc, #56]	; (401168 <pmc_switch_mainck_to_xtal+0x3c>)
  401130:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401132:	0209      	lsls	r1, r1, #8
  401134:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401136:	4a0d      	ldr	r2, [pc, #52]	; (40116c <pmc_switch_mainck_to_xtal+0x40>)
  401138:	401a      	ands	r2, r3
  40113a:	4b0d      	ldr	r3, [pc, #52]	; (401170 <pmc_switch_mainck_to_xtal+0x44>)
  40113c:	4313      	orrs	r3, r2
  40113e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401140:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401142:	4602      	mov	r2, r0
  401144:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401146:	f013 0f01 	tst.w	r3, #1
  40114a:	d0fb      	beq.n	401144 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40114c:	4a06      	ldr	r2, [pc, #24]	; (401168 <pmc_switch_mainck_to_xtal+0x3c>)
  40114e:	6a11      	ldr	r1, [r2, #32]
  401150:	4b08      	ldr	r3, [pc, #32]	; (401174 <pmc_switch_mainck_to_xtal+0x48>)
  401152:	430b      	orrs	r3, r1
  401154:	6213      	str	r3, [r2, #32]
  401156:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401158:	4903      	ldr	r1, [pc, #12]	; (401168 <pmc_switch_mainck_to_xtal+0x3c>)
  40115a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40115c:	4a06      	ldr	r2, [pc, #24]	; (401178 <pmc_switch_mainck_to_xtal+0x4c>)
  40115e:	401a      	ands	r2, r3
  401160:	4b06      	ldr	r3, [pc, #24]	; (40117c <pmc_switch_mainck_to_xtal+0x50>)
  401162:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401164:	620b      	str	r3, [r1, #32]
  401166:	4770      	bx	lr
  401168:	400e0600 	.word	0x400e0600
  40116c:	ffc8fffc 	.word	0xffc8fffc
  401170:	00370001 	.word	0x00370001
  401174:	01370000 	.word	0x01370000
  401178:	fec8fffc 	.word	0xfec8fffc
  40117c:	01370002 	.word	0x01370002

00401180 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401180:	4b02      	ldr	r3, [pc, #8]	; (40118c <pmc_osc_is_ready_mainck+0xc>)
  401182:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401184:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401188:	4770      	bx	lr
  40118a:	bf00      	nop
  40118c:	400e0600 	.word	0x400e0600

00401190 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401190:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401194:	4b01      	ldr	r3, [pc, #4]	; (40119c <pmc_disable_pllack+0xc>)
  401196:	629a      	str	r2, [r3, #40]	; 0x28
  401198:	4770      	bx	lr
  40119a:	bf00      	nop
  40119c:	400e0600 	.word	0x400e0600

004011a0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4011a0:	4b02      	ldr	r3, [pc, #8]	; (4011ac <pmc_is_locked_pllack+0xc>)
  4011a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011a4:	f000 0002 	and.w	r0, r0, #2
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	400e0600 	.word	0x400e0600

004011b0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4011b0:	283f      	cmp	r0, #63	; 0x3f
  4011b2:	d81e      	bhi.n	4011f2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4011b4:	281f      	cmp	r0, #31
  4011b6:	d80c      	bhi.n	4011d2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4011b8:	4b11      	ldr	r3, [pc, #68]	; (401200 <pmc_enable_periph_clk+0x50>)
  4011ba:	699a      	ldr	r2, [r3, #24]
  4011bc:	2301      	movs	r3, #1
  4011be:	4083      	lsls	r3, r0
  4011c0:	4393      	bics	r3, r2
  4011c2:	d018      	beq.n	4011f6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4011c4:	2301      	movs	r3, #1
  4011c6:	fa03 f000 	lsl.w	r0, r3, r0
  4011ca:	4b0d      	ldr	r3, [pc, #52]	; (401200 <pmc_enable_periph_clk+0x50>)
  4011cc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4011ce:	2000      	movs	r0, #0
  4011d0:	4770      	bx	lr
		ul_id -= 32;
  4011d2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4011d4:	4b0a      	ldr	r3, [pc, #40]	; (401200 <pmc_enable_periph_clk+0x50>)
  4011d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4011da:	2301      	movs	r3, #1
  4011dc:	4083      	lsls	r3, r0
  4011de:	4393      	bics	r3, r2
  4011e0:	d00b      	beq.n	4011fa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4011e2:	2301      	movs	r3, #1
  4011e4:	fa03 f000 	lsl.w	r0, r3, r0
  4011e8:	4b05      	ldr	r3, [pc, #20]	; (401200 <pmc_enable_periph_clk+0x50>)
  4011ea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4011ee:	2000      	movs	r0, #0
  4011f0:	4770      	bx	lr
		return 1;
  4011f2:	2001      	movs	r0, #1
  4011f4:	4770      	bx	lr
	return 0;
  4011f6:	2000      	movs	r0, #0
  4011f8:	4770      	bx	lr
  4011fa:	2000      	movs	r0, #0
}
  4011fc:	4770      	bx	lr
  4011fe:	bf00      	nop
  401200:	400e0600 	.word	0x400e0600

00401204 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401204:	4770      	bx	lr
	...

00401208 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  401208:	4a10      	ldr	r2, [pc, #64]	; (40124c <pmc_enable_waitmode+0x44>)
  40120a:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  40120c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  401214:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  401216:	6a11      	ldr	r1, [r2, #32]
  401218:	4b0d      	ldr	r3, [pc, #52]	; (401250 <pmc_enable_waitmode+0x48>)
  40121a:	430b      	orrs	r3, r1
  40121c:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40121e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401220:	f013 0f08 	tst.w	r3, #8
  401224:	d0fb      	beq.n	40121e <pmc_enable_waitmode+0x16>
  401226:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  40122a:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  40122c:	3b01      	subs	r3, #1
  40122e:	d1fc      	bne.n	40122a <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  401230:	4a06      	ldr	r2, [pc, #24]	; (40124c <pmc_enable_waitmode+0x44>)
  401232:	6a13      	ldr	r3, [r2, #32]
  401234:	f013 0f08 	tst.w	r3, #8
  401238:	d0fb      	beq.n	401232 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40123a:	4a04      	ldr	r2, [pc, #16]	; (40124c <pmc_enable_waitmode+0x44>)
  40123c:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  40123e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  401246:	6713      	str	r3, [r2, #112]	; 0x70
  401248:	4770      	bx	lr
  40124a:	bf00      	nop
  40124c:	400e0600 	.word	0x400e0600
  401250:	00370004 	.word	0x00370004

00401254 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401258:	1e43      	subs	r3, r0, #1
  40125a:	2b04      	cmp	r3, #4
  40125c:	f200 8107 	bhi.w	40146e <pmc_sleep+0x21a>
  401260:	e8df f013 	tbh	[pc, r3, lsl #1]
  401264:	00050005 	.word	0x00050005
  401268:	00150015 	.word	0x00150015
  40126c:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40126e:	4a81      	ldr	r2, [pc, #516]	; (401474 <pmc_sleep+0x220>)
  401270:	6913      	ldr	r3, [r2, #16]
  401272:	f023 0304 	bic.w	r3, r3, #4
  401276:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401278:	2201      	movs	r2, #1
  40127a:	4b7f      	ldr	r3, [pc, #508]	; (401478 <pmc_sleep+0x224>)
  40127c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40127e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401282:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401284:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401288:	bf30      	wfi
  40128a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40128e:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401290:	2803      	cmp	r0, #3
  401292:	bf0c      	ite	eq
  401294:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  401296:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40129a:	4b78      	ldr	r3, [pc, #480]	; (40147c <pmc_sleep+0x228>)
  40129c:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40129e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4012a0:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4012a4:	2200      	movs	r2, #0
  4012a6:	4b74      	ldr	r3, [pc, #464]	; (401478 <pmc_sleep+0x224>)
  4012a8:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4012aa:	2201      	movs	r2, #1
  4012ac:	4b74      	ldr	r3, [pc, #464]	; (401480 <pmc_sleep+0x22c>)
  4012ae:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4012b0:	4b74      	ldr	r3, [pc, #464]	; (401484 <pmc_sleep+0x230>)
  4012b2:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4012b4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4012b6:	4a74      	ldr	r2, [pc, #464]	; (401488 <pmc_sleep+0x234>)
  4012b8:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4012bc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4012be:	4a73      	ldr	r2, [pc, #460]	; (40148c <pmc_sleep+0x238>)
  4012c0:	433a      	orrs	r2, r7
  4012c2:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4012c4:	f005 0903 	and.w	r9, r5, #3
  4012c8:	f1b9 0f01 	cmp.w	r9, #1
  4012cc:	f240 8089 	bls.w	4013e2 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4012d0:	f025 0103 	bic.w	r1, r5, #3
  4012d4:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4012d8:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012da:	461a      	mov	r2, r3
  4012dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012de:	f013 0f08 	tst.w	r3, #8
  4012e2:	d0fb      	beq.n	4012dc <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4012e4:	f011 0f70 	tst.w	r1, #112	; 0x70
  4012e8:	d008      	beq.n	4012fc <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4012ea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4012ee:	4b65      	ldr	r3, [pc, #404]	; (401484 <pmc_sleep+0x230>)
  4012f0:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012f2:	461a      	mov	r2, r3
  4012f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012f6:	f013 0f08 	tst.w	r3, #8
  4012fa:	d0fb      	beq.n	4012f4 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4012fc:	4b64      	ldr	r3, [pc, #400]	; (401490 <pmc_sleep+0x23c>)
  4012fe:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401300:	4a60      	ldr	r2, [pc, #384]	; (401484 <pmc_sleep+0x230>)
  401302:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401304:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401308:	d0fb      	beq.n	401302 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40130a:	4a5e      	ldr	r2, [pc, #376]	; (401484 <pmc_sleep+0x230>)
  40130c:	6a11      	ldr	r1, [r2, #32]
  40130e:	4b61      	ldr	r3, [pc, #388]	; (401494 <pmc_sleep+0x240>)
  401310:	400b      	ands	r3, r1
  401312:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401316:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401318:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40131a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40131e:	d0fb      	beq.n	401318 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  401320:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401324:	4a58      	ldr	r2, [pc, #352]	; (401488 <pmc_sleep+0x234>)
  401326:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401328:	2c04      	cmp	r4, #4
  40132a:	d05c      	beq.n	4013e6 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  40132c:	4c52      	ldr	r4, [pc, #328]	; (401478 <pmc_sleep+0x224>)
  40132e:	2301      	movs	r3, #1
  401330:	7023      	strb	r3, [r4, #0]
  401332:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401336:	b662      	cpsie	i

		pmc_enable_waitmode();
  401338:	4b57      	ldr	r3, [pc, #348]	; (401498 <pmc_sleep+0x244>)
  40133a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  40133c:	b672      	cpsid	i
  40133e:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  401342:	2300      	movs	r3, #0
  401344:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  401346:	f017 0f02 	tst.w	r7, #2
  40134a:	d055      	beq.n	4013f8 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40134c:	4a4d      	ldr	r2, [pc, #308]	; (401484 <pmc_sleep+0x230>)
  40134e:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401350:	4952      	ldr	r1, [pc, #328]	; (40149c <pmc_sleep+0x248>)
  401352:	4019      	ands	r1, r3
  401354:	4b52      	ldr	r3, [pc, #328]	; (4014a0 <pmc_sleep+0x24c>)
  401356:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401358:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40135a:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  40135c:	4b51      	ldr	r3, [pc, #324]	; (4014a4 <pmc_sleep+0x250>)
  40135e:	400b      	ands	r3, r1
  401360:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401364:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401366:	4b50      	ldr	r3, [pc, #320]	; (4014a8 <pmc_sleep+0x254>)
  401368:	4033      	ands	r3, r6
  40136a:	2b00      	cmp	r3, #0
  40136c:	d06e      	beq.n	40144c <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40136e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401372:	4b44      	ldr	r3, [pc, #272]	; (401484 <pmc_sleep+0x230>)
  401374:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  401376:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401378:	f1b9 0f02 	cmp.w	r9, #2
  40137c:	d104      	bne.n	401388 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40137e:	4a41      	ldr	r2, [pc, #260]	; (401484 <pmc_sleep+0x230>)
  401380:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401382:	f013 0f02 	tst.w	r3, #2
  401386:	d0fb      	beq.n	401380 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401388:	4a3e      	ldr	r2, [pc, #248]	; (401484 <pmc_sleep+0x230>)
  40138a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40138c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401390:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401394:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401396:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401398:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40139a:	f013 0f08 	tst.w	r3, #8
  40139e:	d0fb      	beq.n	401398 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  4013a0:	4b39      	ldr	r3, [pc, #228]	; (401488 <pmc_sleep+0x234>)
  4013a2:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  4013a6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4013aa:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013ac:	461a      	mov	r2, r3
  4013ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013b0:	f013 0f08 	tst.w	r3, #8
  4013b4:	d0fb      	beq.n	4013ae <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  4013b6:	4a33      	ldr	r2, [pc, #204]	; (401484 <pmc_sleep+0x230>)
  4013b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ba:	420b      	tst	r3, r1
  4013bc:	d0fc      	beq.n	4013b8 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4013be:	2200      	movs	r2, #0
  4013c0:	4b2f      	ldr	r3, [pc, #188]	; (401480 <pmc_sleep+0x22c>)
  4013c2:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4013c4:	4b39      	ldr	r3, [pc, #228]	; (4014ac <pmc_sleep+0x258>)
  4013c6:	681b      	ldr	r3, [r3, #0]
  4013c8:	b11b      	cbz	r3, 4013d2 <pmc_sleep+0x17e>
			callback_clocks_restored();
  4013ca:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4013cc:	2200      	movs	r2, #0
  4013ce:	4b37      	ldr	r3, [pc, #220]	; (4014ac <pmc_sleep+0x258>)
  4013d0:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4013d2:	2201      	movs	r2, #1
  4013d4:	4b28      	ldr	r3, [pc, #160]	; (401478 <pmc_sleep+0x224>)
  4013d6:	701a      	strb	r2, [r3, #0]
  4013d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013dc:	b662      	cpsie	i
  4013de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4013e2:	4629      	mov	r1, r5
  4013e4:	e77e      	b.n	4012e4 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013e6:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4013ea:	6a11      	ldr	r1, [r2, #32]
  4013ec:	4b30      	ldr	r3, [pc, #192]	; (4014b0 <pmc_sleep+0x25c>)
  4013ee:	400b      	ands	r3, r1
  4013f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013f4:	6213      	str	r3, [r2, #32]
  4013f6:	e799      	b.n	40132c <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4013f8:	f017 0f01 	tst.w	r7, #1
  4013fc:	d0b3      	beq.n	401366 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4013fe:	4b21      	ldr	r3, [pc, #132]	; (401484 <pmc_sleep+0x230>)
  401400:	6a1b      	ldr	r3, [r3, #32]
  401402:	f013 0f01 	tst.w	r3, #1
  401406:	d10b      	bne.n	401420 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401408:	491e      	ldr	r1, [pc, #120]	; (401484 <pmc_sleep+0x230>)
  40140a:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  40140c:	4a29      	ldr	r2, [pc, #164]	; (4014b4 <pmc_sleep+0x260>)
  40140e:	401a      	ands	r2, r3
  401410:	4b29      	ldr	r3, [pc, #164]	; (4014b8 <pmc_sleep+0x264>)
  401412:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401414:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401416:	460a      	mov	r2, r1
  401418:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40141a:	f013 0f01 	tst.w	r3, #1
  40141e:	d0fb      	beq.n	401418 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401420:	4b18      	ldr	r3, [pc, #96]	; (401484 <pmc_sleep+0x230>)
  401422:	6a1b      	ldr	r3, [r3, #32]
  401424:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401428:	d108      	bne.n	40143c <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40142a:	4a16      	ldr	r2, [pc, #88]	; (401484 <pmc_sleep+0x230>)
  40142c:	6a11      	ldr	r1, [r2, #32]
  40142e:	4b23      	ldr	r3, [pc, #140]	; (4014bc <pmc_sleep+0x268>)
  401430:	430b      	orrs	r3, r1
  401432:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401434:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401436:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40143a:	d0fb      	beq.n	401434 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40143c:	4a11      	ldr	r2, [pc, #68]	; (401484 <pmc_sleep+0x230>)
  40143e:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401440:	4b18      	ldr	r3, [pc, #96]	; (4014a4 <pmc_sleep+0x250>)
  401442:	400b      	ands	r3, r1
  401444:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401448:	6213      	str	r3, [r2, #32]
  40144a:	e78c      	b.n	401366 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  40144c:	2100      	movs	r1, #0
  40144e:	e793      	b.n	401378 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401450:	4a08      	ldr	r2, [pc, #32]	; (401474 <pmc_sleep+0x220>)
  401452:	6913      	ldr	r3, [r2, #16]
  401454:	f043 0304 	orr.w	r3, r3, #4
  401458:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40145a:	4a19      	ldr	r2, [pc, #100]	; (4014c0 <pmc_sleep+0x26c>)
  40145c:	4b19      	ldr	r3, [pc, #100]	; (4014c4 <pmc_sleep+0x270>)
  40145e:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401460:	2201      	movs	r2, #1
  401462:	4b05      	ldr	r3, [pc, #20]	; (401478 <pmc_sleep+0x224>)
  401464:	701a      	strb	r2, [r3, #0]
  401466:	f3bf 8f5f 	dmb	sy
  40146a:	b662      	cpsie	i
  __ASM volatile ("wfi");
  40146c:	bf30      	wfi
  40146e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401472:	bf00      	nop
  401474:	e000ed00 	.word	0xe000ed00
  401478:	20400018 	.word	0x20400018
  40147c:	00401205 	.word	0x00401205
  401480:	20400c68 	.word	0x20400c68
  401484:	400e0600 	.word	0x400e0600
  401488:	400e0c00 	.word	0x400e0c00
  40148c:	00370008 	.word	0x00370008
  401490:	00401191 	.word	0x00401191
  401494:	fec8ffff 	.word	0xfec8ffff
  401498:	00401209 	.word	0x00401209
  40149c:	fec8fffc 	.word	0xfec8fffc
  4014a0:	01370002 	.word	0x01370002
  4014a4:	ffc8ff87 	.word	0xffc8ff87
  4014a8:	07ff0000 	.word	0x07ff0000
  4014ac:	20400c6c 	.word	0x20400c6c
  4014b0:	ffc8fffe 	.word	0xffc8fffe
  4014b4:	ffc8fffc 	.word	0xffc8fffc
  4014b8:	00370001 	.word	0x00370001
  4014bc:	01370000 	.word	0x01370000
  4014c0:	a5000004 	.word	0xa5000004
  4014c4:	400e1810 	.word	0x400e1810

004014c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4014c8:	e7fe      	b.n	4014c8 <Dummy_Handler>
	...

004014cc <Reset_Handler>:
{
  4014cc:	b500      	push	{lr}
  4014ce:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4014d0:	4b25      	ldr	r3, [pc, #148]	; (401568 <Reset_Handler+0x9c>)
  4014d2:	4a26      	ldr	r2, [pc, #152]	; (40156c <Reset_Handler+0xa0>)
  4014d4:	429a      	cmp	r2, r3
  4014d6:	d010      	beq.n	4014fa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4014d8:	4b25      	ldr	r3, [pc, #148]	; (401570 <Reset_Handler+0xa4>)
  4014da:	4a23      	ldr	r2, [pc, #140]	; (401568 <Reset_Handler+0x9c>)
  4014dc:	429a      	cmp	r2, r3
  4014de:	d20c      	bcs.n	4014fa <Reset_Handler+0x2e>
  4014e0:	3b01      	subs	r3, #1
  4014e2:	1a9b      	subs	r3, r3, r2
  4014e4:	f023 0303 	bic.w	r3, r3, #3
  4014e8:	3304      	adds	r3, #4
  4014ea:	4413      	add	r3, r2
  4014ec:	491f      	ldr	r1, [pc, #124]	; (40156c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4014ee:	f851 0b04 	ldr.w	r0, [r1], #4
  4014f2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4014f6:	429a      	cmp	r2, r3
  4014f8:	d1f9      	bne.n	4014ee <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4014fa:	4b1e      	ldr	r3, [pc, #120]	; (401574 <Reset_Handler+0xa8>)
  4014fc:	4a1e      	ldr	r2, [pc, #120]	; (401578 <Reset_Handler+0xac>)
  4014fe:	429a      	cmp	r2, r3
  401500:	d20a      	bcs.n	401518 <Reset_Handler+0x4c>
  401502:	3b01      	subs	r3, #1
  401504:	1a9b      	subs	r3, r3, r2
  401506:	f023 0303 	bic.w	r3, r3, #3
  40150a:	3304      	adds	r3, #4
  40150c:	4413      	add	r3, r2
                *pDest++ = 0;
  40150e:	2100      	movs	r1, #0
  401510:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401514:	4293      	cmp	r3, r2
  401516:	d1fb      	bne.n	401510 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401518:	4a18      	ldr	r2, [pc, #96]	; (40157c <Reset_Handler+0xb0>)
  40151a:	4b19      	ldr	r3, [pc, #100]	; (401580 <Reset_Handler+0xb4>)
  40151c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401520:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401522:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401526:	fab3 f383 	clz	r3, r3
  40152a:	095b      	lsrs	r3, r3, #5
  40152c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40152e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401530:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401534:	2200      	movs	r2, #0
  401536:	4b13      	ldr	r3, [pc, #76]	; (401584 <Reset_Handler+0xb8>)
  401538:	701a      	strb	r2, [r3, #0]
	return flags;
  40153a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40153c:	4a12      	ldr	r2, [pc, #72]	; (401588 <Reset_Handler+0xbc>)
  40153e:	6813      	ldr	r3, [r2, #0]
  401540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401544:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40154a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40154e:	b129      	cbz	r1, 40155c <Reset_Handler+0x90>
		cpu_irq_enable();
  401550:	2201      	movs	r2, #1
  401552:	4b0c      	ldr	r3, [pc, #48]	; (401584 <Reset_Handler+0xb8>)
  401554:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401556:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40155a:	b662      	cpsie	i
        __libc_init_array();
  40155c:	4b0b      	ldr	r3, [pc, #44]	; (40158c <Reset_Handler+0xc0>)
  40155e:	4798      	blx	r3
        main();
  401560:	4b0b      	ldr	r3, [pc, #44]	; (401590 <Reset_Handler+0xc4>)
  401562:	4798      	blx	r3
  401564:	e7fe      	b.n	401564 <Reset_Handler+0x98>
  401566:	bf00      	nop
  401568:	20400000 	.word	0x20400000
  40156c:	004074f4 	.word	0x004074f4
  401570:	204009d0 	.word	0x204009d0
  401574:	20400cdc 	.word	0x20400cdc
  401578:	204009d0 	.word	0x204009d0
  40157c:	e000ed00 	.word	0xe000ed00
  401580:	00400000 	.word	0x00400000
  401584:	20400018 	.word	0x20400018
  401588:	e000ed88 	.word	0xe000ed88
  40158c:	00401eb1 	.word	0x00401eb1
  401590:	00401c4d 	.word	0x00401c4d

00401594 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401594:	4b3b      	ldr	r3, [pc, #236]	; (401684 <SystemCoreClockUpdate+0xf0>)
  401596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401598:	f003 0303 	and.w	r3, r3, #3
  40159c:	2b01      	cmp	r3, #1
  40159e:	d01d      	beq.n	4015dc <SystemCoreClockUpdate+0x48>
  4015a0:	b183      	cbz	r3, 4015c4 <SystemCoreClockUpdate+0x30>
  4015a2:	2b02      	cmp	r3, #2
  4015a4:	d036      	beq.n	401614 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4015a6:	4b37      	ldr	r3, [pc, #220]	; (401684 <SystemCoreClockUpdate+0xf0>)
  4015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015ae:	2b70      	cmp	r3, #112	; 0x70
  4015b0:	d05f      	beq.n	401672 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4015b2:	4b34      	ldr	r3, [pc, #208]	; (401684 <SystemCoreClockUpdate+0xf0>)
  4015b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015b6:	4934      	ldr	r1, [pc, #208]	; (401688 <SystemCoreClockUpdate+0xf4>)
  4015b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4015bc:	680b      	ldr	r3, [r1, #0]
  4015be:	40d3      	lsrs	r3, r2
  4015c0:	600b      	str	r3, [r1, #0]
  4015c2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4015c4:	4b31      	ldr	r3, [pc, #196]	; (40168c <SystemCoreClockUpdate+0xf8>)
  4015c6:	695b      	ldr	r3, [r3, #20]
  4015c8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4015cc:	bf14      	ite	ne
  4015ce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4015d2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4015d6:	4b2c      	ldr	r3, [pc, #176]	; (401688 <SystemCoreClockUpdate+0xf4>)
  4015d8:	601a      	str	r2, [r3, #0]
  4015da:	e7e4      	b.n	4015a6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015dc:	4b29      	ldr	r3, [pc, #164]	; (401684 <SystemCoreClockUpdate+0xf0>)
  4015de:	6a1b      	ldr	r3, [r3, #32]
  4015e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015e4:	d003      	beq.n	4015ee <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4015e6:	4a2a      	ldr	r2, [pc, #168]	; (401690 <SystemCoreClockUpdate+0xfc>)
  4015e8:	4b27      	ldr	r3, [pc, #156]	; (401688 <SystemCoreClockUpdate+0xf4>)
  4015ea:	601a      	str	r2, [r3, #0]
  4015ec:	e7db      	b.n	4015a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015ee:	4a29      	ldr	r2, [pc, #164]	; (401694 <SystemCoreClockUpdate+0x100>)
  4015f0:	4b25      	ldr	r3, [pc, #148]	; (401688 <SystemCoreClockUpdate+0xf4>)
  4015f2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015f4:	4b23      	ldr	r3, [pc, #140]	; (401684 <SystemCoreClockUpdate+0xf0>)
  4015f6:	6a1b      	ldr	r3, [r3, #32]
  4015f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015fc:	2b10      	cmp	r3, #16
  4015fe:	d005      	beq.n	40160c <SystemCoreClockUpdate+0x78>
  401600:	2b20      	cmp	r3, #32
  401602:	d1d0      	bne.n	4015a6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401604:	4a22      	ldr	r2, [pc, #136]	; (401690 <SystemCoreClockUpdate+0xfc>)
  401606:	4b20      	ldr	r3, [pc, #128]	; (401688 <SystemCoreClockUpdate+0xf4>)
  401608:	601a      	str	r2, [r3, #0]
          break;
  40160a:	e7cc      	b.n	4015a6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40160c:	4a22      	ldr	r2, [pc, #136]	; (401698 <SystemCoreClockUpdate+0x104>)
  40160e:	4b1e      	ldr	r3, [pc, #120]	; (401688 <SystemCoreClockUpdate+0xf4>)
  401610:	601a      	str	r2, [r3, #0]
          break;
  401612:	e7c8      	b.n	4015a6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401614:	4b1b      	ldr	r3, [pc, #108]	; (401684 <SystemCoreClockUpdate+0xf0>)
  401616:	6a1b      	ldr	r3, [r3, #32]
  401618:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40161c:	d016      	beq.n	40164c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40161e:	4a1c      	ldr	r2, [pc, #112]	; (401690 <SystemCoreClockUpdate+0xfc>)
  401620:	4b19      	ldr	r3, [pc, #100]	; (401688 <SystemCoreClockUpdate+0xf4>)
  401622:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401624:	4b17      	ldr	r3, [pc, #92]	; (401684 <SystemCoreClockUpdate+0xf0>)
  401626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401628:	f003 0303 	and.w	r3, r3, #3
  40162c:	2b02      	cmp	r3, #2
  40162e:	d1ba      	bne.n	4015a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401630:	4a14      	ldr	r2, [pc, #80]	; (401684 <SystemCoreClockUpdate+0xf0>)
  401632:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401634:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401636:	4814      	ldr	r0, [pc, #80]	; (401688 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401638:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40163c:	6803      	ldr	r3, [r0, #0]
  40163e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401642:	b2d2      	uxtb	r2, r2
  401644:	fbb3 f3f2 	udiv	r3, r3, r2
  401648:	6003      	str	r3, [r0, #0]
  40164a:	e7ac      	b.n	4015a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40164c:	4a11      	ldr	r2, [pc, #68]	; (401694 <SystemCoreClockUpdate+0x100>)
  40164e:	4b0e      	ldr	r3, [pc, #56]	; (401688 <SystemCoreClockUpdate+0xf4>)
  401650:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401652:	4b0c      	ldr	r3, [pc, #48]	; (401684 <SystemCoreClockUpdate+0xf0>)
  401654:	6a1b      	ldr	r3, [r3, #32]
  401656:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40165a:	2b10      	cmp	r3, #16
  40165c:	d005      	beq.n	40166a <SystemCoreClockUpdate+0xd6>
  40165e:	2b20      	cmp	r3, #32
  401660:	d1e0      	bne.n	401624 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401662:	4a0b      	ldr	r2, [pc, #44]	; (401690 <SystemCoreClockUpdate+0xfc>)
  401664:	4b08      	ldr	r3, [pc, #32]	; (401688 <SystemCoreClockUpdate+0xf4>)
  401666:	601a      	str	r2, [r3, #0]
          break;
  401668:	e7dc      	b.n	401624 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40166a:	4a0b      	ldr	r2, [pc, #44]	; (401698 <SystemCoreClockUpdate+0x104>)
  40166c:	4b06      	ldr	r3, [pc, #24]	; (401688 <SystemCoreClockUpdate+0xf4>)
  40166e:	601a      	str	r2, [r3, #0]
          break;
  401670:	e7d8      	b.n	401624 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401672:	4a05      	ldr	r2, [pc, #20]	; (401688 <SystemCoreClockUpdate+0xf4>)
  401674:	6813      	ldr	r3, [r2, #0]
  401676:	4909      	ldr	r1, [pc, #36]	; (40169c <SystemCoreClockUpdate+0x108>)
  401678:	fba1 1303 	umull	r1, r3, r1, r3
  40167c:	085b      	lsrs	r3, r3, #1
  40167e:	6013      	str	r3, [r2, #0]
  401680:	4770      	bx	lr
  401682:	bf00      	nop
  401684:	400e0600 	.word	0x400e0600
  401688:	2040001c 	.word	0x2040001c
  40168c:	400e1810 	.word	0x400e1810
  401690:	00b71b00 	.word	0x00b71b00
  401694:	003d0900 	.word	0x003d0900
  401698:	007a1200 	.word	0x007a1200
  40169c:	aaaaaaab 	.word	0xaaaaaaab

004016a0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4016a0:	4b16      	ldr	r3, [pc, #88]	; (4016fc <system_init_flash+0x5c>)
  4016a2:	4298      	cmp	r0, r3
  4016a4:	d913      	bls.n	4016ce <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4016a6:	4b16      	ldr	r3, [pc, #88]	; (401700 <system_init_flash+0x60>)
  4016a8:	4298      	cmp	r0, r3
  4016aa:	d915      	bls.n	4016d8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4016ac:	4b15      	ldr	r3, [pc, #84]	; (401704 <system_init_flash+0x64>)
  4016ae:	4298      	cmp	r0, r3
  4016b0:	d916      	bls.n	4016e0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4016b2:	4b15      	ldr	r3, [pc, #84]	; (401708 <system_init_flash+0x68>)
  4016b4:	4298      	cmp	r0, r3
  4016b6:	d917      	bls.n	4016e8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4016b8:	4b14      	ldr	r3, [pc, #80]	; (40170c <system_init_flash+0x6c>)
  4016ba:	4298      	cmp	r0, r3
  4016bc:	d918      	bls.n	4016f0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4016be:	4b14      	ldr	r3, [pc, #80]	; (401710 <system_init_flash+0x70>)
  4016c0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4016c2:	bf94      	ite	ls
  4016c4:	4a13      	ldrls	r2, [pc, #76]	; (401714 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4016c6:	4a14      	ldrhi	r2, [pc, #80]	; (401718 <system_init_flash+0x78>)
  4016c8:	4b14      	ldr	r3, [pc, #80]	; (40171c <system_init_flash+0x7c>)
  4016ca:	601a      	str	r2, [r3, #0]
  4016cc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4016ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4016d2:	4b12      	ldr	r3, [pc, #72]	; (40171c <system_init_flash+0x7c>)
  4016d4:	601a      	str	r2, [r3, #0]
  4016d6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4016d8:	4a11      	ldr	r2, [pc, #68]	; (401720 <system_init_flash+0x80>)
  4016da:	4b10      	ldr	r3, [pc, #64]	; (40171c <system_init_flash+0x7c>)
  4016dc:	601a      	str	r2, [r3, #0]
  4016de:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016e0:	4a10      	ldr	r2, [pc, #64]	; (401724 <system_init_flash+0x84>)
  4016e2:	4b0e      	ldr	r3, [pc, #56]	; (40171c <system_init_flash+0x7c>)
  4016e4:	601a      	str	r2, [r3, #0]
  4016e6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016e8:	4a0f      	ldr	r2, [pc, #60]	; (401728 <system_init_flash+0x88>)
  4016ea:	4b0c      	ldr	r3, [pc, #48]	; (40171c <system_init_flash+0x7c>)
  4016ec:	601a      	str	r2, [r3, #0]
  4016ee:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016f0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4016f4:	4b09      	ldr	r3, [pc, #36]	; (40171c <system_init_flash+0x7c>)
  4016f6:	601a      	str	r2, [r3, #0]
  4016f8:	4770      	bx	lr
  4016fa:	bf00      	nop
  4016fc:	015ef3bf 	.word	0x015ef3bf
  401700:	02bde77f 	.word	0x02bde77f
  401704:	041cdb3f 	.word	0x041cdb3f
  401708:	057bceff 	.word	0x057bceff
  40170c:	06dac2bf 	.word	0x06dac2bf
  401710:	0839b67f 	.word	0x0839b67f
  401714:	04000500 	.word	0x04000500
  401718:	04000600 	.word	0x04000600
  40171c:	400e0c00 	.word	0x400e0c00
  401720:	04000100 	.word	0x04000100
  401724:	04000200 	.word	0x04000200
  401728:	04000300 	.word	0x04000300

0040172c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40172c:	4b0a      	ldr	r3, [pc, #40]	; (401758 <_sbrk+0x2c>)
  40172e:	681b      	ldr	r3, [r3, #0]
  401730:	b153      	cbz	r3, 401748 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401732:	4b09      	ldr	r3, [pc, #36]	; (401758 <_sbrk+0x2c>)
  401734:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401736:	181a      	adds	r2, r3, r0
  401738:	4908      	ldr	r1, [pc, #32]	; (40175c <_sbrk+0x30>)
  40173a:	4291      	cmp	r1, r2
  40173c:	db08      	blt.n	401750 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40173e:	4610      	mov	r0, r2
  401740:	4a05      	ldr	r2, [pc, #20]	; (401758 <_sbrk+0x2c>)
  401742:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401744:	4618      	mov	r0, r3
  401746:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401748:	4a05      	ldr	r2, [pc, #20]	; (401760 <_sbrk+0x34>)
  40174a:	4b03      	ldr	r3, [pc, #12]	; (401758 <_sbrk+0x2c>)
  40174c:	601a      	str	r2, [r3, #0]
  40174e:	e7f0      	b.n	401732 <_sbrk+0x6>
		return (caddr_t) -1;	
  401750:	f04f 30ff 	mov.w	r0, #4294967295
}
  401754:	4770      	bx	lr
  401756:	bf00      	nop
  401758:	20400c70 	.word	0x20400c70
  40175c:	2045fffc 	.word	0x2045fffc
  401760:	20402ee0 	.word	0x20402ee0

00401764 <but1_callback>:
}

/************************************************************************/
/* fun??es                                                              */
/************************************************************************/
void but1_callback(void){
  401764:	b508      	push	{r3, lr}
	if (pio_get(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK)) {
  401766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40176a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40176e:	4805      	ldr	r0, [pc, #20]	; (401784 <but1_callback+0x20>)
  401770:	4b05      	ldr	r3, [pc, #20]	; (401788 <but1_callback+0x24>)
  401772:	4798      	blx	r3
  401774:	b128      	cbz	r0, 401782 <but1_callback+0x1e>
		// PINO == 1 --> Borda de subida
		but1_flag = !but1_flag;
  401776:	4a05      	ldr	r2, [pc, #20]	; (40178c <but1_callback+0x28>)
  401778:	7813      	ldrb	r3, [r2, #0]
  40177a:	fab3 f383 	clz	r3, r3
  40177e:	095b      	lsrs	r3, r3, #5
  401780:	7013      	strb	r3, [r2, #0]
  401782:	bd08      	pop	{r3, pc}
  401784:	400e1400 	.word	0x400e1400
  401788:	00400d93 	.word	0x00400d93
  40178c:	20400ca9 	.word	0x20400ca9

00401790 <but2_callback>:
	}
}

void but2_callback(void){
  401790:	b508      	push	{r3, lr}
	if (!pio_get(BUT2_PIO, PIO_INPUT, BUT2_IDX_MASK)) {
  401792:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401796:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40179a:	4805      	ldr	r0, [pc, #20]	; (4017b0 <but2_callback+0x20>)
  40179c:	4b05      	ldr	r3, [pc, #20]	; (4017b4 <but2_callback+0x24>)
  40179e:	4798      	blx	r3
  4017a0:	b928      	cbnz	r0, 4017ae <but2_callback+0x1e>
		// PINO == 0 --> Borda de descida
		but2_flag = !but2_flag;
  4017a2:	4a05      	ldr	r2, [pc, #20]	; (4017b8 <but2_callback+0x28>)
  4017a4:	7813      	ldrb	r3, [r2, #0]
  4017a6:	fab3 f383 	clz	r3, r3
  4017aa:	095b      	lsrs	r3, r3, #5
  4017ac:	7013      	strb	r3, [r2, #0]
  4017ae:	bd08      	pop	{r3, pc}
  4017b0:	400e1200 	.word	0x400e1200
  4017b4:	00400d93 	.word	0x00400d93
  4017b8:	20400cad 	.word	0x20400cad

004017bc <but3_callback>:
	}
}

void but3_callback(void){
  4017bc:	b508      	push	{r3, lr}
	if (pio_get(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK)) {
  4017be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4017c2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4017c6:	4805      	ldr	r0, [pc, #20]	; (4017dc <but3_callback+0x20>)
  4017c8:	4b05      	ldr	r3, [pc, #20]	; (4017e0 <but3_callback+0x24>)
  4017ca:	4798      	blx	r3
  4017cc:	b128      	cbz	r0, 4017da <but3_callback+0x1e>
		// PINO == 1 --> Borda de subida
		but3_flag = !but3_flag;
  4017ce:	4a05      	ldr	r2, [pc, #20]	; (4017e4 <but3_callback+0x28>)
  4017d0:	7813      	ldrb	r3, [r2, #0]
  4017d2:	fab3 f383 	clz	r3, r3
  4017d6:	095b      	lsrs	r3, r3, #5
  4017d8:	7013      	strb	r3, [r2, #0]
  4017da:	bd08      	pop	{r3, pc}
  4017dc:	400e0e00 	.word	0x400e0e00
  4017e0:	00400d93 	.word	0x00400d93
  4017e4:	20400cab 	.word	0x20400cab

004017e8 <TC1_Handler>:
void TC1_Handler(void){
  4017e8:	b500      	push	{lr}
  4017ea:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 1);
  4017ec:	2101      	movs	r1, #1
  4017ee:	4805      	ldr	r0, [pc, #20]	; (401804 <TC1_Handler+0x1c>)
  4017f0:	4b05      	ldr	r3, [pc, #20]	; (401808 <TC1_Handler+0x20>)
  4017f2:	4798      	blx	r3
  4017f4:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  4017f6:	9b01      	ldr	r3, [sp, #4]
	flag_tc0 = 1;
  4017f8:	2201      	movs	r2, #1
  4017fa:	4b04      	ldr	r3, [pc, #16]	; (40180c <TC1_Handler+0x24>)
  4017fc:	701a      	strb	r2, [r3, #0]
}
  4017fe:	b003      	add	sp, #12
  401800:	f85d fb04 	ldr.w	pc, [sp], #4
  401804:	4000c000 	.word	0x4000c000
  401808:	004005b1 	.word	0x004005b1
  40180c:	20400cac 	.word	0x20400cac

00401810 <TC4_Handler>:
void TC4_Handler(void){
  401810:	b500      	push	{lr}
  401812:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC1, 1);
  401814:	2101      	movs	r1, #1
  401816:	4805      	ldr	r0, [pc, #20]	; (40182c <TC4_Handler+0x1c>)
  401818:	4b05      	ldr	r3, [pc, #20]	; (401830 <TC4_Handler+0x20>)
  40181a:	4798      	blx	r3
  40181c:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40181e:	9b01      	ldr	r3, [sp, #4]
	flag_tc1 = 1;
  401820:	2201      	movs	r2, #1
  401822:	4b04      	ldr	r3, [pc, #16]	; (401834 <TC4_Handler+0x24>)
  401824:	701a      	strb	r2, [r3, #0]
}
  401826:	b003      	add	sp, #12
  401828:	f85d fb04 	ldr.w	pc, [sp], #4
  40182c:	40010000 	.word	0x40010000
  401830:	004005b1 	.word	0x004005b1
  401834:	20400cb0 	.word	0x20400cb0

00401838 <TC7_Handler>:
void TC7_Handler(void){
  401838:	b500      	push	{lr}
  40183a:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC2, 1);
  40183c:	2101      	movs	r1, #1
  40183e:	4805      	ldr	r0, [pc, #20]	; (401854 <TC7_Handler+0x1c>)
  401840:	4b05      	ldr	r3, [pc, #20]	; (401858 <TC7_Handler+0x20>)
  401842:	4798      	blx	r3
  401844:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  401846:	9b01      	ldr	r3, [sp, #4]
	flag_tc2 = 1;
  401848:	2201      	movs	r2, #1
  40184a:	4b04      	ldr	r3, [pc, #16]	; (40185c <TC7_Handler+0x24>)
  40184c:	701a      	strb	r2, [r3, #0]
}
  40184e:	b003      	add	sp, #12
  401850:	f85d fb04 	ldr.w	pc, [sp], #4
  401854:	40014000 	.word	0x40014000
  401858:	004005b1 	.word	0x004005b1
  40185c:	20400caf 	.word	0x20400caf

00401860 <RTT_Handler>:
{
  401860:	b510      	push	{r4, lr}
	ul_status = rtt_get_status(RTT);
  401862:	4809      	ldr	r0, [pc, #36]	; (401888 <RTT_Handler+0x28>)
  401864:	4b09      	ldr	r3, [pc, #36]	; (40188c <RTT_Handler+0x2c>)
  401866:	4798      	blx	r3
  401868:	4604      	mov	r4, r0
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  40186a:	f010 0f02 	tst.w	r0, #2
  40186e:	d106      	bne.n	40187e <RTT_Handler+0x1e>
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401870:	f014 0f01 	tst.w	r4, #1
  401874:	d002      	beq.n	40187c <RTT_Handler+0x1c>
		f_rtt_alarme = 1;                  // flag RTT alarme
  401876:	2201      	movs	r2, #1
  401878:	4b05      	ldr	r3, [pc, #20]	; (401890 <RTT_Handler+0x30>)
  40187a:	701a      	strb	r2, [r3, #0]
  40187c:	bd10      	pop	{r4, pc}
		delay_s(5);
  40187e:	4805      	ldr	r0, [pc, #20]	; (401894 <RTT_Handler+0x34>)
  401880:	4b05      	ldr	r3, [pc, #20]	; (401898 <RTT_Handler+0x38>)
  401882:	4798      	blx	r3
  401884:	e7f4      	b.n	401870 <RTT_Handler+0x10>
  401886:	bf00      	nop
  401888:	400e1830 	.word	0x400e1830
  40188c:	004003ed 	.word	0x004003ed
  401890:	20400ca8 	.word	0x20400ca8
  401894:	0f126d15 	.word	0x0f126d15
  401898:	20400001 	.word	0x20400001

0040189c <RTC_Handler>:
{
  40189c:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  40189e:	4812      	ldr	r0, [pc, #72]	; (4018e8 <RTC_Handler+0x4c>)
  4018a0:	4b12      	ldr	r3, [pc, #72]	; (4018ec <RTC_Handler+0x50>)
  4018a2:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  4018a4:	f010 0f04 	tst.w	r0, #4
  4018a8:	d002      	beq.n	4018b0 <RTC_Handler+0x14>
		flag_sec = 1;
  4018aa:	2201      	movs	r2, #1
  4018ac:	4b10      	ldr	r3, [pc, #64]	; (4018f0 <RTC_Handler+0x54>)
  4018ae:	701a      	strb	r2, [r3, #0]
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  4018b0:	f010 0f02 	tst.w	r0, #2
  4018b4:	d002      	beq.n	4018bc <RTC_Handler+0x20>
		flag_rtc = 1;
  4018b6:	2201      	movs	r2, #1
  4018b8:	4b0e      	ldr	r3, [pc, #56]	; (4018f4 <RTC_Handler+0x58>)
  4018ba:	701a      	strb	r2, [r3, #0]
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  4018bc:	4d0a      	ldr	r5, [pc, #40]	; (4018e8 <RTC_Handler+0x4c>)
  4018be:	2104      	movs	r1, #4
  4018c0:	4628      	mov	r0, r5
  4018c2:	4c0d      	ldr	r4, [pc, #52]	; (4018f8 <RTC_Handler+0x5c>)
  4018c4:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  4018c6:	2102      	movs	r1, #2
  4018c8:	4628      	mov	r0, r5
  4018ca:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4018cc:	2101      	movs	r1, #1
  4018ce:	4628      	mov	r0, r5
  4018d0:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4018d2:	2108      	movs	r1, #8
  4018d4:	4628      	mov	r0, r5
  4018d6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  4018d8:	2110      	movs	r1, #16
  4018da:	4628      	mov	r0, r5
  4018dc:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  4018de:	2120      	movs	r1, #32
  4018e0:	4628      	mov	r0, r5
  4018e2:	47a0      	blx	r4
  4018e4:	bd38      	pop	{r3, r4, r5, pc}
  4018e6:	bf00      	nop
  4018e8:	400e1860 	.word	0x400e1860
  4018ec:	00400369 	.word	0x00400369
  4018f0:	20400cae 	.word	0x20400cae
  4018f4:	20400caa 	.word	0x20400caa
  4018f8:	0040036d 	.word	0x0040036d

004018fc <LED1_init>:
}

/**
* @Brief Inicializa o pino do LED1
*/
void LED1_init(int estado){
  4018fc:	b510      	push	{r4, lr}
  4018fe:	b082      	sub	sp, #8
  401900:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED1_PIO_ID);
  401902:	200a      	movs	r0, #10
  401904:	4b05      	ldr	r3, [pc, #20]	; (40191c <LED1_init+0x20>)
  401906:	4798      	blx	r3
	pio_set_output(LED1_PIO, LED1_IDX_MASK, estado, 0, 0);
  401908:	2300      	movs	r3, #0
  40190a:	9300      	str	r3, [sp, #0]
  40190c:	4622      	mov	r2, r4
  40190e:	2101      	movs	r1, #1
  401910:	4803      	ldr	r0, [pc, #12]	; (401920 <LED1_init+0x24>)
  401912:	4c04      	ldr	r4, [pc, #16]	; (401924 <LED1_init+0x28>)
  401914:	47a0      	blx	r4
};
  401916:	b002      	add	sp, #8
  401918:	bd10      	pop	{r4, pc}
  40191a:	bf00      	nop
  40191c:	004011b1 	.word	0x004011b1
  401920:	400e0e00 	.word	0x400e0e00
  401924:	00400e75 	.word	0x00400e75

00401928 <LED2_init>:

/**
* @Brief Inicializa o pino do LED2
*/
void LED2_init(int estado){
  401928:	b510      	push	{r4, lr}
  40192a:	b082      	sub	sp, #8
  40192c:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED2_PIO_ID);
  40192e:	200c      	movs	r0, #12
  401930:	4b05      	ldr	r3, [pc, #20]	; (401948 <LED2_init+0x20>)
  401932:	4798      	blx	r3
	pio_set_output(LED2_PIO, LED2_IDX_MASK, estado, 0, 0);
  401934:	2300      	movs	r3, #0
  401936:	9300      	str	r3, [sp, #0]
  401938:	4622      	mov	r2, r4
  40193a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40193e:	4803      	ldr	r0, [pc, #12]	; (40194c <LED2_init+0x24>)
  401940:	4c03      	ldr	r4, [pc, #12]	; (401950 <LED2_init+0x28>)
  401942:	47a0      	blx	r4
};
  401944:	b002      	add	sp, #8
  401946:	bd10      	pop	{r4, pc}
  401948:	004011b1 	.word	0x004011b1
  40194c:	400e1200 	.word	0x400e1200
  401950:	00400e75 	.word	0x00400e75

00401954 <LED3_init>:

/**
* @Brief Inicializa o pino do LED3
*/
void LED3_init(int estado){
  401954:	b510      	push	{r4, lr}
  401956:	b082      	sub	sp, #8
  401958:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED3_PIO_ID);
  40195a:	200b      	movs	r0, #11
  40195c:	4b05      	ldr	r3, [pc, #20]	; (401974 <LED3_init+0x20>)
  40195e:	4798      	blx	r3
	pio_set_output(LED3_PIO, LED3_IDX_MASK, estado, 0, 0);
  401960:	2300      	movs	r3, #0
  401962:	9300      	str	r3, [sp, #0]
  401964:	4622      	mov	r2, r4
  401966:	2104      	movs	r1, #4
  401968:	4803      	ldr	r0, [pc, #12]	; (401978 <LED3_init+0x24>)
  40196a:	4c04      	ldr	r4, [pc, #16]	; (40197c <LED3_init+0x28>)
  40196c:	47a0      	blx	r4
};
  40196e:	b002      	add	sp, #8
  401970:	bd10      	pop	{r4, pc}
  401972:	bf00      	nop
  401974:	004011b1 	.word	0x004011b1
  401978:	400e1000 	.word	0x400e1000
  40197c:	00400e75 	.word	0x00400e75

00401980 <inverte_led>:

void inverte_led(Pio *PIO, const uint32_t MASK, volatile Bool flag){
  401980:	b530      	push	{r4, r5, lr}
  401982:	b083      	sub	sp, #12
  401984:	f88d 2007 	strb.w	r2, [sp, #7]
	if (flag){
  401988:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40198c:	b183      	cbz	r3, 4019b0 <inverte_led+0x30>
  40198e:	4604      	mov	r4, r0
  401990:	460d      	mov	r5, r1
		if (pio_get(PIO, PIO_DEFAULT, MASK)){
  401992:	460a      	mov	r2, r1
  401994:	2100      	movs	r1, #0
  401996:	4b09      	ldr	r3, [pc, #36]	; (4019bc <inverte_led+0x3c>)
  401998:	4798      	blx	r3
  40199a:	b120      	cbz	r0, 4019a6 <inverte_led+0x26>
			pio_clear(PIO, MASK);
  40199c:	4629      	mov	r1, r5
  40199e:	4620      	mov	r0, r4
  4019a0:	4b07      	ldr	r3, [pc, #28]	; (4019c0 <inverte_led+0x40>)
  4019a2:	4798      	blx	r3
  4019a4:	e007      	b.n	4019b6 <inverte_led+0x36>
			} else{
			pio_set(PIO, MASK);
  4019a6:	4629      	mov	r1, r5
  4019a8:	4620      	mov	r0, r4
  4019aa:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <inverte_led+0x44>)
  4019ac:	4798      	blx	r3
  4019ae:	e002      	b.n	4019b6 <inverte_led+0x36>
		}
	}
	else {
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4019b0:	2002      	movs	r0, #2
  4019b2:	4b05      	ldr	r3, [pc, #20]	; (4019c8 <inverte_led+0x48>)
  4019b4:	4798      	blx	r3
	}
	
}
  4019b6:	b003      	add	sp, #12
  4019b8:	bd30      	pop	{r4, r5, pc}
  4019ba:	bf00      	nop
  4019bc:	00400d93 	.word	0x00400d93
  4019c0:	00400d8f 	.word	0x00400d8f
  4019c4:	00400d8b 	.word	0x00400d8b
  4019c8:	00401255 	.word	0x00401255

004019cc <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4019cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019d0:	b085      	sub	sp, #20
  4019d2:	4606      	mov	r6, r0
  4019d4:	460c      	mov	r4, r1
  4019d6:	4617      	mov	r7, r2
  4019d8:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  4019da:	4608      	mov	r0, r1
  4019dc:	4b18      	ldr	r3, [pc, #96]	; (401a40 <TC_init+0x74>)
  4019de:	4798      	blx	r3

	/** Configura o TC para operar em  freq hz e interrup?c?o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4019e0:	4d18      	ldr	r5, [pc, #96]	; (401a44 <TC_init+0x78>)
  4019e2:	9500      	str	r5, [sp, #0]
  4019e4:	ab02      	add	r3, sp, #8
  4019e6:	aa03      	add	r2, sp, #12
  4019e8:	4629      	mov	r1, r5
  4019ea:	4640      	mov	r0, r8
  4019ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401a5c <TC_init+0x90>
  4019f0:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4019f2:	9a02      	ldr	r2, [sp, #8]
  4019f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4019f8:	4639      	mov	r1, r7
  4019fa:	4630      	mov	r0, r6
  4019fc:	4b12      	ldr	r3, [pc, #72]	; (401a48 <TC_init+0x7c>)
  4019fe:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401a00:	9a03      	ldr	r2, [sp, #12]
  401a02:	fbb5 f2f2 	udiv	r2, r5, r2
  401a06:	fbb2 f2f8 	udiv	r2, r2, r8
  401a0a:	4639      	mov	r1, r7
  401a0c:	4630      	mov	r0, r6
  401a0e:	4b0f      	ldr	r3, [pc, #60]	; (401a4c <TC_init+0x80>)
  401a10:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a12:	b263      	sxtb	r3, r4
  401a14:	095b      	lsrs	r3, r3, #5
  401a16:	f004 041f 	and.w	r4, r4, #31
  401a1a:	2201      	movs	r2, #1
  401a1c:	fa02 f404 	lsl.w	r4, r2, r4
  401a20:	4a0b      	ldr	r2, [pc, #44]	; (401a50 <TC_init+0x84>)
  401a22:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrup?c?o no TC canal 0 */
	/* Interrup??o no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401a26:	2210      	movs	r2, #16
  401a28:	4639      	mov	r1, r7
  401a2a:	4630      	mov	r0, r6
  401a2c:	4b09      	ldr	r3, [pc, #36]	; (401a54 <TC_init+0x88>)
  401a2e:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  401a30:	4639      	mov	r1, r7
  401a32:	4630      	mov	r0, r6
  401a34:	4b08      	ldr	r3, [pc, #32]	; (401a58 <TC_init+0x8c>)
  401a36:	4798      	blx	r3
}
  401a38:	b005      	add	sp, #20
  401a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a3e:	bf00      	nop
  401a40:	004011b1 	.word	0x004011b1
  401a44:	11e1a300 	.word	0x11e1a300
  401a48:	0040057f 	.word	0x0040057f
  401a4c:	004005a1 	.word	0x004005a1
  401a50:	e000e100 	.word	0xe000e100
  401a54:	004005a9 	.word	0x004005a9
  401a58:	00400599 	.word	0x00400599
  401a5c:	004005b9 	.word	0x004005b9

00401a60 <RTC_init>:
}

/**
* Configura o RTC para funcionar com interrupcao de alarme
*/
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  401a60:	b082      	sub	sp, #8
  401a62:	b570      	push	{r4, r5, r6, lr}
  401a64:	b082      	sub	sp, #8
  401a66:	4605      	mov	r5, r0
  401a68:	460c      	mov	r4, r1
  401a6a:	a906      	add	r1, sp, #24
  401a6c:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401a70:	2002      	movs	r0, #2
  401a72:	4b1d      	ldr	r3, [pc, #116]	; (401ae8 <RTC_init+0x88>)
  401a74:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401a76:	2100      	movs	r1, #0
  401a78:	4628      	mov	r0, r5
  401a7a:	4b1c      	ldr	r3, [pc, #112]	; (401aec <RTC_init+0x8c>)
  401a7c:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a80:	9300      	str	r3, [sp, #0]
  401a82:	9b08      	ldr	r3, [sp, #32]
  401a84:	9a07      	ldr	r2, [sp, #28]
  401a86:	9906      	ldr	r1, [sp, #24]
  401a88:	4628      	mov	r0, r5
  401a8a:	4e19      	ldr	r6, [pc, #100]	; (401af0 <RTC_init+0x90>)
  401a8c:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  401a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401a92:	990a      	ldr	r1, [sp, #40]	; 0x28
  401a94:	4628      	mov	r0, r5
  401a96:	4e17      	ldr	r6, [pc, #92]	; (401af4 <RTC_init+0x94>)
  401a98:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401a9a:	b262      	sxtb	r2, r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401a9c:	b2e4      	uxtb	r4, r4
  401a9e:	f004 011f 	and.w	r1, r4, #31
  401aa2:	2301      	movs	r3, #1
  401aa4:	408b      	lsls	r3, r1
  401aa6:	0956      	lsrs	r6, r2, #5
  401aa8:	4813      	ldr	r0, [pc, #76]	; (401af8 <RTC_init+0x98>)
  401aaa:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401aae:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401ab2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  401ab6:	2a00      	cmp	r2, #0
  401ab8:	db0f      	blt.n	401ada <RTC_init+0x7a>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401aba:	490f      	ldr	r1, [pc, #60]	; (401af8 <RTC_init+0x98>)
  401abc:	4411      	add	r1, r2
  401abe:	2280      	movs	r2, #128	; 0x80
  401ac0:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ac4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401ac8:	990d      	ldr	r1, [sp, #52]	; 0x34
  401aca:	4628      	mov	r0, r5
  401acc:	4b0b      	ldr	r3, [pc, #44]	; (401afc <RTC_init+0x9c>)
  401ace:	4798      	blx	r3
}
  401ad0:	b002      	add	sp, #8
  401ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401ad6:	b002      	add	sp, #8
  401ad8:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401ada:	f004 040f 	and.w	r4, r4, #15
  401ade:	4a08      	ldr	r2, [pc, #32]	; (401b00 <RTC_init+0xa0>)
  401ae0:	2180      	movs	r1, #128	; 0x80
  401ae2:	5511      	strb	r1, [r2, r4]
  401ae4:	e7ee      	b.n	401ac4 <RTC_init+0x64>
  401ae6:	bf00      	nop
  401ae8:	004011b1 	.word	0x004011b1
  401aec:	004001ad 	.word	0x004001ad
  401af0:	004002b1 	.word	0x004002b1
  401af4:	00400221 	.word	0x00400221
  401af8:	e000e100 	.word	0xe000e100
  401afc:	004001c3 	.word	0x004001c3
  401b00:	e000ed14 	.word	0xe000ed14

00401b04 <io_init>:

void io_init(void){
  401b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b08:	b083      	sub	sp, #12

	// Configura led1
	pmc_enable_periph_clk(LED1_PIO_ID);
  401b0a:	200a      	movs	r0, #10
  401b0c:	4e42      	ldr	r6, [pc, #264]	; (401c18 <io_init+0x114>)
  401b0e:	47b0      	blx	r6
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_IDX_MASK, PIO_DEFAULT);
  401b10:	2300      	movs	r3, #0
  401b12:	2201      	movs	r2, #1
  401b14:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401b18:	4840      	ldr	r0, [pc, #256]	; (401c1c <io_init+0x118>)
  401b1a:	4d41      	ldr	r5, [pc, #260]	; (401c20 <io_init+0x11c>)
  401b1c:	47a8      	blx	r5
	
	// Configura led2
	pmc_enable_periph_clk(LED2_PIO_ID);
  401b1e:	200c      	movs	r0, #12
  401b20:	47b0      	blx	r6
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_IDX_MASK, PIO_DEFAULT);
  401b22:	4f40      	ldr	r7, [pc, #256]	; (401c24 <io_init+0x120>)
  401b24:	2300      	movs	r3, #0
  401b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401b2a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401b2e:	4638      	mov	r0, r7
  401b30:	47a8      	blx	r5
	
	// Configura led3
	pmc_enable_periph_clk(LED3_PIO_ID);
  401b32:	200b      	movs	r0, #11
  401b34:	47b0      	blx	r6
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_IDX_MASK, PIO_DEFAULT);
  401b36:	2300      	movs	r3, #0
  401b38:	2204      	movs	r2, #4
  401b3a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401b3e:	483a      	ldr	r0, [pc, #232]	; (401c28 <io_init+0x124>)
  401b40:	47a8      	blx	r5

	// ------ BOTAO 1------
	// Inicializa clock do perif?rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUT1_PIO_ID);
  401b42:	2010      	movs	r0, #16
  401b44:	47b0      	blx	r6
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401b46:	4c39      	ldr	r4, [pc, #228]	; (401c2c <io_init+0x128>)
  401b48:	2309      	movs	r3, #9
  401b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b4e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401b52:	4620      	mov	r0, r4
  401b54:	47a8      	blx	r5
	pio_set_debounce_filter(BUT1_PIO, BUT1_IDX_MASK, 60);
  401b56:	223c      	movs	r2, #60	; 0x3c
  401b58:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b5c:	4620      	mov	r0, r4
  401b5e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 401c40 <io_init+0x13c>
  401b62:	47d8      	blx	fp

	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(BUT1_PIO,
  401b64:	4b32      	ldr	r3, [pc, #200]	; (401c30 <io_init+0x12c>)
  401b66:	9300      	str	r3, [sp, #0]
  401b68:	2340      	movs	r3, #64	; 0x40
  401b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b6e:	2110      	movs	r1, #16
  401b70:	4620      	mov	r0, r4
  401b72:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401c44 <io_init+0x140>
  401b76:	47d0      	blx	sl
	BUT1_IDX_MASK,
	PIO_IT_EDGE,
	but1_callback);

	// Ativa interrup??o
	pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  401b78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b7c:	4620      	mov	r0, r4
  401b7e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 401c48 <io_init+0x144>
  401b82:	47c8      	blx	r9
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b84:	4c2b      	ldr	r4, [pc, #172]	; (401c34 <io_init+0x130>)
  401b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401b8a:	6023      	str	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b8c:	f04f 0880 	mov.w	r8, #128	; 0x80
  401b90:	f884 8310 	strb.w	r8, [r4, #784]	; 0x310
	NVIC_EnableIRQ(BUT1_PIO_ID);
	NVIC_SetPriority(BUT1_PIO_ID, 4); // Prioridade 4
	
	// ------ BOTAO 2------
	// Inicializa clock do perif?rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUT2_PIO_ID);
  401b94:	200c      	movs	r0, #12
  401b96:	47b0      	blx	r6
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401b98:	2309      	movs	r3, #9
  401b9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401b9e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401ba2:	4638      	mov	r0, r7
  401ba4:	47a8      	blx	r5
	pio_set_debounce_filter(BUT2_PIO, BUT2_IDX_MASK, 60);
  401ba6:	223c      	movs	r2, #60	; 0x3c
  401ba8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401bac:	4638      	mov	r0, r7
  401bae:	47d8      	blx	fp

	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(BUT2_PIO,
  401bb0:	4b21      	ldr	r3, [pc, #132]	; (401c38 <io_init+0x134>)
  401bb2:	9300      	str	r3, [sp, #0]
  401bb4:	2340      	movs	r3, #64	; 0x40
  401bb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401bba:	210c      	movs	r1, #12
  401bbc:	4638      	mov	r0, r7
  401bbe:	47d0      	blx	sl
	BUT2_IDX_MASK,
	PIO_IT_EDGE,
	but2_callback);

	// Ativa interrup??o
	pio_enable_interrupt(BUT2_PIO, BUT2_IDX_MASK);
  401bc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401bc4:	4638      	mov	r0, r7
  401bc6:	47c8      	blx	r9
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401bcc:	6023      	str	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401bce:	f884 830c 	strb.w	r8, [r4, #780]	; 0x30c
	NVIC_EnableIRQ(BUT2_PIO_ID);
	NVIC_SetPriority(BUT2_PIO_ID, 4); // Prioridade 4
	
	// ------ BOTAO 3------
	// Inicializa clock do perif?rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUT3_PIO_ID);
  401bd2:	200a      	movs	r0, #10
  401bd4:	47b0      	blx	r6
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401bd6:	2309      	movs	r3, #9
  401bd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401bdc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401be0:	480e      	ldr	r0, [pc, #56]	; (401c1c <io_init+0x118>)
  401be2:	47a8      	blx	r5
	pio_set_debounce_filter(BUT3_PIO, BUT3_IDX_MASK, 60);
  401be4:	223c      	movs	r2, #60	; 0x3c
  401be6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401bea:	480c      	ldr	r0, [pc, #48]	; (401c1c <io_init+0x118>)
  401bec:	47d8      	blx	fp

	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(BUT3_PIO,
  401bee:	4b13      	ldr	r3, [pc, #76]	; (401c3c <io_init+0x138>)
  401bf0:	9300      	str	r3, [sp, #0]
  401bf2:	2340      	movs	r3, #64	; 0x40
  401bf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401bf8:	210a      	movs	r1, #10
  401bfa:	4808      	ldr	r0, [pc, #32]	; (401c1c <io_init+0x118>)
  401bfc:	47d0      	blx	sl
	BUT3_IDX_MASK,
	PIO_IT_EDGE,
	but3_callback);

	// Ativa interrup??o
	pio_enable_interrupt(BUT3_PIO, BUT3_IDX_MASK);
  401bfe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401c02:	4806      	ldr	r0, [pc, #24]	; (401c1c <io_init+0x118>)
  401c04:	47c8      	blx	r9
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401c0a:	6023      	str	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401c0c:	f884 830a 	strb.w	r8, [r4, #778]	; 0x30a

	// Configura NVIC para receber interrupcoes do PIO do botao
	// com prioridade 4 (quanto mais pr?ximo de 0 maior)
	NVIC_EnableIRQ(BUT3_PIO_ID);
	NVIC_SetPriority(BUT3_PIO_ID, 4); // Prioridade 4
}
  401c10:	b003      	add	sp, #12
  401c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c16:	bf00      	nop
  401c18:	004011b1 	.word	0x004011b1
  401c1c:	400e0e00 	.word	0x400e0e00
  401c20:	00400e9d 	.word	0x00400e9d
  401c24:	400e1200 	.word	0x400e1200
  401c28:	400e1000 	.word	0x400e1000
  401c2c:	400e1400 	.word	0x400e1400
  401c30:	00401765 	.word	0x00401765
  401c34:	e000e100 	.word	0xe000e100
  401c38:	00401791 	.word	0x00401791
  401c3c:	004017bd 	.word	0x004017bd
  401c40:	00400d71 	.word	0x00400d71
  401c44:	00400fbd 	.word	0x00400fbd
  401c48:	00400f5f 	.word	0x00400f5f

00401c4c <main>:

int main (void)
{
  401c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c50:	b09f      	sub	sp, #124	; 0x7c
	board_init();
  401c52:	4b6b      	ldr	r3, [pc, #428]	; (401e00 <main+0x1b4>)
  401c54:	4798      	blx	r3
	sysclk_init();
  401c56:	4b6b      	ldr	r3, [pc, #428]	; (401e04 <main+0x1b8>)
  401c58:	4798      	blx	r3
	io_init();
  401c5a:	4b6b      	ldr	r3, [pc, #428]	; (401e08 <main+0x1bc>)
  401c5c:	4798      	blx	r3
	
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c62:	4b6a      	ldr	r3, [pc, #424]	; (401e0c <main+0x1c0>)
  401c64:	605a      	str	r2, [r3, #4]
	
	delay_init();

	f_rtt_alarme = 1;
  401c66:	2601      	movs	r6, #1
  401c68:	4b69      	ldr	r3, [pc, #420]	; (401e10 <main+0x1c4>)
  401c6a:	701e      	strb	r6, [r3, #0]

	// Init OLED
	gfx_mono_ssd1306_init();
  401c6c:	4b69      	ldr	r3, [pc, #420]	; (401e14 <main+0x1c8>)
  401c6e:	4798      	blx	r3
	
	/* Configura Leds */
	LED1_init(0);
  401c70:	2000      	movs	r0, #0
  401c72:	4b69      	ldr	r3, [pc, #420]	; (401e18 <main+0x1cc>)
  401c74:	4798      	blx	r3
	LED2_init(1);
  401c76:	4630      	mov	r0, r6
  401c78:	4b68      	ldr	r3, [pc, #416]	; (401e1c <main+0x1d0>)
  401c7a:	4798      	blx	r3
	LED3_init(0);
  401c7c:	2000      	movs	r0, #0
  401c7e:	4b68      	ldr	r3, [pc, #416]	; (401e20 <main+0x1d4>)
  401c80:	4798      	blx	r3
	
	/** Configura timer TC0, canal 1 */
	TC_init(TC0, ID_TC1, 1, 5);
  401c82:	2305      	movs	r3, #5
  401c84:	4632      	mov	r2, r6
  401c86:	2118      	movs	r1, #24
  401c88:	4866      	ldr	r0, [pc, #408]	; (401e24 <main+0x1d8>)
  401c8a:	4c67      	ldr	r4, [pc, #412]	; (401e28 <main+0x1dc>)
  401c8c:	47a0      	blx	r4
	/** Configura timer TC1, canal 1 */
	TC_init(TC1, ID_TC4, 1, 10);
  401c8e:	230a      	movs	r3, #10
  401c90:	4632      	mov	r2, r6
  401c92:	211b      	movs	r1, #27
  401c94:	4865      	ldr	r0, [pc, #404]	; (401e2c <main+0x1e0>)
  401c96:	47a0      	blx	r4
	/** Configura timer TC2, canal 1 */
	TC_init(TC2, ID_TC7, 1, 1);
  401c98:	4633      	mov	r3, r6
  401c9a:	4632      	mov	r2, r6
  401c9c:	2130      	movs	r1, #48	; 0x30
  401c9e:	4864      	ldr	r0, [pc, #400]	; (401e30 <main+0x1e4>)
  401ca0:	47a0      	blx	r4
	
	calendar rtc_initial = {2021, 3, 19, 12, 20, 49, 20};
  401ca2:	ac17      	add	r4, sp, #92	; 0x5c
  401ca4:	4d63      	ldr	r5, [pc, #396]	; (401e34 <main+0x1e8>)
  401ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  401cb2:	2306      	movs	r3, #6
  401cb4:	9305      	str	r3, [sp, #20]
  401cb6:	466c      	mov	r4, sp
  401cb8:	ad19      	add	r5, sp, #100	; 0x64
  401cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401cbe:	682b      	ldr	r3, [r5, #0]
  401cc0:	6023      	str	r3, [r4, #0]
  401cc2:	ab17      	add	r3, sp, #92	; 0x5c
  401cc4:	cb0c      	ldmia	r3, {r2, r3}
  401cc6:	2102      	movs	r1, #2
  401cc8:	485b      	ldr	r0, [pc, #364]	; (401e38 <main+0x1ec>)
  401cca:	4c5c      	ldr	r4, [pc, #368]	; (401e3c <main+0x1f0>)
  401ccc:	47a0      	blx	r4
	
	char buffer[50];
	gfx_mono_draw_string("5", 1, 15, &sysfont);
  401cce:	4d5c      	ldr	r5, [pc, #368]	; (401e40 <main+0x1f4>)
  401cd0:	462b      	mov	r3, r5
  401cd2:	220f      	movs	r2, #15
  401cd4:	4631      	mov	r1, r6
  401cd6:	485b      	ldr	r0, [pc, #364]	; (401e44 <main+0x1f8>)
  401cd8:	4c5b      	ldr	r4, [pc, #364]	; (401e48 <main+0x1fc>)
  401cda:	47a0      	blx	r4
	gfx_mono_draw_string("10", 60, 15, &sysfont);
  401cdc:	462b      	mov	r3, r5
  401cde:	220f      	movs	r2, #15
  401ce0:	213c      	movs	r1, #60	; 0x3c
  401ce2:	485a      	ldr	r0, [pc, #360]	; (401e4c <main+0x200>)
  401ce4:	47a0      	blx	r4
	gfx_mono_draw_string("1", 120, 15, &sysfont);
  401ce6:	462b      	mov	r3, r5
  401ce8:	220f      	movs	r2, #15
  401cea:	2178      	movs	r1, #120	; 0x78
  401cec:	4858      	ldr	r0, [pc, #352]	; (401e50 <main+0x204>)
  401cee:	47a0      	blx	r4
	
	/* Insert application code here, after the board has been initialized. */
	while(1) {
		if(flag_tc0){
  401cf0:	4f58      	ldr	r7, [pc, #352]	; (401e54 <main+0x208>)
			inverte_led(LED1_PIO, LED1_IDX_MASK, but1_flag);
  401cf2:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 401ea4 <main+0x258>
  401cf6:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 401ea8 <main+0x25c>
			flag_tc0 = 0;
		}
		if(flag_tc1){
			inverte_led(LED2_PIO, LED2_IDX_MASK, but2_flag);
  401cfa:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 401eac <main+0x260>
			inverte_led(LED3_PIO, LED3_IDX_MASK, but3_flag);
			flag_tc2 = 0;
		}
		if(flag_sec){
			uint32_t h, m, s;
			rtc_get_time(RTC, &h, &m, &s);
  401cfe:	f8df 8138 	ldr.w	r8, [pc, #312]	; 401e38 <main+0x1ec>
	rtt_sel_source(RTT, false);
  401d02:	4c55      	ldr	r4, [pc, #340]	; (401e58 <main+0x20c>)
  401d04:	e03e      	b.n	401d84 <main+0x138>
			inverte_led(LED1_PIO, LED1_IDX_MASK, but1_flag);
  401d06:	f89b 2000 	ldrb.w	r2, [fp]
  401d0a:	2101      	movs	r1, #1
  401d0c:	4650      	mov	r0, sl
  401d0e:	4b53      	ldr	r3, [pc, #332]	; (401e5c <main+0x210>)
  401d10:	4798      	blx	r3
			flag_tc0 = 0;
  401d12:	2300      	movs	r3, #0
  401d14:	703b      	strb	r3, [r7, #0]
  401d16:	e038      	b.n	401d8a <main+0x13e>
			inverte_led(LED2_PIO, LED2_IDX_MASK, but2_flag);
  401d18:	4b51      	ldr	r3, [pc, #324]	; (401e60 <main+0x214>)
  401d1a:	781a      	ldrb	r2, [r3, #0]
  401d1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401d20:	4648      	mov	r0, r9
  401d22:	4b4e      	ldr	r3, [pc, #312]	; (401e5c <main+0x210>)
  401d24:	4798      	blx	r3
			flag_tc1 = 0;
  401d26:	2200      	movs	r2, #0
  401d28:	4b4e      	ldr	r3, [pc, #312]	; (401e64 <main+0x218>)
  401d2a:	701a      	strb	r2, [r3, #0]
  401d2c:	e031      	b.n	401d92 <main+0x146>
			inverte_led(LED3_PIO, LED3_IDX_MASK, but3_flag);
  401d2e:	4b4e      	ldr	r3, [pc, #312]	; (401e68 <main+0x21c>)
  401d30:	781a      	ldrb	r2, [r3, #0]
  401d32:	2104      	movs	r1, #4
  401d34:	484d      	ldr	r0, [pc, #308]	; (401e6c <main+0x220>)
  401d36:	4b49      	ldr	r3, [pc, #292]	; (401e5c <main+0x210>)
  401d38:	4798      	blx	r3
			flag_tc2 = 0;
  401d3a:	2200      	movs	r2, #0
  401d3c:	4b4c      	ldr	r3, [pc, #304]	; (401e70 <main+0x224>)
  401d3e:	701a      	strb	r2, [r3, #0]
  401d40:	e02b      	b.n	401d9a <main+0x14e>
			rtc_get_time(RTC, &h, &m, &s);
  401d42:	ab09      	add	r3, sp, #36	; 0x24
  401d44:	aa08      	add	r2, sp, #32
  401d46:	a907      	add	r1, sp, #28
  401d48:	4640      	mov	r0, r8
  401d4a:	4d4a      	ldr	r5, [pc, #296]	; (401e74 <main+0x228>)
  401d4c:	47a8      	blx	r5
			
			sprintf(buffer, "%lu:%lu:%lu", h, m, s);
  401d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d50:	9300      	str	r3, [sp, #0]
  401d52:	9b08      	ldr	r3, [sp, #32]
  401d54:	9a07      	ldr	r2, [sp, #28]
  401d56:	4948      	ldr	r1, [pc, #288]	; (401e78 <main+0x22c>)
  401d58:	a80a      	add	r0, sp, #40	; 0x28
  401d5a:	4d48      	ldr	r5, [pc, #288]	; (401e7c <main+0x230>)
  401d5c:	47a8      	blx	r5
			gfx_mono_draw_string("            ", 35, 2, &sysfont);
  401d5e:	4e38      	ldr	r6, [pc, #224]	; (401e40 <main+0x1f4>)
  401d60:	4633      	mov	r3, r6
  401d62:	2202      	movs	r2, #2
  401d64:	2123      	movs	r1, #35	; 0x23
  401d66:	4846      	ldr	r0, [pc, #280]	; (401e80 <main+0x234>)
  401d68:	4d37      	ldr	r5, [pc, #220]	; (401e48 <main+0x1fc>)
  401d6a:	47a8      	blx	r5
			gfx_mono_draw_string(buffer, 35, 2, &sysfont);
  401d6c:	4633      	mov	r3, r6
  401d6e:	2202      	movs	r2, #2
  401d70:	2123      	movs	r1, #35	; 0x23
  401d72:	a80a      	add	r0, sp, #40	; 0x28
  401d74:	47a8      	blx	r5
			
			flag_sec = 0;
  401d76:	2200      	movs	r2, #0
  401d78:	4b42      	ldr	r3, [pc, #264]	; (401e84 <main+0x238>)
  401d7a:	701a      	strb	r2, [r3, #0]
  401d7c:	e011      	b.n	401da2 <main+0x156>
			RTT_init(pllPreScale, irqRTTvalue);         
      
			f_rtt_alarme = 0;
		}

		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401d7e:	2002      	movs	r0, #2
  401d80:	4b41      	ldr	r3, [pc, #260]	; (401e88 <main+0x23c>)
  401d82:	4798      	blx	r3
		if(flag_tc0){
  401d84:	783b      	ldrb	r3, [r7, #0]
  401d86:	2b00      	cmp	r3, #0
  401d88:	d1bd      	bne.n	401d06 <main+0xba>
		if(flag_tc1){
  401d8a:	4b36      	ldr	r3, [pc, #216]	; (401e64 <main+0x218>)
  401d8c:	781b      	ldrb	r3, [r3, #0]
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d1c2      	bne.n	401d18 <main+0xcc>
		if(flag_tc2){
  401d92:	4b37      	ldr	r3, [pc, #220]	; (401e70 <main+0x224>)
  401d94:	781b      	ldrb	r3, [r3, #0]
  401d96:	2b00      	cmp	r3, #0
  401d98:	d1c9      	bne.n	401d2e <main+0xe2>
		if(flag_sec){
  401d9a:	4b3a      	ldr	r3, [pc, #232]	; (401e84 <main+0x238>)
  401d9c:	781b      	ldrb	r3, [r3, #0]
  401d9e:	2b00      	cmp	r3, #0
  401da0:	d1cf      	bne.n	401d42 <main+0xf6>
		if(f_rtt_alarme){      
  401da2:	4b1b      	ldr	r3, [pc, #108]	; (401e10 <main+0x1c4>)
  401da4:	781b      	ldrb	r3, [r3, #0]
  401da6:	2b00      	cmp	r3, #0
  401da8:	d0e9      	beq.n	401d7e <main+0x132>
	rtt_sel_source(RTT, false);
  401daa:	2100      	movs	r1, #0
  401dac:	4620      	mov	r0, r4
  401dae:	4b37      	ldr	r3, [pc, #220]	; (401e8c <main+0x240>)
  401db0:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  401db2:	f641 1199 	movw	r1, #6553	; 0x1999
  401db6:	4620      	mov	r0, r4
  401db8:	4b35      	ldr	r3, [pc, #212]	; (401e90 <main+0x244>)
  401dba:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  401dbc:	4620      	mov	r0, r4
  401dbe:	4b35      	ldr	r3, [pc, #212]	; (401e94 <main+0x248>)
  401dc0:	4798      	blx	r3
  401dc2:	4605      	mov	r5, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  401dc4:	4e33      	ldr	r6, [pc, #204]	; (401e94 <main+0x248>)
  401dc6:	4620      	mov	r0, r4
  401dc8:	47b0      	blx	r6
  401dca:	4285      	cmp	r5, r0
  401dcc:	d0fb      	beq.n	401dc6 <main+0x17a>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401dce:	f105 0119 	add.w	r1, r5, #25
  401dd2:	4620      	mov	r0, r4
  401dd4:	4b30      	ldr	r3, [pc, #192]	; (401e98 <main+0x24c>)
  401dd6:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401dd8:	4b30      	ldr	r3, [pc, #192]	; (401e9c <main+0x250>)
  401dda:	2208      	movs	r2, #8
  401ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401de0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401de4:	2180      	movs	r1, #128	; 0x80
  401de6:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401dea:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  401dec:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  401df0:	4620      	mov	r0, r4
  401df2:	4b2b      	ldr	r3, [pc, #172]	; (401ea0 <main+0x254>)
  401df4:	4798      	blx	r3
			f_rtt_alarme = 0;
  401df6:	2200      	movs	r2, #0
  401df8:	4b05      	ldr	r3, [pc, #20]	; (401e10 <main+0x1c4>)
  401dfa:	701a      	strb	r2, [r3, #0]
  401dfc:	e7bf      	b.n	401d7e <main+0x132>
  401dfe:	bf00      	nop
  401e00:	00400c31 	.word	0x00400c31
  401e04:	00400bc1 	.word	0x00400bc1
  401e08:	00401b05 	.word	0x00401b05
  401e0c:	400e1850 	.word	0x400e1850
  401e10:	20400ca8 	.word	0x20400ca8
  401e14:	004008a1 	.word	0x004008a1
  401e18:	004018fd 	.word	0x004018fd
  401e1c:	00401929 	.word	0x00401929
  401e20:	00401955 	.word	0x00401955
  401e24:	4000c000 	.word	0x4000c000
  401e28:	004019cd 	.word	0x004019cd
  401e2c:	40010000 	.word	0x40010000
  401e30:	40014000 	.word	0x40014000
  401e34:	004071fc 	.word	0x004071fc
  401e38:	400e1860 	.word	0x400e1860
  401e3c:	00401a61 	.word	0x00401a61
  401e40:	2040000c 	.word	0x2040000c
  401e44:	00407218 	.word	0x00407218
  401e48:	00400809 	.word	0x00400809
  401e4c:	0040721c 	.word	0x0040721c
  401e50:	00407220 	.word	0x00407220
  401e54:	20400cac 	.word	0x20400cac
  401e58:	400e1830 	.word	0x400e1830
  401e5c:	00401981 	.word	0x00401981
  401e60:	20400cad 	.word	0x20400cad
  401e64:	20400cb0 	.word	0x20400cb0
  401e68:	20400cab 	.word	0x20400cab
  401e6c:	400e1000 	.word	0x400e1000
  401e70:	20400caf 	.word	0x20400caf
  401e74:	004001c7 	.word	0x004001c7
  401e78:	00407224 	.word	0x00407224
  401e7c:	00401f9d 	.word	0x00401f9d
  401e80:	00407230 	.word	0x00407230
  401e84:	20400cae 	.word	0x20400cae
  401e88:	00401255 	.word	0x00401255
  401e8c:	00400385 	.word	0x00400385
  401e90:	00400371 	.word	0x00400371
  401e94:	004003d9 	.word	0x004003d9
  401e98:	004003f1 	.word	0x004003f1
  401e9c:	e000e100 	.word	0xe000e100
  401ea0:	004003b1 	.word	0x004003b1
  401ea4:	20400ca9 	.word	0x20400ca9
  401ea8:	400e0e00 	.word	0x400e0e00
  401eac:	400e1200 	.word	0x400e1200

00401eb0 <__libc_init_array>:
  401eb0:	b570      	push	{r4, r5, r6, lr}
  401eb2:	4e0f      	ldr	r6, [pc, #60]	; (401ef0 <__libc_init_array+0x40>)
  401eb4:	4d0f      	ldr	r5, [pc, #60]	; (401ef4 <__libc_init_array+0x44>)
  401eb6:	1b76      	subs	r6, r6, r5
  401eb8:	10b6      	asrs	r6, r6, #2
  401eba:	bf18      	it	ne
  401ebc:	2400      	movne	r4, #0
  401ebe:	d005      	beq.n	401ecc <__libc_init_array+0x1c>
  401ec0:	3401      	adds	r4, #1
  401ec2:	f855 3b04 	ldr.w	r3, [r5], #4
  401ec6:	4798      	blx	r3
  401ec8:	42a6      	cmp	r6, r4
  401eca:	d1f9      	bne.n	401ec0 <__libc_init_array+0x10>
  401ecc:	4e0a      	ldr	r6, [pc, #40]	; (401ef8 <__libc_init_array+0x48>)
  401ece:	4d0b      	ldr	r5, [pc, #44]	; (401efc <__libc_init_array+0x4c>)
  401ed0:	1b76      	subs	r6, r6, r5
  401ed2:	f005 faf9 	bl	4074c8 <_init>
  401ed6:	10b6      	asrs	r6, r6, #2
  401ed8:	bf18      	it	ne
  401eda:	2400      	movne	r4, #0
  401edc:	d006      	beq.n	401eec <__libc_init_array+0x3c>
  401ede:	3401      	adds	r4, #1
  401ee0:	f855 3b04 	ldr.w	r3, [r5], #4
  401ee4:	4798      	blx	r3
  401ee6:	42a6      	cmp	r6, r4
  401ee8:	d1f9      	bne.n	401ede <__libc_init_array+0x2e>
  401eea:	bd70      	pop	{r4, r5, r6, pc}
  401eec:	bd70      	pop	{r4, r5, r6, pc}
  401eee:	bf00      	nop
  401ef0:	004074d4 	.word	0x004074d4
  401ef4:	004074d4 	.word	0x004074d4
  401ef8:	004074dc 	.word	0x004074dc
  401efc:	004074d4 	.word	0x004074d4

00401f00 <memset>:
  401f00:	b470      	push	{r4, r5, r6}
  401f02:	0786      	lsls	r6, r0, #30
  401f04:	d046      	beq.n	401f94 <memset+0x94>
  401f06:	1e54      	subs	r4, r2, #1
  401f08:	2a00      	cmp	r2, #0
  401f0a:	d041      	beq.n	401f90 <memset+0x90>
  401f0c:	b2ca      	uxtb	r2, r1
  401f0e:	4603      	mov	r3, r0
  401f10:	e002      	b.n	401f18 <memset+0x18>
  401f12:	f114 34ff 	adds.w	r4, r4, #4294967295
  401f16:	d33b      	bcc.n	401f90 <memset+0x90>
  401f18:	f803 2b01 	strb.w	r2, [r3], #1
  401f1c:	079d      	lsls	r5, r3, #30
  401f1e:	d1f8      	bne.n	401f12 <memset+0x12>
  401f20:	2c03      	cmp	r4, #3
  401f22:	d92e      	bls.n	401f82 <memset+0x82>
  401f24:	b2cd      	uxtb	r5, r1
  401f26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401f2a:	2c0f      	cmp	r4, #15
  401f2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401f30:	d919      	bls.n	401f66 <memset+0x66>
  401f32:	f103 0210 	add.w	r2, r3, #16
  401f36:	4626      	mov	r6, r4
  401f38:	3e10      	subs	r6, #16
  401f3a:	2e0f      	cmp	r6, #15
  401f3c:	f842 5c10 	str.w	r5, [r2, #-16]
  401f40:	f842 5c0c 	str.w	r5, [r2, #-12]
  401f44:	f842 5c08 	str.w	r5, [r2, #-8]
  401f48:	f842 5c04 	str.w	r5, [r2, #-4]
  401f4c:	f102 0210 	add.w	r2, r2, #16
  401f50:	d8f2      	bhi.n	401f38 <memset+0x38>
  401f52:	f1a4 0210 	sub.w	r2, r4, #16
  401f56:	f022 020f 	bic.w	r2, r2, #15
  401f5a:	f004 040f 	and.w	r4, r4, #15
  401f5e:	3210      	adds	r2, #16
  401f60:	2c03      	cmp	r4, #3
  401f62:	4413      	add	r3, r2
  401f64:	d90d      	bls.n	401f82 <memset+0x82>
  401f66:	461e      	mov	r6, r3
  401f68:	4622      	mov	r2, r4
  401f6a:	3a04      	subs	r2, #4
  401f6c:	2a03      	cmp	r2, #3
  401f6e:	f846 5b04 	str.w	r5, [r6], #4
  401f72:	d8fa      	bhi.n	401f6a <memset+0x6a>
  401f74:	1f22      	subs	r2, r4, #4
  401f76:	f022 0203 	bic.w	r2, r2, #3
  401f7a:	3204      	adds	r2, #4
  401f7c:	4413      	add	r3, r2
  401f7e:	f004 0403 	and.w	r4, r4, #3
  401f82:	b12c      	cbz	r4, 401f90 <memset+0x90>
  401f84:	b2c9      	uxtb	r1, r1
  401f86:	441c      	add	r4, r3
  401f88:	f803 1b01 	strb.w	r1, [r3], #1
  401f8c:	429c      	cmp	r4, r3
  401f8e:	d1fb      	bne.n	401f88 <memset+0x88>
  401f90:	bc70      	pop	{r4, r5, r6}
  401f92:	4770      	bx	lr
  401f94:	4614      	mov	r4, r2
  401f96:	4603      	mov	r3, r0
  401f98:	e7c2      	b.n	401f20 <memset+0x20>
  401f9a:	bf00      	nop

00401f9c <sprintf>:
  401f9c:	b40e      	push	{r1, r2, r3}
  401f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  401fa0:	b09c      	sub	sp, #112	; 0x70
  401fa2:	ab21      	add	r3, sp, #132	; 0x84
  401fa4:	490f      	ldr	r1, [pc, #60]	; (401fe4 <sprintf+0x48>)
  401fa6:	f853 2b04 	ldr.w	r2, [r3], #4
  401faa:	9301      	str	r3, [sp, #4]
  401fac:	4605      	mov	r5, r0
  401fae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  401fb2:	6808      	ldr	r0, [r1, #0]
  401fb4:	9502      	str	r5, [sp, #8]
  401fb6:	f44f 7702 	mov.w	r7, #520	; 0x208
  401fba:	f64f 76ff 	movw	r6, #65535	; 0xffff
  401fbe:	a902      	add	r1, sp, #8
  401fc0:	9506      	str	r5, [sp, #24]
  401fc2:	f8ad 7014 	strh.w	r7, [sp, #20]
  401fc6:	9404      	str	r4, [sp, #16]
  401fc8:	9407      	str	r4, [sp, #28]
  401fca:	f8ad 6016 	strh.w	r6, [sp, #22]
  401fce:	f000 f80b 	bl	401fe8 <_svfprintf_r>
  401fd2:	9b02      	ldr	r3, [sp, #8]
  401fd4:	2200      	movs	r2, #0
  401fd6:	701a      	strb	r2, [r3, #0]
  401fd8:	b01c      	add	sp, #112	; 0x70
  401fda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  401fde:	b003      	add	sp, #12
  401fe0:	4770      	bx	lr
  401fe2:	bf00      	nop
  401fe4:	20400020 	.word	0x20400020

00401fe8 <_svfprintf_r>:
  401fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fec:	b0c3      	sub	sp, #268	; 0x10c
  401fee:	460c      	mov	r4, r1
  401ff0:	910b      	str	r1, [sp, #44]	; 0x2c
  401ff2:	4692      	mov	sl, r2
  401ff4:	930f      	str	r3, [sp, #60]	; 0x3c
  401ff6:	900c      	str	r0, [sp, #48]	; 0x30
  401ff8:	f002 fa0e 	bl	404418 <_localeconv_r>
  401ffc:	6803      	ldr	r3, [r0, #0]
  401ffe:	931a      	str	r3, [sp, #104]	; 0x68
  402000:	4618      	mov	r0, r3
  402002:	f003 f8dd 	bl	4051c0 <strlen>
  402006:	89a3      	ldrh	r3, [r4, #12]
  402008:	9019      	str	r0, [sp, #100]	; 0x64
  40200a:	0619      	lsls	r1, r3, #24
  40200c:	d503      	bpl.n	402016 <_svfprintf_r+0x2e>
  40200e:	6923      	ldr	r3, [r4, #16]
  402010:	2b00      	cmp	r3, #0
  402012:	f001 8003 	beq.w	40301c <_svfprintf_r+0x1034>
  402016:	2300      	movs	r3, #0
  402018:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40201c:	9313      	str	r3, [sp, #76]	; 0x4c
  40201e:	9315      	str	r3, [sp, #84]	; 0x54
  402020:	9314      	str	r3, [sp, #80]	; 0x50
  402022:	9327      	str	r3, [sp, #156]	; 0x9c
  402024:	9326      	str	r3, [sp, #152]	; 0x98
  402026:	9318      	str	r3, [sp, #96]	; 0x60
  402028:	931b      	str	r3, [sp, #108]	; 0x6c
  40202a:	9309      	str	r3, [sp, #36]	; 0x24
  40202c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402030:	46c8      	mov	r8, r9
  402032:	9316      	str	r3, [sp, #88]	; 0x58
  402034:	9317      	str	r3, [sp, #92]	; 0x5c
  402036:	f89a 3000 	ldrb.w	r3, [sl]
  40203a:	4654      	mov	r4, sl
  40203c:	b1e3      	cbz	r3, 402078 <_svfprintf_r+0x90>
  40203e:	2b25      	cmp	r3, #37	; 0x25
  402040:	d102      	bne.n	402048 <_svfprintf_r+0x60>
  402042:	e019      	b.n	402078 <_svfprintf_r+0x90>
  402044:	2b25      	cmp	r3, #37	; 0x25
  402046:	d003      	beq.n	402050 <_svfprintf_r+0x68>
  402048:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40204c:	2b00      	cmp	r3, #0
  40204e:	d1f9      	bne.n	402044 <_svfprintf_r+0x5c>
  402050:	eba4 050a 	sub.w	r5, r4, sl
  402054:	b185      	cbz	r5, 402078 <_svfprintf_r+0x90>
  402056:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402058:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40205a:	f8c8 a000 	str.w	sl, [r8]
  40205e:	3301      	adds	r3, #1
  402060:	442a      	add	r2, r5
  402062:	2b07      	cmp	r3, #7
  402064:	f8c8 5004 	str.w	r5, [r8, #4]
  402068:	9227      	str	r2, [sp, #156]	; 0x9c
  40206a:	9326      	str	r3, [sp, #152]	; 0x98
  40206c:	dc7f      	bgt.n	40216e <_svfprintf_r+0x186>
  40206e:	f108 0808 	add.w	r8, r8, #8
  402072:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402074:	442b      	add	r3, r5
  402076:	9309      	str	r3, [sp, #36]	; 0x24
  402078:	7823      	ldrb	r3, [r4, #0]
  40207a:	2b00      	cmp	r3, #0
  40207c:	d07f      	beq.n	40217e <_svfprintf_r+0x196>
  40207e:	2300      	movs	r3, #0
  402080:	461a      	mov	r2, r3
  402082:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402086:	4619      	mov	r1, r3
  402088:	930d      	str	r3, [sp, #52]	; 0x34
  40208a:	469b      	mov	fp, r3
  40208c:	f04f 30ff 	mov.w	r0, #4294967295
  402090:	7863      	ldrb	r3, [r4, #1]
  402092:	900a      	str	r0, [sp, #40]	; 0x28
  402094:	f104 0a01 	add.w	sl, r4, #1
  402098:	f10a 0a01 	add.w	sl, sl, #1
  40209c:	f1a3 0020 	sub.w	r0, r3, #32
  4020a0:	2858      	cmp	r0, #88	; 0x58
  4020a2:	f200 83c1 	bhi.w	402828 <_svfprintf_r+0x840>
  4020a6:	e8df f010 	tbh	[pc, r0, lsl #1]
  4020aa:	0238      	.short	0x0238
  4020ac:	03bf03bf 	.word	0x03bf03bf
  4020b0:	03bf0240 	.word	0x03bf0240
  4020b4:	03bf03bf 	.word	0x03bf03bf
  4020b8:	03bf03bf 	.word	0x03bf03bf
  4020bc:	024503bf 	.word	0x024503bf
  4020c0:	03bf0203 	.word	0x03bf0203
  4020c4:	026b005d 	.word	0x026b005d
  4020c8:	028603bf 	.word	0x028603bf
  4020cc:	039d039d 	.word	0x039d039d
  4020d0:	039d039d 	.word	0x039d039d
  4020d4:	039d039d 	.word	0x039d039d
  4020d8:	039d039d 	.word	0x039d039d
  4020dc:	03bf039d 	.word	0x03bf039d
  4020e0:	03bf03bf 	.word	0x03bf03bf
  4020e4:	03bf03bf 	.word	0x03bf03bf
  4020e8:	03bf03bf 	.word	0x03bf03bf
  4020ec:	03bf03bf 	.word	0x03bf03bf
  4020f0:	033703bf 	.word	0x033703bf
  4020f4:	03bf0357 	.word	0x03bf0357
  4020f8:	03bf0357 	.word	0x03bf0357
  4020fc:	03bf03bf 	.word	0x03bf03bf
  402100:	039803bf 	.word	0x039803bf
  402104:	03bf03bf 	.word	0x03bf03bf
  402108:	03bf03ad 	.word	0x03bf03ad
  40210c:	03bf03bf 	.word	0x03bf03bf
  402110:	03bf03bf 	.word	0x03bf03bf
  402114:	03bf0259 	.word	0x03bf0259
  402118:	031e03bf 	.word	0x031e03bf
  40211c:	03bf03bf 	.word	0x03bf03bf
  402120:	03bf03bf 	.word	0x03bf03bf
  402124:	03bf03bf 	.word	0x03bf03bf
  402128:	03bf03bf 	.word	0x03bf03bf
  40212c:	03bf03bf 	.word	0x03bf03bf
  402130:	02db02c6 	.word	0x02db02c6
  402134:	03570357 	.word	0x03570357
  402138:	028b0357 	.word	0x028b0357
  40213c:	03bf02db 	.word	0x03bf02db
  402140:	029003bf 	.word	0x029003bf
  402144:	029d03bf 	.word	0x029d03bf
  402148:	02b401cc 	.word	0x02b401cc
  40214c:	03bf0208 	.word	0x03bf0208
  402150:	03bf01e1 	.word	0x03bf01e1
  402154:	03bf007e 	.word	0x03bf007e
  402158:	020d03bf 	.word	0x020d03bf
  40215c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40215e:	930f      	str	r3, [sp, #60]	; 0x3c
  402160:	4240      	negs	r0, r0
  402162:	900d      	str	r0, [sp, #52]	; 0x34
  402164:	f04b 0b04 	orr.w	fp, fp, #4
  402168:	f89a 3000 	ldrb.w	r3, [sl]
  40216c:	e794      	b.n	402098 <_svfprintf_r+0xb0>
  40216e:	aa25      	add	r2, sp, #148	; 0x94
  402170:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402172:	980c      	ldr	r0, [sp, #48]	; 0x30
  402174:	f003 f892 	bl	40529c <__ssprint_r>
  402178:	b940      	cbnz	r0, 40218c <_svfprintf_r+0x1a4>
  40217a:	46c8      	mov	r8, r9
  40217c:	e779      	b.n	402072 <_svfprintf_r+0x8a>
  40217e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402180:	b123      	cbz	r3, 40218c <_svfprintf_r+0x1a4>
  402182:	980c      	ldr	r0, [sp, #48]	; 0x30
  402184:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402186:	aa25      	add	r2, sp, #148	; 0x94
  402188:	f003 f888 	bl	40529c <__ssprint_r>
  40218c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40218e:	899b      	ldrh	r3, [r3, #12]
  402190:	f013 0f40 	tst.w	r3, #64	; 0x40
  402194:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402196:	bf18      	it	ne
  402198:	f04f 33ff 	movne.w	r3, #4294967295
  40219c:	9309      	str	r3, [sp, #36]	; 0x24
  40219e:	9809      	ldr	r0, [sp, #36]	; 0x24
  4021a0:	b043      	add	sp, #268	; 0x10c
  4021a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021a6:	f01b 0f20 	tst.w	fp, #32
  4021aa:	9311      	str	r3, [sp, #68]	; 0x44
  4021ac:	f040 81dd 	bne.w	40256a <_svfprintf_r+0x582>
  4021b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4021b2:	f01b 0f10 	tst.w	fp, #16
  4021b6:	4613      	mov	r3, r2
  4021b8:	f040 856e 	bne.w	402c98 <_svfprintf_r+0xcb0>
  4021bc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4021c0:	f000 856a 	beq.w	402c98 <_svfprintf_r+0xcb0>
  4021c4:	8814      	ldrh	r4, [r2, #0]
  4021c6:	3204      	adds	r2, #4
  4021c8:	2500      	movs	r5, #0
  4021ca:	2301      	movs	r3, #1
  4021cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4021ce:	2700      	movs	r7, #0
  4021d0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4021d4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4021d6:	1c4a      	adds	r2, r1, #1
  4021d8:	f000 8265 	beq.w	4026a6 <_svfprintf_r+0x6be>
  4021dc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4021e0:	9207      	str	r2, [sp, #28]
  4021e2:	ea54 0205 	orrs.w	r2, r4, r5
  4021e6:	f040 8264 	bne.w	4026b2 <_svfprintf_r+0x6ca>
  4021ea:	2900      	cmp	r1, #0
  4021ec:	f040 843c 	bne.w	402a68 <_svfprintf_r+0xa80>
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	f040 84d7 	bne.w	402ba4 <_svfprintf_r+0xbbc>
  4021f6:	f01b 0301 	ands.w	r3, fp, #1
  4021fa:	930e      	str	r3, [sp, #56]	; 0x38
  4021fc:	f000 8604 	beq.w	402e08 <_svfprintf_r+0xe20>
  402200:	ae42      	add	r6, sp, #264	; 0x108
  402202:	2330      	movs	r3, #48	; 0x30
  402204:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40220a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40220c:	4293      	cmp	r3, r2
  40220e:	bfb8      	it	lt
  402210:	4613      	movlt	r3, r2
  402212:	9308      	str	r3, [sp, #32]
  402214:	2300      	movs	r3, #0
  402216:	9312      	str	r3, [sp, #72]	; 0x48
  402218:	b117      	cbz	r7, 402220 <_svfprintf_r+0x238>
  40221a:	9b08      	ldr	r3, [sp, #32]
  40221c:	3301      	adds	r3, #1
  40221e:	9308      	str	r3, [sp, #32]
  402220:	9b07      	ldr	r3, [sp, #28]
  402222:	f013 0302 	ands.w	r3, r3, #2
  402226:	9310      	str	r3, [sp, #64]	; 0x40
  402228:	d002      	beq.n	402230 <_svfprintf_r+0x248>
  40222a:	9b08      	ldr	r3, [sp, #32]
  40222c:	3302      	adds	r3, #2
  40222e:	9308      	str	r3, [sp, #32]
  402230:	9b07      	ldr	r3, [sp, #28]
  402232:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402236:	f040 830e 	bne.w	402856 <_svfprintf_r+0x86e>
  40223a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40223c:	9a08      	ldr	r2, [sp, #32]
  40223e:	eba3 0b02 	sub.w	fp, r3, r2
  402242:	f1bb 0f00 	cmp.w	fp, #0
  402246:	f340 8306 	ble.w	402856 <_svfprintf_r+0x86e>
  40224a:	f1bb 0f10 	cmp.w	fp, #16
  40224e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402250:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402252:	dd29      	ble.n	4022a8 <_svfprintf_r+0x2c0>
  402254:	4643      	mov	r3, r8
  402256:	4621      	mov	r1, r4
  402258:	46a8      	mov	r8, r5
  40225a:	2710      	movs	r7, #16
  40225c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40225e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402260:	e006      	b.n	402270 <_svfprintf_r+0x288>
  402262:	f1ab 0b10 	sub.w	fp, fp, #16
  402266:	f1bb 0f10 	cmp.w	fp, #16
  40226a:	f103 0308 	add.w	r3, r3, #8
  40226e:	dd18      	ble.n	4022a2 <_svfprintf_r+0x2ba>
  402270:	3201      	adds	r2, #1
  402272:	48b7      	ldr	r0, [pc, #732]	; (402550 <_svfprintf_r+0x568>)
  402274:	9226      	str	r2, [sp, #152]	; 0x98
  402276:	3110      	adds	r1, #16
  402278:	2a07      	cmp	r2, #7
  40227a:	9127      	str	r1, [sp, #156]	; 0x9c
  40227c:	e883 0081 	stmia.w	r3, {r0, r7}
  402280:	ddef      	ble.n	402262 <_svfprintf_r+0x27a>
  402282:	aa25      	add	r2, sp, #148	; 0x94
  402284:	4629      	mov	r1, r5
  402286:	4620      	mov	r0, r4
  402288:	f003 f808 	bl	40529c <__ssprint_r>
  40228c:	2800      	cmp	r0, #0
  40228e:	f47f af7d 	bne.w	40218c <_svfprintf_r+0x1a4>
  402292:	f1ab 0b10 	sub.w	fp, fp, #16
  402296:	f1bb 0f10 	cmp.w	fp, #16
  40229a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40229c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40229e:	464b      	mov	r3, r9
  4022a0:	dce6      	bgt.n	402270 <_svfprintf_r+0x288>
  4022a2:	4645      	mov	r5, r8
  4022a4:	460c      	mov	r4, r1
  4022a6:	4698      	mov	r8, r3
  4022a8:	3201      	adds	r2, #1
  4022aa:	4ba9      	ldr	r3, [pc, #676]	; (402550 <_svfprintf_r+0x568>)
  4022ac:	9226      	str	r2, [sp, #152]	; 0x98
  4022ae:	445c      	add	r4, fp
  4022b0:	2a07      	cmp	r2, #7
  4022b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4022b4:	e888 0808 	stmia.w	r8, {r3, fp}
  4022b8:	f300 8498 	bgt.w	402bec <_svfprintf_r+0xc04>
  4022bc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4022c0:	f108 0808 	add.w	r8, r8, #8
  4022c4:	b177      	cbz	r7, 4022e4 <_svfprintf_r+0x2fc>
  4022c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022c8:	3301      	adds	r3, #1
  4022ca:	3401      	adds	r4, #1
  4022cc:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4022d0:	2201      	movs	r2, #1
  4022d2:	2b07      	cmp	r3, #7
  4022d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4022d6:	9326      	str	r3, [sp, #152]	; 0x98
  4022d8:	e888 0006 	stmia.w	r8, {r1, r2}
  4022dc:	f300 83db 	bgt.w	402a96 <_svfprintf_r+0xaae>
  4022e0:	f108 0808 	add.w	r8, r8, #8
  4022e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4022e6:	b16b      	cbz	r3, 402304 <_svfprintf_r+0x31c>
  4022e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022ea:	3301      	adds	r3, #1
  4022ec:	3402      	adds	r4, #2
  4022ee:	a91e      	add	r1, sp, #120	; 0x78
  4022f0:	2202      	movs	r2, #2
  4022f2:	2b07      	cmp	r3, #7
  4022f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4022f6:	9326      	str	r3, [sp, #152]	; 0x98
  4022f8:	e888 0006 	stmia.w	r8, {r1, r2}
  4022fc:	f300 83d6 	bgt.w	402aac <_svfprintf_r+0xac4>
  402300:	f108 0808 	add.w	r8, r8, #8
  402304:	2d80      	cmp	r5, #128	; 0x80
  402306:	f000 8315 	beq.w	402934 <_svfprintf_r+0x94c>
  40230a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40230c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40230e:	1a9f      	subs	r7, r3, r2
  402310:	2f00      	cmp	r7, #0
  402312:	dd36      	ble.n	402382 <_svfprintf_r+0x39a>
  402314:	2f10      	cmp	r7, #16
  402316:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402318:	4d8e      	ldr	r5, [pc, #568]	; (402554 <_svfprintf_r+0x56c>)
  40231a:	dd27      	ble.n	40236c <_svfprintf_r+0x384>
  40231c:	4642      	mov	r2, r8
  40231e:	4621      	mov	r1, r4
  402320:	46b0      	mov	r8, r6
  402322:	f04f 0b10 	mov.w	fp, #16
  402326:	462e      	mov	r6, r5
  402328:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40232a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40232c:	e004      	b.n	402338 <_svfprintf_r+0x350>
  40232e:	3f10      	subs	r7, #16
  402330:	2f10      	cmp	r7, #16
  402332:	f102 0208 	add.w	r2, r2, #8
  402336:	dd15      	ble.n	402364 <_svfprintf_r+0x37c>
  402338:	3301      	adds	r3, #1
  40233a:	3110      	adds	r1, #16
  40233c:	2b07      	cmp	r3, #7
  40233e:	9127      	str	r1, [sp, #156]	; 0x9c
  402340:	9326      	str	r3, [sp, #152]	; 0x98
  402342:	e882 0840 	stmia.w	r2, {r6, fp}
  402346:	ddf2      	ble.n	40232e <_svfprintf_r+0x346>
  402348:	aa25      	add	r2, sp, #148	; 0x94
  40234a:	4629      	mov	r1, r5
  40234c:	4620      	mov	r0, r4
  40234e:	f002 ffa5 	bl	40529c <__ssprint_r>
  402352:	2800      	cmp	r0, #0
  402354:	f47f af1a 	bne.w	40218c <_svfprintf_r+0x1a4>
  402358:	3f10      	subs	r7, #16
  40235a:	2f10      	cmp	r7, #16
  40235c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40235e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402360:	464a      	mov	r2, r9
  402362:	dce9      	bgt.n	402338 <_svfprintf_r+0x350>
  402364:	4635      	mov	r5, r6
  402366:	460c      	mov	r4, r1
  402368:	4646      	mov	r6, r8
  40236a:	4690      	mov	r8, r2
  40236c:	3301      	adds	r3, #1
  40236e:	443c      	add	r4, r7
  402370:	2b07      	cmp	r3, #7
  402372:	9427      	str	r4, [sp, #156]	; 0x9c
  402374:	9326      	str	r3, [sp, #152]	; 0x98
  402376:	e888 00a0 	stmia.w	r8, {r5, r7}
  40237a:	f300 8381 	bgt.w	402a80 <_svfprintf_r+0xa98>
  40237e:	f108 0808 	add.w	r8, r8, #8
  402382:	9b07      	ldr	r3, [sp, #28]
  402384:	05df      	lsls	r7, r3, #23
  402386:	f100 8268 	bmi.w	40285a <_svfprintf_r+0x872>
  40238a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40238c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40238e:	f8c8 6000 	str.w	r6, [r8]
  402392:	3301      	adds	r3, #1
  402394:	440c      	add	r4, r1
  402396:	2b07      	cmp	r3, #7
  402398:	9427      	str	r4, [sp, #156]	; 0x9c
  40239a:	f8c8 1004 	str.w	r1, [r8, #4]
  40239e:	9326      	str	r3, [sp, #152]	; 0x98
  4023a0:	f300 834d 	bgt.w	402a3e <_svfprintf_r+0xa56>
  4023a4:	f108 0808 	add.w	r8, r8, #8
  4023a8:	9b07      	ldr	r3, [sp, #28]
  4023aa:	075b      	lsls	r3, r3, #29
  4023ac:	d53a      	bpl.n	402424 <_svfprintf_r+0x43c>
  4023ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4023b0:	9a08      	ldr	r2, [sp, #32]
  4023b2:	1a9d      	subs	r5, r3, r2
  4023b4:	2d00      	cmp	r5, #0
  4023b6:	dd35      	ble.n	402424 <_svfprintf_r+0x43c>
  4023b8:	2d10      	cmp	r5, #16
  4023ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4023bc:	dd20      	ble.n	402400 <_svfprintf_r+0x418>
  4023be:	2610      	movs	r6, #16
  4023c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4023c2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4023c6:	e004      	b.n	4023d2 <_svfprintf_r+0x3ea>
  4023c8:	3d10      	subs	r5, #16
  4023ca:	2d10      	cmp	r5, #16
  4023cc:	f108 0808 	add.w	r8, r8, #8
  4023d0:	dd16      	ble.n	402400 <_svfprintf_r+0x418>
  4023d2:	3301      	adds	r3, #1
  4023d4:	4a5e      	ldr	r2, [pc, #376]	; (402550 <_svfprintf_r+0x568>)
  4023d6:	9326      	str	r3, [sp, #152]	; 0x98
  4023d8:	3410      	adds	r4, #16
  4023da:	2b07      	cmp	r3, #7
  4023dc:	9427      	str	r4, [sp, #156]	; 0x9c
  4023de:	e888 0044 	stmia.w	r8, {r2, r6}
  4023e2:	ddf1      	ble.n	4023c8 <_svfprintf_r+0x3e0>
  4023e4:	aa25      	add	r2, sp, #148	; 0x94
  4023e6:	4659      	mov	r1, fp
  4023e8:	4638      	mov	r0, r7
  4023ea:	f002 ff57 	bl	40529c <__ssprint_r>
  4023ee:	2800      	cmp	r0, #0
  4023f0:	f47f aecc 	bne.w	40218c <_svfprintf_r+0x1a4>
  4023f4:	3d10      	subs	r5, #16
  4023f6:	2d10      	cmp	r5, #16
  4023f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4023fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4023fc:	46c8      	mov	r8, r9
  4023fe:	dce8      	bgt.n	4023d2 <_svfprintf_r+0x3ea>
  402400:	3301      	adds	r3, #1
  402402:	4a53      	ldr	r2, [pc, #332]	; (402550 <_svfprintf_r+0x568>)
  402404:	9326      	str	r3, [sp, #152]	; 0x98
  402406:	442c      	add	r4, r5
  402408:	2b07      	cmp	r3, #7
  40240a:	9427      	str	r4, [sp, #156]	; 0x9c
  40240c:	e888 0024 	stmia.w	r8, {r2, r5}
  402410:	dd08      	ble.n	402424 <_svfprintf_r+0x43c>
  402412:	aa25      	add	r2, sp, #148	; 0x94
  402414:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402416:	980c      	ldr	r0, [sp, #48]	; 0x30
  402418:	f002 ff40 	bl	40529c <__ssprint_r>
  40241c:	2800      	cmp	r0, #0
  40241e:	f47f aeb5 	bne.w	40218c <_svfprintf_r+0x1a4>
  402422:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402424:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402428:	9908      	ldr	r1, [sp, #32]
  40242a:	428a      	cmp	r2, r1
  40242c:	bfac      	ite	ge
  40242e:	189b      	addge	r3, r3, r2
  402430:	185b      	addlt	r3, r3, r1
  402432:	9309      	str	r3, [sp, #36]	; 0x24
  402434:	2c00      	cmp	r4, #0
  402436:	f040 830d 	bne.w	402a54 <_svfprintf_r+0xa6c>
  40243a:	2300      	movs	r3, #0
  40243c:	9326      	str	r3, [sp, #152]	; 0x98
  40243e:	46c8      	mov	r8, r9
  402440:	e5f9      	b.n	402036 <_svfprintf_r+0x4e>
  402442:	9311      	str	r3, [sp, #68]	; 0x44
  402444:	f01b 0320 	ands.w	r3, fp, #32
  402448:	f040 81e3 	bne.w	402812 <_svfprintf_r+0x82a>
  40244c:	f01b 0210 	ands.w	r2, fp, #16
  402450:	f040 842e 	bne.w	402cb0 <_svfprintf_r+0xcc8>
  402454:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402458:	f000 842a 	beq.w	402cb0 <_svfprintf_r+0xcc8>
  40245c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40245e:	4613      	mov	r3, r2
  402460:	460a      	mov	r2, r1
  402462:	3204      	adds	r2, #4
  402464:	880c      	ldrh	r4, [r1, #0]
  402466:	920f      	str	r2, [sp, #60]	; 0x3c
  402468:	2500      	movs	r5, #0
  40246a:	e6b0      	b.n	4021ce <_svfprintf_r+0x1e6>
  40246c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40246e:	9311      	str	r3, [sp, #68]	; 0x44
  402470:	6816      	ldr	r6, [r2, #0]
  402472:	2400      	movs	r4, #0
  402474:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402478:	1d15      	adds	r5, r2, #4
  40247a:	2e00      	cmp	r6, #0
  40247c:	f000 86a7 	beq.w	4031ce <_svfprintf_r+0x11e6>
  402480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402482:	1c53      	adds	r3, r2, #1
  402484:	f000 8609 	beq.w	40309a <_svfprintf_r+0x10b2>
  402488:	4621      	mov	r1, r4
  40248a:	4630      	mov	r0, r6
  40248c:	f002 fa88 	bl	4049a0 <memchr>
  402490:	2800      	cmp	r0, #0
  402492:	f000 86e1 	beq.w	403258 <_svfprintf_r+0x1270>
  402496:	1b83      	subs	r3, r0, r6
  402498:	930e      	str	r3, [sp, #56]	; 0x38
  40249a:	940a      	str	r4, [sp, #40]	; 0x28
  40249c:	950f      	str	r5, [sp, #60]	; 0x3c
  40249e:	f8cd b01c 	str.w	fp, [sp, #28]
  4024a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4024a6:	9308      	str	r3, [sp, #32]
  4024a8:	9412      	str	r4, [sp, #72]	; 0x48
  4024aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4024ae:	e6b3      	b.n	402218 <_svfprintf_r+0x230>
  4024b0:	f89a 3000 	ldrb.w	r3, [sl]
  4024b4:	2201      	movs	r2, #1
  4024b6:	212b      	movs	r1, #43	; 0x2b
  4024b8:	e5ee      	b.n	402098 <_svfprintf_r+0xb0>
  4024ba:	f04b 0b20 	orr.w	fp, fp, #32
  4024be:	f89a 3000 	ldrb.w	r3, [sl]
  4024c2:	e5e9      	b.n	402098 <_svfprintf_r+0xb0>
  4024c4:	9311      	str	r3, [sp, #68]	; 0x44
  4024c6:	2a00      	cmp	r2, #0
  4024c8:	f040 8795 	bne.w	4033f6 <_svfprintf_r+0x140e>
  4024cc:	4b22      	ldr	r3, [pc, #136]	; (402558 <_svfprintf_r+0x570>)
  4024ce:	9318      	str	r3, [sp, #96]	; 0x60
  4024d0:	f01b 0f20 	tst.w	fp, #32
  4024d4:	f040 8111 	bne.w	4026fa <_svfprintf_r+0x712>
  4024d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4024da:	f01b 0f10 	tst.w	fp, #16
  4024de:	4613      	mov	r3, r2
  4024e0:	f040 83e1 	bne.w	402ca6 <_svfprintf_r+0xcbe>
  4024e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4024e8:	f000 83dd 	beq.w	402ca6 <_svfprintf_r+0xcbe>
  4024ec:	3304      	adds	r3, #4
  4024ee:	8814      	ldrh	r4, [r2, #0]
  4024f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4024f2:	2500      	movs	r5, #0
  4024f4:	f01b 0f01 	tst.w	fp, #1
  4024f8:	f000 810c 	beq.w	402714 <_svfprintf_r+0x72c>
  4024fc:	ea54 0305 	orrs.w	r3, r4, r5
  402500:	f000 8108 	beq.w	402714 <_svfprintf_r+0x72c>
  402504:	2330      	movs	r3, #48	; 0x30
  402506:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40250a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40250e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  402512:	f04b 0b02 	orr.w	fp, fp, #2
  402516:	2302      	movs	r3, #2
  402518:	e659      	b.n	4021ce <_svfprintf_r+0x1e6>
  40251a:	f89a 3000 	ldrb.w	r3, [sl]
  40251e:	2900      	cmp	r1, #0
  402520:	f47f adba 	bne.w	402098 <_svfprintf_r+0xb0>
  402524:	2201      	movs	r2, #1
  402526:	2120      	movs	r1, #32
  402528:	e5b6      	b.n	402098 <_svfprintf_r+0xb0>
  40252a:	f04b 0b01 	orr.w	fp, fp, #1
  40252e:	f89a 3000 	ldrb.w	r3, [sl]
  402532:	e5b1      	b.n	402098 <_svfprintf_r+0xb0>
  402534:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402536:	6823      	ldr	r3, [r4, #0]
  402538:	930d      	str	r3, [sp, #52]	; 0x34
  40253a:	4618      	mov	r0, r3
  40253c:	2800      	cmp	r0, #0
  40253e:	4623      	mov	r3, r4
  402540:	f103 0304 	add.w	r3, r3, #4
  402544:	f6ff ae0a 	blt.w	40215c <_svfprintf_r+0x174>
  402548:	930f      	str	r3, [sp, #60]	; 0x3c
  40254a:	f89a 3000 	ldrb.w	r3, [sl]
  40254e:	e5a3      	b.n	402098 <_svfprintf_r+0xb0>
  402550:	00407288 	.word	0x00407288
  402554:	00407298 	.word	0x00407298
  402558:	00407268 	.word	0x00407268
  40255c:	f04b 0b10 	orr.w	fp, fp, #16
  402560:	f01b 0f20 	tst.w	fp, #32
  402564:	9311      	str	r3, [sp, #68]	; 0x44
  402566:	f43f ae23 	beq.w	4021b0 <_svfprintf_r+0x1c8>
  40256a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40256c:	3507      	adds	r5, #7
  40256e:	f025 0307 	bic.w	r3, r5, #7
  402572:	f103 0208 	add.w	r2, r3, #8
  402576:	e9d3 4500 	ldrd	r4, r5, [r3]
  40257a:	920f      	str	r2, [sp, #60]	; 0x3c
  40257c:	2301      	movs	r3, #1
  40257e:	e626      	b.n	4021ce <_svfprintf_r+0x1e6>
  402580:	f89a 3000 	ldrb.w	r3, [sl]
  402584:	2b2a      	cmp	r3, #42	; 0x2a
  402586:	f10a 0401 	add.w	r4, sl, #1
  40258a:	f000 8727 	beq.w	4033dc <_svfprintf_r+0x13f4>
  40258e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402592:	2809      	cmp	r0, #9
  402594:	46a2      	mov	sl, r4
  402596:	f200 86ad 	bhi.w	4032f4 <_svfprintf_r+0x130c>
  40259a:	2300      	movs	r3, #0
  40259c:	461c      	mov	r4, r3
  40259e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4025a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4025a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4025aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4025ae:	2809      	cmp	r0, #9
  4025b0:	d9f5      	bls.n	40259e <_svfprintf_r+0x5b6>
  4025b2:	940a      	str	r4, [sp, #40]	; 0x28
  4025b4:	e572      	b.n	40209c <_svfprintf_r+0xb4>
  4025b6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4025ba:	f89a 3000 	ldrb.w	r3, [sl]
  4025be:	e56b      	b.n	402098 <_svfprintf_r+0xb0>
  4025c0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4025c4:	f89a 3000 	ldrb.w	r3, [sl]
  4025c8:	e566      	b.n	402098 <_svfprintf_r+0xb0>
  4025ca:	f89a 3000 	ldrb.w	r3, [sl]
  4025ce:	2b6c      	cmp	r3, #108	; 0x6c
  4025d0:	bf03      	ittte	eq
  4025d2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4025d6:	f04b 0b20 	orreq.w	fp, fp, #32
  4025da:	f10a 0a01 	addeq.w	sl, sl, #1
  4025de:	f04b 0b10 	orrne.w	fp, fp, #16
  4025e2:	e559      	b.n	402098 <_svfprintf_r+0xb0>
  4025e4:	2a00      	cmp	r2, #0
  4025e6:	f040 8711 	bne.w	40340c <_svfprintf_r+0x1424>
  4025ea:	f01b 0f20 	tst.w	fp, #32
  4025ee:	f040 84f9 	bne.w	402fe4 <_svfprintf_r+0xffc>
  4025f2:	f01b 0f10 	tst.w	fp, #16
  4025f6:	f040 84ac 	bne.w	402f52 <_svfprintf_r+0xf6a>
  4025fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4025fe:	f000 84a8 	beq.w	402f52 <_svfprintf_r+0xf6a>
  402602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402604:	6813      	ldr	r3, [r2, #0]
  402606:	3204      	adds	r2, #4
  402608:	920f      	str	r2, [sp, #60]	; 0x3c
  40260a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40260e:	801a      	strh	r2, [r3, #0]
  402610:	e511      	b.n	402036 <_svfprintf_r+0x4e>
  402612:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402614:	4bb3      	ldr	r3, [pc, #716]	; (4028e4 <_svfprintf_r+0x8fc>)
  402616:	680c      	ldr	r4, [r1, #0]
  402618:	9318      	str	r3, [sp, #96]	; 0x60
  40261a:	2230      	movs	r2, #48	; 0x30
  40261c:	2378      	movs	r3, #120	; 0x78
  40261e:	3104      	adds	r1, #4
  402620:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  402624:	9311      	str	r3, [sp, #68]	; 0x44
  402626:	f04b 0b02 	orr.w	fp, fp, #2
  40262a:	910f      	str	r1, [sp, #60]	; 0x3c
  40262c:	2500      	movs	r5, #0
  40262e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  402632:	2302      	movs	r3, #2
  402634:	e5cb      	b.n	4021ce <_svfprintf_r+0x1e6>
  402636:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402638:	9311      	str	r3, [sp, #68]	; 0x44
  40263a:	680a      	ldr	r2, [r1, #0]
  40263c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402640:	2300      	movs	r3, #0
  402642:	460a      	mov	r2, r1
  402644:	461f      	mov	r7, r3
  402646:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40264a:	3204      	adds	r2, #4
  40264c:	2301      	movs	r3, #1
  40264e:	9308      	str	r3, [sp, #32]
  402650:	f8cd b01c 	str.w	fp, [sp, #28]
  402654:	970a      	str	r7, [sp, #40]	; 0x28
  402656:	9712      	str	r7, [sp, #72]	; 0x48
  402658:	920f      	str	r2, [sp, #60]	; 0x3c
  40265a:	930e      	str	r3, [sp, #56]	; 0x38
  40265c:	ae28      	add	r6, sp, #160	; 0xa0
  40265e:	e5df      	b.n	402220 <_svfprintf_r+0x238>
  402660:	9311      	str	r3, [sp, #68]	; 0x44
  402662:	2a00      	cmp	r2, #0
  402664:	f040 86ea 	bne.w	40343c <_svfprintf_r+0x1454>
  402668:	f01b 0f20 	tst.w	fp, #32
  40266c:	d15d      	bne.n	40272a <_svfprintf_r+0x742>
  40266e:	f01b 0f10 	tst.w	fp, #16
  402672:	f040 8308 	bne.w	402c86 <_svfprintf_r+0xc9e>
  402676:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40267a:	f000 8304 	beq.w	402c86 <_svfprintf_r+0xc9e>
  40267e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402680:	f9b1 4000 	ldrsh.w	r4, [r1]
  402684:	3104      	adds	r1, #4
  402686:	17e5      	asrs	r5, r4, #31
  402688:	4622      	mov	r2, r4
  40268a:	462b      	mov	r3, r5
  40268c:	910f      	str	r1, [sp, #60]	; 0x3c
  40268e:	2a00      	cmp	r2, #0
  402690:	f173 0300 	sbcs.w	r3, r3, #0
  402694:	db58      	blt.n	402748 <_svfprintf_r+0x760>
  402696:	990a      	ldr	r1, [sp, #40]	; 0x28
  402698:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40269c:	1c4a      	adds	r2, r1, #1
  40269e:	f04f 0301 	mov.w	r3, #1
  4026a2:	f47f ad9b 	bne.w	4021dc <_svfprintf_r+0x1f4>
  4026a6:	ea54 0205 	orrs.w	r2, r4, r5
  4026aa:	f000 81df 	beq.w	402a6c <_svfprintf_r+0xa84>
  4026ae:	f8cd b01c 	str.w	fp, [sp, #28]
  4026b2:	2b01      	cmp	r3, #1
  4026b4:	f000 827b 	beq.w	402bae <_svfprintf_r+0xbc6>
  4026b8:	2b02      	cmp	r3, #2
  4026ba:	f040 8206 	bne.w	402aca <_svfprintf_r+0xae2>
  4026be:	9818      	ldr	r0, [sp, #96]	; 0x60
  4026c0:	464e      	mov	r6, r9
  4026c2:	0923      	lsrs	r3, r4, #4
  4026c4:	f004 010f 	and.w	r1, r4, #15
  4026c8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4026cc:	092a      	lsrs	r2, r5, #4
  4026ce:	461c      	mov	r4, r3
  4026d0:	4615      	mov	r5, r2
  4026d2:	5c43      	ldrb	r3, [r0, r1]
  4026d4:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4026d8:	ea54 0305 	orrs.w	r3, r4, r5
  4026dc:	d1f1      	bne.n	4026c2 <_svfprintf_r+0x6da>
  4026de:	eba9 0306 	sub.w	r3, r9, r6
  4026e2:	930e      	str	r3, [sp, #56]	; 0x38
  4026e4:	e590      	b.n	402208 <_svfprintf_r+0x220>
  4026e6:	9311      	str	r3, [sp, #68]	; 0x44
  4026e8:	2a00      	cmp	r2, #0
  4026ea:	f040 86a3 	bne.w	403434 <_svfprintf_r+0x144c>
  4026ee:	4b7e      	ldr	r3, [pc, #504]	; (4028e8 <_svfprintf_r+0x900>)
  4026f0:	9318      	str	r3, [sp, #96]	; 0x60
  4026f2:	f01b 0f20 	tst.w	fp, #32
  4026f6:	f43f aeef 	beq.w	4024d8 <_svfprintf_r+0x4f0>
  4026fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4026fc:	3507      	adds	r5, #7
  4026fe:	f025 0307 	bic.w	r3, r5, #7
  402702:	f103 0208 	add.w	r2, r3, #8
  402706:	f01b 0f01 	tst.w	fp, #1
  40270a:	920f      	str	r2, [sp, #60]	; 0x3c
  40270c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402710:	f47f aef4 	bne.w	4024fc <_svfprintf_r+0x514>
  402714:	2302      	movs	r3, #2
  402716:	e55a      	b.n	4021ce <_svfprintf_r+0x1e6>
  402718:	9311      	str	r3, [sp, #68]	; 0x44
  40271a:	2a00      	cmp	r2, #0
  40271c:	f040 8686 	bne.w	40342c <_svfprintf_r+0x1444>
  402720:	f04b 0b10 	orr.w	fp, fp, #16
  402724:	f01b 0f20 	tst.w	fp, #32
  402728:	d0a1      	beq.n	40266e <_svfprintf_r+0x686>
  40272a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40272c:	3507      	adds	r5, #7
  40272e:	f025 0507 	bic.w	r5, r5, #7
  402732:	e9d5 2300 	ldrd	r2, r3, [r5]
  402736:	2a00      	cmp	r2, #0
  402738:	f105 0108 	add.w	r1, r5, #8
  40273c:	461d      	mov	r5, r3
  40273e:	f173 0300 	sbcs.w	r3, r3, #0
  402742:	910f      	str	r1, [sp, #60]	; 0x3c
  402744:	4614      	mov	r4, r2
  402746:	daa6      	bge.n	402696 <_svfprintf_r+0x6ae>
  402748:	272d      	movs	r7, #45	; 0x2d
  40274a:	4264      	negs	r4, r4
  40274c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402750:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402754:	2301      	movs	r3, #1
  402756:	e53d      	b.n	4021d4 <_svfprintf_r+0x1ec>
  402758:	9311      	str	r3, [sp, #68]	; 0x44
  40275a:	2a00      	cmp	r2, #0
  40275c:	f040 8662 	bne.w	403424 <_svfprintf_r+0x143c>
  402760:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402762:	3507      	adds	r5, #7
  402764:	f025 0307 	bic.w	r3, r5, #7
  402768:	f103 0208 	add.w	r2, r3, #8
  40276c:	920f      	str	r2, [sp, #60]	; 0x3c
  40276e:	681a      	ldr	r2, [r3, #0]
  402770:	9215      	str	r2, [sp, #84]	; 0x54
  402772:	685b      	ldr	r3, [r3, #4]
  402774:	9314      	str	r3, [sp, #80]	; 0x50
  402776:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402778:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40277a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40277e:	4628      	mov	r0, r5
  402780:	4621      	mov	r1, r4
  402782:	f04f 32ff 	mov.w	r2, #4294967295
  402786:	4b59      	ldr	r3, [pc, #356]	; (4028ec <_svfprintf_r+0x904>)
  402788:	f003 fe4e 	bl	406428 <__aeabi_dcmpun>
  40278c:	2800      	cmp	r0, #0
  40278e:	f040 834a 	bne.w	402e26 <_svfprintf_r+0xe3e>
  402792:	4628      	mov	r0, r5
  402794:	4621      	mov	r1, r4
  402796:	f04f 32ff 	mov.w	r2, #4294967295
  40279a:	4b54      	ldr	r3, [pc, #336]	; (4028ec <_svfprintf_r+0x904>)
  40279c:	f003 fe26 	bl	4063ec <__aeabi_dcmple>
  4027a0:	2800      	cmp	r0, #0
  4027a2:	f040 8340 	bne.w	402e26 <_svfprintf_r+0xe3e>
  4027a6:	a815      	add	r0, sp, #84	; 0x54
  4027a8:	c80d      	ldmia	r0, {r0, r2, r3}
  4027aa:	9914      	ldr	r1, [sp, #80]	; 0x50
  4027ac:	f003 fe14 	bl	4063d8 <__aeabi_dcmplt>
  4027b0:	2800      	cmp	r0, #0
  4027b2:	f040 8530 	bne.w	403216 <_svfprintf_r+0x122e>
  4027b6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4027ba:	4e4d      	ldr	r6, [pc, #308]	; (4028f0 <_svfprintf_r+0x908>)
  4027bc:	4b4d      	ldr	r3, [pc, #308]	; (4028f4 <_svfprintf_r+0x90c>)
  4027be:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4027c2:	9007      	str	r0, [sp, #28]
  4027c4:	9811      	ldr	r0, [sp, #68]	; 0x44
  4027c6:	2203      	movs	r2, #3
  4027c8:	2100      	movs	r1, #0
  4027ca:	9208      	str	r2, [sp, #32]
  4027cc:	910a      	str	r1, [sp, #40]	; 0x28
  4027ce:	2847      	cmp	r0, #71	; 0x47
  4027d0:	bfd8      	it	le
  4027d2:	461e      	movle	r6, r3
  4027d4:	920e      	str	r2, [sp, #56]	; 0x38
  4027d6:	9112      	str	r1, [sp, #72]	; 0x48
  4027d8:	e51e      	b.n	402218 <_svfprintf_r+0x230>
  4027da:	f04b 0b08 	orr.w	fp, fp, #8
  4027de:	f89a 3000 	ldrb.w	r3, [sl]
  4027e2:	e459      	b.n	402098 <_svfprintf_r+0xb0>
  4027e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4027e8:	2300      	movs	r3, #0
  4027ea:	461c      	mov	r4, r3
  4027ec:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4027f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4027f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4027f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4027fc:	2809      	cmp	r0, #9
  4027fe:	d9f5      	bls.n	4027ec <_svfprintf_r+0x804>
  402800:	940d      	str	r4, [sp, #52]	; 0x34
  402802:	e44b      	b.n	40209c <_svfprintf_r+0xb4>
  402804:	f04b 0b10 	orr.w	fp, fp, #16
  402808:	9311      	str	r3, [sp, #68]	; 0x44
  40280a:	f01b 0320 	ands.w	r3, fp, #32
  40280e:	f43f ae1d 	beq.w	40244c <_svfprintf_r+0x464>
  402812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402814:	3507      	adds	r5, #7
  402816:	f025 0307 	bic.w	r3, r5, #7
  40281a:	f103 0208 	add.w	r2, r3, #8
  40281e:	e9d3 4500 	ldrd	r4, r5, [r3]
  402822:	920f      	str	r2, [sp, #60]	; 0x3c
  402824:	2300      	movs	r3, #0
  402826:	e4d2      	b.n	4021ce <_svfprintf_r+0x1e6>
  402828:	9311      	str	r3, [sp, #68]	; 0x44
  40282a:	2a00      	cmp	r2, #0
  40282c:	f040 85e7 	bne.w	4033fe <_svfprintf_r+0x1416>
  402830:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402832:	2a00      	cmp	r2, #0
  402834:	f43f aca3 	beq.w	40217e <_svfprintf_r+0x196>
  402838:	2300      	movs	r3, #0
  40283a:	2101      	movs	r1, #1
  40283c:	461f      	mov	r7, r3
  40283e:	9108      	str	r1, [sp, #32]
  402840:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402844:	f8cd b01c 	str.w	fp, [sp, #28]
  402848:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40284c:	930a      	str	r3, [sp, #40]	; 0x28
  40284e:	9312      	str	r3, [sp, #72]	; 0x48
  402850:	910e      	str	r1, [sp, #56]	; 0x38
  402852:	ae28      	add	r6, sp, #160	; 0xa0
  402854:	e4e4      	b.n	402220 <_svfprintf_r+0x238>
  402856:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402858:	e534      	b.n	4022c4 <_svfprintf_r+0x2dc>
  40285a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40285c:	2b65      	cmp	r3, #101	; 0x65
  40285e:	f340 80a7 	ble.w	4029b0 <_svfprintf_r+0x9c8>
  402862:	a815      	add	r0, sp, #84	; 0x54
  402864:	c80d      	ldmia	r0, {r0, r2, r3}
  402866:	9914      	ldr	r1, [sp, #80]	; 0x50
  402868:	f003 fdac 	bl	4063c4 <__aeabi_dcmpeq>
  40286c:	2800      	cmp	r0, #0
  40286e:	f000 8150 	beq.w	402b12 <_svfprintf_r+0xb2a>
  402872:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402874:	4a20      	ldr	r2, [pc, #128]	; (4028f8 <_svfprintf_r+0x910>)
  402876:	f8c8 2000 	str.w	r2, [r8]
  40287a:	3301      	adds	r3, #1
  40287c:	3401      	adds	r4, #1
  40287e:	2201      	movs	r2, #1
  402880:	2b07      	cmp	r3, #7
  402882:	9427      	str	r4, [sp, #156]	; 0x9c
  402884:	9326      	str	r3, [sp, #152]	; 0x98
  402886:	f8c8 2004 	str.w	r2, [r8, #4]
  40288a:	f300 836a 	bgt.w	402f62 <_svfprintf_r+0xf7a>
  40288e:	f108 0808 	add.w	r8, r8, #8
  402892:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402896:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402898:	4293      	cmp	r3, r2
  40289a:	db03      	blt.n	4028a4 <_svfprintf_r+0x8bc>
  40289c:	9b07      	ldr	r3, [sp, #28]
  40289e:	07dd      	lsls	r5, r3, #31
  4028a0:	f57f ad82 	bpl.w	4023a8 <_svfprintf_r+0x3c0>
  4028a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028a6:	9919      	ldr	r1, [sp, #100]	; 0x64
  4028a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4028aa:	f8c8 2000 	str.w	r2, [r8]
  4028ae:	3301      	adds	r3, #1
  4028b0:	440c      	add	r4, r1
  4028b2:	2b07      	cmp	r3, #7
  4028b4:	f8c8 1004 	str.w	r1, [r8, #4]
  4028b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4028ba:	9326      	str	r3, [sp, #152]	; 0x98
  4028bc:	f300 839e 	bgt.w	402ffc <_svfprintf_r+0x1014>
  4028c0:	f108 0808 	add.w	r8, r8, #8
  4028c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4028c6:	1e5e      	subs	r6, r3, #1
  4028c8:	2e00      	cmp	r6, #0
  4028ca:	f77f ad6d 	ble.w	4023a8 <_svfprintf_r+0x3c0>
  4028ce:	2e10      	cmp	r6, #16
  4028d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028d2:	4d0a      	ldr	r5, [pc, #40]	; (4028fc <_svfprintf_r+0x914>)
  4028d4:	f340 81f5 	ble.w	402cc2 <_svfprintf_r+0xcda>
  4028d8:	4622      	mov	r2, r4
  4028da:	2710      	movs	r7, #16
  4028dc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4028e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4028e2:	e013      	b.n	40290c <_svfprintf_r+0x924>
  4028e4:	00407268 	.word	0x00407268
  4028e8:	00407254 	.word	0x00407254
  4028ec:	7fefffff 	.word	0x7fefffff
  4028f0:	00407248 	.word	0x00407248
  4028f4:	00407244 	.word	0x00407244
  4028f8:	00407284 	.word	0x00407284
  4028fc:	00407298 	.word	0x00407298
  402900:	f108 0808 	add.w	r8, r8, #8
  402904:	3e10      	subs	r6, #16
  402906:	2e10      	cmp	r6, #16
  402908:	f340 81da 	ble.w	402cc0 <_svfprintf_r+0xcd8>
  40290c:	3301      	adds	r3, #1
  40290e:	3210      	adds	r2, #16
  402910:	2b07      	cmp	r3, #7
  402912:	9227      	str	r2, [sp, #156]	; 0x9c
  402914:	9326      	str	r3, [sp, #152]	; 0x98
  402916:	e888 00a0 	stmia.w	r8, {r5, r7}
  40291a:	ddf1      	ble.n	402900 <_svfprintf_r+0x918>
  40291c:	aa25      	add	r2, sp, #148	; 0x94
  40291e:	4621      	mov	r1, r4
  402920:	4658      	mov	r0, fp
  402922:	f002 fcbb 	bl	40529c <__ssprint_r>
  402926:	2800      	cmp	r0, #0
  402928:	f47f ac30 	bne.w	40218c <_svfprintf_r+0x1a4>
  40292c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40292e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402930:	46c8      	mov	r8, r9
  402932:	e7e7      	b.n	402904 <_svfprintf_r+0x91c>
  402934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402936:	9a08      	ldr	r2, [sp, #32]
  402938:	1a9f      	subs	r7, r3, r2
  40293a:	2f00      	cmp	r7, #0
  40293c:	f77f ace5 	ble.w	40230a <_svfprintf_r+0x322>
  402940:	2f10      	cmp	r7, #16
  402942:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402944:	4db6      	ldr	r5, [pc, #728]	; (402c20 <_svfprintf_r+0xc38>)
  402946:	dd27      	ble.n	402998 <_svfprintf_r+0x9b0>
  402948:	4642      	mov	r2, r8
  40294a:	4621      	mov	r1, r4
  40294c:	46b0      	mov	r8, r6
  40294e:	f04f 0b10 	mov.w	fp, #16
  402952:	462e      	mov	r6, r5
  402954:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402956:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402958:	e004      	b.n	402964 <_svfprintf_r+0x97c>
  40295a:	3f10      	subs	r7, #16
  40295c:	2f10      	cmp	r7, #16
  40295e:	f102 0208 	add.w	r2, r2, #8
  402962:	dd15      	ble.n	402990 <_svfprintf_r+0x9a8>
  402964:	3301      	adds	r3, #1
  402966:	3110      	adds	r1, #16
  402968:	2b07      	cmp	r3, #7
  40296a:	9127      	str	r1, [sp, #156]	; 0x9c
  40296c:	9326      	str	r3, [sp, #152]	; 0x98
  40296e:	e882 0840 	stmia.w	r2, {r6, fp}
  402972:	ddf2      	ble.n	40295a <_svfprintf_r+0x972>
  402974:	aa25      	add	r2, sp, #148	; 0x94
  402976:	4629      	mov	r1, r5
  402978:	4620      	mov	r0, r4
  40297a:	f002 fc8f 	bl	40529c <__ssprint_r>
  40297e:	2800      	cmp	r0, #0
  402980:	f47f ac04 	bne.w	40218c <_svfprintf_r+0x1a4>
  402984:	3f10      	subs	r7, #16
  402986:	2f10      	cmp	r7, #16
  402988:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40298a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40298c:	464a      	mov	r2, r9
  40298e:	dce9      	bgt.n	402964 <_svfprintf_r+0x97c>
  402990:	4635      	mov	r5, r6
  402992:	460c      	mov	r4, r1
  402994:	4646      	mov	r6, r8
  402996:	4690      	mov	r8, r2
  402998:	3301      	adds	r3, #1
  40299a:	443c      	add	r4, r7
  40299c:	2b07      	cmp	r3, #7
  40299e:	9427      	str	r4, [sp, #156]	; 0x9c
  4029a0:	9326      	str	r3, [sp, #152]	; 0x98
  4029a2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4029a6:	f300 8232 	bgt.w	402e0e <_svfprintf_r+0xe26>
  4029aa:	f108 0808 	add.w	r8, r8, #8
  4029ae:	e4ac      	b.n	40230a <_svfprintf_r+0x322>
  4029b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4029b2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4029b4:	2b01      	cmp	r3, #1
  4029b6:	f340 81fe 	ble.w	402db6 <_svfprintf_r+0xdce>
  4029ba:	3701      	adds	r7, #1
  4029bc:	3401      	adds	r4, #1
  4029be:	2301      	movs	r3, #1
  4029c0:	2f07      	cmp	r7, #7
  4029c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4029c4:	9726      	str	r7, [sp, #152]	; 0x98
  4029c6:	f8c8 6000 	str.w	r6, [r8]
  4029ca:	f8c8 3004 	str.w	r3, [r8, #4]
  4029ce:	f300 8203 	bgt.w	402dd8 <_svfprintf_r+0xdf0>
  4029d2:	f108 0808 	add.w	r8, r8, #8
  4029d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4029d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4029da:	f8c8 3000 	str.w	r3, [r8]
  4029de:	3701      	adds	r7, #1
  4029e0:	4414      	add	r4, r2
  4029e2:	2f07      	cmp	r7, #7
  4029e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4029e6:	9726      	str	r7, [sp, #152]	; 0x98
  4029e8:	f8c8 2004 	str.w	r2, [r8, #4]
  4029ec:	f300 8200 	bgt.w	402df0 <_svfprintf_r+0xe08>
  4029f0:	f108 0808 	add.w	r8, r8, #8
  4029f4:	a815      	add	r0, sp, #84	; 0x54
  4029f6:	c80d      	ldmia	r0, {r0, r2, r3}
  4029f8:	9914      	ldr	r1, [sp, #80]	; 0x50
  4029fa:	f003 fce3 	bl	4063c4 <__aeabi_dcmpeq>
  4029fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402a00:	2800      	cmp	r0, #0
  402a02:	f040 8101 	bne.w	402c08 <_svfprintf_r+0xc20>
  402a06:	3b01      	subs	r3, #1
  402a08:	3701      	adds	r7, #1
  402a0a:	3601      	adds	r6, #1
  402a0c:	441c      	add	r4, r3
  402a0e:	2f07      	cmp	r7, #7
  402a10:	9726      	str	r7, [sp, #152]	; 0x98
  402a12:	9427      	str	r4, [sp, #156]	; 0x9c
  402a14:	f8c8 6000 	str.w	r6, [r8]
  402a18:	f8c8 3004 	str.w	r3, [r8, #4]
  402a1c:	f300 8127 	bgt.w	402c6e <_svfprintf_r+0xc86>
  402a20:	f108 0808 	add.w	r8, r8, #8
  402a24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402a26:	f8c8 2004 	str.w	r2, [r8, #4]
  402a2a:	3701      	adds	r7, #1
  402a2c:	4414      	add	r4, r2
  402a2e:	ab21      	add	r3, sp, #132	; 0x84
  402a30:	2f07      	cmp	r7, #7
  402a32:	9427      	str	r4, [sp, #156]	; 0x9c
  402a34:	9726      	str	r7, [sp, #152]	; 0x98
  402a36:	f8c8 3000 	str.w	r3, [r8]
  402a3a:	f77f acb3 	ble.w	4023a4 <_svfprintf_r+0x3bc>
  402a3e:	aa25      	add	r2, sp, #148	; 0x94
  402a40:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a42:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a44:	f002 fc2a 	bl	40529c <__ssprint_r>
  402a48:	2800      	cmp	r0, #0
  402a4a:	f47f ab9f 	bne.w	40218c <_svfprintf_r+0x1a4>
  402a4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a50:	46c8      	mov	r8, r9
  402a52:	e4a9      	b.n	4023a8 <_svfprintf_r+0x3c0>
  402a54:	aa25      	add	r2, sp, #148	; 0x94
  402a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a58:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a5a:	f002 fc1f 	bl	40529c <__ssprint_r>
  402a5e:	2800      	cmp	r0, #0
  402a60:	f43f aceb 	beq.w	40243a <_svfprintf_r+0x452>
  402a64:	f7ff bb92 	b.w	40218c <_svfprintf_r+0x1a4>
  402a68:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402a6c:	2b01      	cmp	r3, #1
  402a6e:	f000 8134 	beq.w	402cda <_svfprintf_r+0xcf2>
  402a72:	2b02      	cmp	r3, #2
  402a74:	d125      	bne.n	402ac2 <_svfprintf_r+0xada>
  402a76:	f8cd b01c 	str.w	fp, [sp, #28]
  402a7a:	2400      	movs	r4, #0
  402a7c:	2500      	movs	r5, #0
  402a7e:	e61e      	b.n	4026be <_svfprintf_r+0x6d6>
  402a80:	aa25      	add	r2, sp, #148	; 0x94
  402a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a84:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a86:	f002 fc09 	bl	40529c <__ssprint_r>
  402a8a:	2800      	cmp	r0, #0
  402a8c:	f47f ab7e 	bne.w	40218c <_svfprintf_r+0x1a4>
  402a90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a92:	46c8      	mov	r8, r9
  402a94:	e475      	b.n	402382 <_svfprintf_r+0x39a>
  402a96:	aa25      	add	r2, sp, #148	; 0x94
  402a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a9c:	f002 fbfe 	bl	40529c <__ssprint_r>
  402aa0:	2800      	cmp	r0, #0
  402aa2:	f47f ab73 	bne.w	40218c <_svfprintf_r+0x1a4>
  402aa6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402aa8:	46c8      	mov	r8, r9
  402aaa:	e41b      	b.n	4022e4 <_svfprintf_r+0x2fc>
  402aac:	aa25      	add	r2, sp, #148	; 0x94
  402aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ab0:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ab2:	f002 fbf3 	bl	40529c <__ssprint_r>
  402ab6:	2800      	cmp	r0, #0
  402ab8:	f47f ab68 	bne.w	40218c <_svfprintf_r+0x1a4>
  402abc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402abe:	46c8      	mov	r8, r9
  402ac0:	e420      	b.n	402304 <_svfprintf_r+0x31c>
  402ac2:	f8cd b01c 	str.w	fp, [sp, #28]
  402ac6:	2400      	movs	r4, #0
  402ac8:	2500      	movs	r5, #0
  402aca:	4649      	mov	r1, r9
  402acc:	e000      	b.n	402ad0 <_svfprintf_r+0xae8>
  402ace:	4631      	mov	r1, r6
  402ad0:	08e2      	lsrs	r2, r4, #3
  402ad2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402ad6:	08e8      	lsrs	r0, r5, #3
  402ad8:	f004 0307 	and.w	r3, r4, #7
  402adc:	4605      	mov	r5, r0
  402ade:	4614      	mov	r4, r2
  402ae0:	3330      	adds	r3, #48	; 0x30
  402ae2:	ea54 0205 	orrs.w	r2, r4, r5
  402ae6:	f801 3c01 	strb.w	r3, [r1, #-1]
  402aea:	f101 36ff 	add.w	r6, r1, #4294967295
  402aee:	d1ee      	bne.n	402ace <_svfprintf_r+0xae6>
  402af0:	9a07      	ldr	r2, [sp, #28]
  402af2:	07d2      	lsls	r2, r2, #31
  402af4:	f57f adf3 	bpl.w	4026de <_svfprintf_r+0x6f6>
  402af8:	2b30      	cmp	r3, #48	; 0x30
  402afa:	f43f adf0 	beq.w	4026de <_svfprintf_r+0x6f6>
  402afe:	3902      	subs	r1, #2
  402b00:	2330      	movs	r3, #48	; 0x30
  402b02:	f806 3c01 	strb.w	r3, [r6, #-1]
  402b06:	eba9 0301 	sub.w	r3, r9, r1
  402b0a:	930e      	str	r3, [sp, #56]	; 0x38
  402b0c:	460e      	mov	r6, r1
  402b0e:	f7ff bb7b 	b.w	402208 <_svfprintf_r+0x220>
  402b12:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402b14:	2900      	cmp	r1, #0
  402b16:	f340 822e 	ble.w	402f76 <_svfprintf_r+0xf8e>
  402b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402b1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402b1e:	4293      	cmp	r3, r2
  402b20:	bfa8      	it	ge
  402b22:	4613      	movge	r3, r2
  402b24:	2b00      	cmp	r3, #0
  402b26:	461f      	mov	r7, r3
  402b28:	dd0d      	ble.n	402b46 <_svfprintf_r+0xb5e>
  402b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b2c:	f8c8 6000 	str.w	r6, [r8]
  402b30:	3301      	adds	r3, #1
  402b32:	443c      	add	r4, r7
  402b34:	2b07      	cmp	r3, #7
  402b36:	9427      	str	r4, [sp, #156]	; 0x9c
  402b38:	f8c8 7004 	str.w	r7, [r8, #4]
  402b3c:	9326      	str	r3, [sp, #152]	; 0x98
  402b3e:	f300 831f 	bgt.w	403180 <_svfprintf_r+0x1198>
  402b42:	f108 0808 	add.w	r8, r8, #8
  402b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402b48:	2f00      	cmp	r7, #0
  402b4a:	bfa8      	it	ge
  402b4c:	1bdb      	subge	r3, r3, r7
  402b4e:	2b00      	cmp	r3, #0
  402b50:	461f      	mov	r7, r3
  402b52:	f340 80d6 	ble.w	402d02 <_svfprintf_r+0xd1a>
  402b56:	2f10      	cmp	r7, #16
  402b58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b5a:	4d31      	ldr	r5, [pc, #196]	; (402c20 <_svfprintf_r+0xc38>)
  402b5c:	f340 81ed 	ble.w	402f3a <_svfprintf_r+0xf52>
  402b60:	4642      	mov	r2, r8
  402b62:	4621      	mov	r1, r4
  402b64:	46b0      	mov	r8, r6
  402b66:	f04f 0b10 	mov.w	fp, #16
  402b6a:	462e      	mov	r6, r5
  402b6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402b6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402b70:	e004      	b.n	402b7c <_svfprintf_r+0xb94>
  402b72:	3208      	adds	r2, #8
  402b74:	3f10      	subs	r7, #16
  402b76:	2f10      	cmp	r7, #16
  402b78:	f340 81db 	ble.w	402f32 <_svfprintf_r+0xf4a>
  402b7c:	3301      	adds	r3, #1
  402b7e:	3110      	adds	r1, #16
  402b80:	2b07      	cmp	r3, #7
  402b82:	9127      	str	r1, [sp, #156]	; 0x9c
  402b84:	9326      	str	r3, [sp, #152]	; 0x98
  402b86:	e882 0840 	stmia.w	r2, {r6, fp}
  402b8a:	ddf2      	ble.n	402b72 <_svfprintf_r+0xb8a>
  402b8c:	aa25      	add	r2, sp, #148	; 0x94
  402b8e:	4629      	mov	r1, r5
  402b90:	4620      	mov	r0, r4
  402b92:	f002 fb83 	bl	40529c <__ssprint_r>
  402b96:	2800      	cmp	r0, #0
  402b98:	f47f aaf8 	bne.w	40218c <_svfprintf_r+0x1a4>
  402b9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402b9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ba0:	464a      	mov	r2, r9
  402ba2:	e7e7      	b.n	402b74 <_svfprintf_r+0xb8c>
  402ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ba6:	930e      	str	r3, [sp, #56]	; 0x38
  402ba8:	464e      	mov	r6, r9
  402baa:	f7ff bb2d 	b.w	402208 <_svfprintf_r+0x220>
  402bae:	2d00      	cmp	r5, #0
  402bb0:	bf08      	it	eq
  402bb2:	2c0a      	cmpeq	r4, #10
  402bb4:	f0c0 808f 	bcc.w	402cd6 <_svfprintf_r+0xcee>
  402bb8:	464e      	mov	r6, r9
  402bba:	4620      	mov	r0, r4
  402bbc:	4629      	mov	r1, r5
  402bbe:	220a      	movs	r2, #10
  402bc0:	2300      	movs	r3, #0
  402bc2:	f003 fc6f 	bl	4064a4 <__aeabi_uldivmod>
  402bc6:	3230      	adds	r2, #48	; 0x30
  402bc8:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402bcc:	4620      	mov	r0, r4
  402bce:	4629      	mov	r1, r5
  402bd0:	2300      	movs	r3, #0
  402bd2:	220a      	movs	r2, #10
  402bd4:	f003 fc66 	bl	4064a4 <__aeabi_uldivmod>
  402bd8:	4604      	mov	r4, r0
  402bda:	460d      	mov	r5, r1
  402bdc:	ea54 0305 	orrs.w	r3, r4, r5
  402be0:	d1eb      	bne.n	402bba <_svfprintf_r+0xbd2>
  402be2:	eba9 0306 	sub.w	r3, r9, r6
  402be6:	930e      	str	r3, [sp, #56]	; 0x38
  402be8:	f7ff bb0e 	b.w	402208 <_svfprintf_r+0x220>
  402bec:	aa25      	add	r2, sp, #148	; 0x94
  402bee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402bf0:	980c      	ldr	r0, [sp, #48]	; 0x30
  402bf2:	f002 fb53 	bl	40529c <__ssprint_r>
  402bf6:	2800      	cmp	r0, #0
  402bf8:	f47f aac8 	bne.w	40218c <_svfprintf_r+0x1a4>
  402bfc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402c00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c02:	46c8      	mov	r8, r9
  402c04:	f7ff bb5e 	b.w	4022c4 <_svfprintf_r+0x2dc>
  402c08:	1e5e      	subs	r6, r3, #1
  402c0a:	2e00      	cmp	r6, #0
  402c0c:	f77f af0a 	ble.w	402a24 <_svfprintf_r+0xa3c>
  402c10:	2e10      	cmp	r6, #16
  402c12:	4d03      	ldr	r5, [pc, #12]	; (402c20 <_svfprintf_r+0xc38>)
  402c14:	dd22      	ble.n	402c5c <_svfprintf_r+0xc74>
  402c16:	4622      	mov	r2, r4
  402c18:	f04f 0b10 	mov.w	fp, #16
  402c1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402c1e:	e006      	b.n	402c2e <_svfprintf_r+0xc46>
  402c20:	00407298 	.word	0x00407298
  402c24:	3e10      	subs	r6, #16
  402c26:	2e10      	cmp	r6, #16
  402c28:	f108 0808 	add.w	r8, r8, #8
  402c2c:	dd15      	ble.n	402c5a <_svfprintf_r+0xc72>
  402c2e:	3701      	adds	r7, #1
  402c30:	3210      	adds	r2, #16
  402c32:	2f07      	cmp	r7, #7
  402c34:	9227      	str	r2, [sp, #156]	; 0x9c
  402c36:	9726      	str	r7, [sp, #152]	; 0x98
  402c38:	e888 0820 	stmia.w	r8, {r5, fp}
  402c3c:	ddf2      	ble.n	402c24 <_svfprintf_r+0xc3c>
  402c3e:	aa25      	add	r2, sp, #148	; 0x94
  402c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c42:	4620      	mov	r0, r4
  402c44:	f002 fb2a 	bl	40529c <__ssprint_r>
  402c48:	2800      	cmp	r0, #0
  402c4a:	f47f aa9f 	bne.w	40218c <_svfprintf_r+0x1a4>
  402c4e:	3e10      	subs	r6, #16
  402c50:	2e10      	cmp	r6, #16
  402c52:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402c54:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402c56:	46c8      	mov	r8, r9
  402c58:	dce9      	bgt.n	402c2e <_svfprintf_r+0xc46>
  402c5a:	4614      	mov	r4, r2
  402c5c:	3701      	adds	r7, #1
  402c5e:	4434      	add	r4, r6
  402c60:	2f07      	cmp	r7, #7
  402c62:	9427      	str	r4, [sp, #156]	; 0x9c
  402c64:	9726      	str	r7, [sp, #152]	; 0x98
  402c66:	e888 0060 	stmia.w	r8, {r5, r6}
  402c6a:	f77f aed9 	ble.w	402a20 <_svfprintf_r+0xa38>
  402c6e:	aa25      	add	r2, sp, #148	; 0x94
  402c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c72:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c74:	f002 fb12 	bl	40529c <__ssprint_r>
  402c78:	2800      	cmp	r0, #0
  402c7a:	f47f aa87 	bne.w	40218c <_svfprintf_r+0x1a4>
  402c7e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c80:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402c82:	46c8      	mov	r8, r9
  402c84:	e6ce      	b.n	402a24 <_svfprintf_r+0xa3c>
  402c86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c88:	6814      	ldr	r4, [r2, #0]
  402c8a:	4613      	mov	r3, r2
  402c8c:	3304      	adds	r3, #4
  402c8e:	17e5      	asrs	r5, r4, #31
  402c90:	930f      	str	r3, [sp, #60]	; 0x3c
  402c92:	4622      	mov	r2, r4
  402c94:	462b      	mov	r3, r5
  402c96:	e4fa      	b.n	40268e <_svfprintf_r+0x6a6>
  402c98:	3204      	adds	r2, #4
  402c9a:	681c      	ldr	r4, [r3, #0]
  402c9c:	920f      	str	r2, [sp, #60]	; 0x3c
  402c9e:	2301      	movs	r3, #1
  402ca0:	2500      	movs	r5, #0
  402ca2:	f7ff ba94 	b.w	4021ce <_svfprintf_r+0x1e6>
  402ca6:	681c      	ldr	r4, [r3, #0]
  402ca8:	3304      	adds	r3, #4
  402caa:	930f      	str	r3, [sp, #60]	; 0x3c
  402cac:	2500      	movs	r5, #0
  402cae:	e421      	b.n	4024f4 <_svfprintf_r+0x50c>
  402cb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402cb2:	460a      	mov	r2, r1
  402cb4:	3204      	adds	r2, #4
  402cb6:	680c      	ldr	r4, [r1, #0]
  402cb8:	920f      	str	r2, [sp, #60]	; 0x3c
  402cba:	2500      	movs	r5, #0
  402cbc:	f7ff ba87 	b.w	4021ce <_svfprintf_r+0x1e6>
  402cc0:	4614      	mov	r4, r2
  402cc2:	3301      	adds	r3, #1
  402cc4:	4434      	add	r4, r6
  402cc6:	2b07      	cmp	r3, #7
  402cc8:	9427      	str	r4, [sp, #156]	; 0x9c
  402cca:	9326      	str	r3, [sp, #152]	; 0x98
  402ccc:	e888 0060 	stmia.w	r8, {r5, r6}
  402cd0:	f77f ab68 	ble.w	4023a4 <_svfprintf_r+0x3bc>
  402cd4:	e6b3      	b.n	402a3e <_svfprintf_r+0xa56>
  402cd6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402cda:	f8cd b01c 	str.w	fp, [sp, #28]
  402cde:	ae42      	add	r6, sp, #264	; 0x108
  402ce0:	3430      	adds	r4, #48	; 0x30
  402ce2:	2301      	movs	r3, #1
  402ce4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402ce8:	930e      	str	r3, [sp, #56]	; 0x38
  402cea:	f7ff ba8d 	b.w	402208 <_svfprintf_r+0x220>
  402cee:	aa25      	add	r2, sp, #148	; 0x94
  402cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
  402cf4:	f002 fad2 	bl	40529c <__ssprint_r>
  402cf8:	2800      	cmp	r0, #0
  402cfa:	f47f aa47 	bne.w	40218c <_svfprintf_r+0x1a4>
  402cfe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d00:	46c8      	mov	r8, r9
  402d02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  402d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402d06:	429a      	cmp	r2, r3
  402d08:	db44      	blt.n	402d94 <_svfprintf_r+0xdac>
  402d0a:	9b07      	ldr	r3, [sp, #28]
  402d0c:	07d9      	lsls	r1, r3, #31
  402d0e:	d441      	bmi.n	402d94 <_svfprintf_r+0xdac>
  402d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402d12:	9812      	ldr	r0, [sp, #72]	; 0x48
  402d14:	1a9a      	subs	r2, r3, r2
  402d16:	1a1d      	subs	r5, r3, r0
  402d18:	4295      	cmp	r5, r2
  402d1a:	bfa8      	it	ge
  402d1c:	4615      	movge	r5, r2
  402d1e:	2d00      	cmp	r5, #0
  402d20:	dd0e      	ble.n	402d40 <_svfprintf_r+0xd58>
  402d22:	9926      	ldr	r1, [sp, #152]	; 0x98
  402d24:	f8c8 5004 	str.w	r5, [r8, #4]
  402d28:	3101      	adds	r1, #1
  402d2a:	4406      	add	r6, r0
  402d2c:	442c      	add	r4, r5
  402d2e:	2907      	cmp	r1, #7
  402d30:	f8c8 6000 	str.w	r6, [r8]
  402d34:	9427      	str	r4, [sp, #156]	; 0x9c
  402d36:	9126      	str	r1, [sp, #152]	; 0x98
  402d38:	f300 823b 	bgt.w	4031b2 <_svfprintf_r+0x11ca>
  402d3c:	f108 0808 	add.w	r8, r8, #8
  402d40:	2d00      	cmp	r5, #0
  402d42:	bfac      	ite	ge
  402d44:	1b56      	subge	r6, r2, r5
  402d46:	4616      	movlt	r6, r2
  402d48:	2e00      	cmp	r6, #0
  402d4a:	f77f ab2d 	ble.w	4023a8 <_svfprintf_r+0x3c0>
  402d4e:	2e10      	cmp	r6, #16
  402d50:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d52:	4db0      	ldr	r5, [pc, #704]	; (403014 <_svfprintf_r+0x102c>)
  402d54:	ddb5      	ble.n	402cc2 <_svfprintf_r+0xcda>
  402d56:	4622      	mov	r2, r4
  402d58:	2710      	movs	r7, #16
  402d5a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402d5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402d60:	e004      	b.n	402d6c <_svfprintf_r+0xd84>
  402d62:	f108 0808 	add.w	r8, r8, #8
  402d66:	3e10      	subs	r6, #16
  402d68:	2e10      	cmp	r6, #16
  402d6a:	dda9      	ble.n	402cc0 <_svfprintf_r+0xcd8>
  402d6c:	3301      	adds	r3, #1
  402d6e:	3210      	adds	r2, #16
  402d70:	2b07      	cmp	r3, #7
  402d72:	9227      	str	r2, [sp, #156]	; 0x9c
  402d74:	9326      	str	r3, [sp, #152]	; 0x98
  402d76:	e888 00a0 	stmia.w	r8, {r5, r7}
  402d7a:	ddf2      	ble.n	402d62 <_svfprintf_r+0xd7a>
  402d7c:	aa25      	add	r2, sp, #148	; 0x94
  402d7e:	4621      	mov	r1, r4
  402d80:	4658      	mov	r0, fp
  402d82:	f002 fa8b 	bl	40529c <__ssprint_r>
  402d86:	2800      	cmp	r0, #0
  402d88:	f47f aa00 	bne.w	40218c <_svfprintf_r+0x1a4>
  402d8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402d8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d90:	46c8      	mov	r8, r9
  402d92:	e7e8      	b.n	402d66 <_svfprintf_r+0xd7e>
  402d94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d96:	9819      	ldr	r0, [sp, #100]	; 0x64
  402d98:	991a      	ldr	r1, [sp, #104]	; 0x68
  402d9a:	f8c8 1000 	str.w	r1, [r8]
  402d9e:	3301      	adds	r3, #1
  402da0:	4404      	add	r4, r0
  402da2:	2b07      	cmp	r3, #7
  402da4:	9427      	str	r4, [sp, #156]	; 0x9c
  402da6:	f8c8 0004 	str.w	r0, [r8, #4]
  402daa:	9326      	str	r3, [sp, #152]	; 0x98
  402dac:	f300 81f5 	bgt.w	40319a <_svfprintf_r+0x11b2>
  402db0:	f108 0808 	add.w	r8, r8, #8
  402db4:	e7ac      	b.n	402d10 <_svfprintf_r+0xd28>
  402db6:	9b07      	ldr	r3, [sp, #28]
  402db8:	07da      	lsls	r2, r3, #31
  402dba:	f53f adfe 	bmi.w	4029ba <_svfprintf_r+0x9d2>
  402dbe:	3701      	adds	r7, #1
  402dc0:	3401      	adds	r4, #1
  402dc2:	2301      	movs	r3, #1
  402dc4:	2f07      	cmp	r7, #7
  402dc6:	9427      	str	r4, [sp, #156]	; 0x9c
  402dc8:	9726      	str	r7, [sp, #152]	; 0x98
  402dca:	f8c8 6000 	str.w	r6, [r8]
  402dce:	f8c8 3004 	str.w	r3, [r8, #4]
  402dd2:	f77f ae25 	ble.w	402a20 <_svfprintf_r+0xa38>
  402dd6:	e74a      	b.n	402c6e <_svfprintf_r+0xc86>
  402dd8:	aa25      	add	r2, sp, #148	; 0x94
  402dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ddc:	980c      	ldr	r0, [sp, #48]	; 0x30
  402dde:	f002 fa5d 	bl	40529c <__ssprint_r>
  402de2:	2800      	cmp	r0, #0
  402de4:	f47f a9d2 	bne.w	40218c <_svfprintf_r+0x1a4>
  402de8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402dea:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402dec:	46c8      	mov	r8, r9
  402dee:	e5f2      	b.n	4029d6 <_svfprintf_r+0x9ee>
  402df0:	aa25      	add	r2, sp, #148	; 0x94
  402df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402df4:	980c      	ldr	r0, [sp, #48]	; 0x30
  402df6:	f002 fa51 	bl	40529c <__ssprint_r>
  402dfa:	2800      	cmp	r0, #0
  402dfc:	f47f a9c6 	bne.w	40218c <_svfprintf_r+0x1a4>
  402e00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e02:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402e04:	46c8      	mov	r8, r9
  402e06:	e5f5      	b.n	4029f4 <_svfprintf_r+0xa0c>
  402e08:	464e      	mov	r6, r9
  402e0a:	f7ff b9fd 	b.w	402208 <_svfprintf_r+0x220>
  402e0e:	aa25      	add	r2, sp, #148	; 0x94
  402e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e12:	980c      	ldr	r0, [sp, #48]	; 0x30
  402e14:	f002 fa42 	bl	40529c <__ssprint_r>
  402e18:	2800      	cmp	r0, #0
  402e1a:	f47f a9b7 	bne.w	40218c <_svfprintf_r+0x1a4>
  402e1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e20:	46c8      	mov	r8, r9
  402e22:	f7ff ba72 	b.w	40230a <_svfprintf_r+0x322>
  402e26:	9c15      	ldr	r4, [sp, #84]	; 0x54
  402e28:	4622      	mov	r2, r4
  402e2a:	4620      	mov	r0, r4
  402e2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  402e2e:	4623      	mov	r3, r4
  402e30:	4621      	mov	r1, r4
  402e32:	f003 faf9 	bl	406428 <__aeabi_dcmpun>
  402e36:	2800      	cmp	r0, #0
  402e38:	f040 8286 	bne.w	403348 <_svfprintf_r+0x1360>
  402e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e3e:	3301      	adds	r3, #1
  402e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e42:	f023 0320 	bic.w	r3, r3, #32
  402e46:	930e      	str	r3, [sp, #56]	; 0x38
  402e48:	f000 81e2 	beq.w	403210 <_svfprintf_r+0x1228>
  402e4c:	2b47      	cmp	r3, #71	; 0x47
  402e4e:	f000 811e 	beq.w	40308e <_svfprintf_r+0x10a6>
  402e52:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  402e56:	9307      	str	r3, [sp, #28]
  402e58:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402e5a:	1e1f      	subs	r7, r3, #0
  402e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402e5e:	9308      	str	r3, [sp, #32]
  402e60:	bfbb      	ittet	lt
  402e62:	463b      	movlt	r3, r7
  402e64:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  402e68:	2300      	movge	r3, #0
  402e6a:	232d      	movlt	r3, #45	; 0x2d
  402e6c:	9310      	str	r3, [sp, #64]	; 0x40
  402e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e70:	2b66      	cmp	r3, #102	; 0x66
  402e72:	f000 81bb 	beq.w	4031ec <_svfprintf_r+0x1204>
  402e76:	2b46      	cmp	r3, #70	; 0x46
  402e78:	f000 80df 	beq.w	40303a <_svfprintf_r+0x1052>
  402e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e7e:	9a08      	ldr	r2, [sp, #32]
  402e80:	2b45      	cmp	r3, #69	; 0x45
  402e82:	bf0c      	ite	eq
  402e84:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  402e86:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  402e88:	a823      	add	r0, sp, #140	; 0x8c
  402e8a:	a920      	add	r1, sp, #128	; 0x80
  402e8c:	bf08      	it	eq
  402e8e:	1c5d      	addeq	r5, r3, #1
  402e90:	9004      	str	r0, [sp, #16]
  402e92:	9103      	str	r1, [sp, #12]
  402e94:	a81f      	add	r0, sp, #124	; 0x7c
  402e96:	2102      	movs	r1, #2
  402e98:	463b      	mov	r3, r7
  402e9a:	9002      	str	r0, [sp, #8]
  402e9c:	9501      	str	r5, [sp, #4]
  402e9e:	9100      	str	r1, [sp, #0]
  402ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ea2:	f000 fb75 	bl	403590 <_dtoa_r>
  402ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402ea8:	2b67      	cmp	r3, #103	; 0x67
  402eaa:	4606      	mov	r6, r0
  402eac:	f040 81e0 	bne.w	403270 <_svfprintf_r+0x1288>
  402eb0:	f01b 0f01 	tst.w	fp, #1
  402eb4:	f000 8246 	beq.w	403344 <_svfprintf_r+0x135c>
  402eb8:	1974      	adds	r4, r6, r5
  402eba:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402ebc:	9808      	ldr	r0, [sp, #32]
  402ebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402ec0:	4639      	mov	r1, r7
  402ec2:	f003 fa7f 	bl	4063c4 <__aeabi_dcmpeq>
  402ec6:	2800      	cmp	r0, #0
  402ec8:	f040 8165 	bne.w	403196 <_svfprintf_r+0x11ae>
  402ecc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402ece:	42a3      	cmp	r3, r4
  402ed0:	d206      	bcs.n	402ee0 <_svfprintf_r+0xef8>
  402ed2:	2130      	movs	r1, #48	; 0x30
  402ed4:	1c5a      	adds	r2, r3, #1
  402ed6:	9223      	str	r2, [sp, #140]	; 0x8c
  402ed8:	7019      	strb	r1, [r3, #0]
  402eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402edc:	429c      	cmp	r4, r3
  402ede:	d8f9      	bhi.n	402ed4 <_svfprintf_r+0xeec>
  402ee0:	1b9b      	subs	r3, r3, r6
  402ee2:	9313      	str	r3, [sp, #76]	; 0x4c
  402ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402ee6:	2b47      	cmp	r3, #71	; 0x47
  402ee8:	f000 80e9 	beq.w	4030be <_svfprintf_r+0x10d6>
  402eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402eee:	2b65      	cmp	r3, #101	; 0x65
  402ef0:	f340 81cd 	ble.w	40328e <_svfprintf_r+0x12a6>
  402ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402ef6:	2b66      	cmp	r3, #102	; 0x66
  402ef8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402efa:	9312      	str	r3, [sp, #72]	; 0x48
  402efc:	f000 819e 	beq.w	40323c <_svfprintf_r+0x1254>
  402f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f02:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402f04:	4619      	mov	r1, r3
  402f06:	4291      	cmp	r1, r2
  402f08:	f300 818a 	bgt.w	403220 <_svfprintf_r+0x1238>
  402f0c:	f01b 0f01 	tst.w	fp, #1
  402f10:	f040 8213 	bne.w	40333a <_svfprintf_r+0x1352>
  402f14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  402f18:	9308      	str	r3, [sp, #32]
  402f1a:	2367      	movs	r3, #103	; 0x67
  402f1c:	920e      	str	r2, [sp, #56]	; 0x38
  402f1e:	9311      	str	r3, [sp, #68]	; 0x44
  402f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402f22:	2b00      	cmp	r3, #0
  402f24:	f040 80c4 	bne.w	4030b0 <_svfprintf_r+0x10c8>
  402f28:	930a      	str	r3, [sp, #40]	; 0x28
  402f2a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402f2e:	f7ff b973 	b.w	402218 <_svfprintf_r+0x230>
  402f32:	4635      	mov	r5, r6
  402f34:	460c      	mov	r4, r1
  402f36:	4646      	mov	r6, r8
  402f38:	4690      	mov	r8, r2
  402f3a:	3301      	adds	r3, #1
  402f3c:	443c      	add	r4, r7
  402f3e:	2b07      	cmp	r3, #7
  402f40:	9427      	str	r4, [sp, #156]	; 0x9c
  402f42:	9326      	str	r3, [sp, #152]	; 0x98
  402f44:	e888 00a0 	stmia.w	r8, {r5, r7}
  402f48:	f73f aed1 	bgt.w	402cee <_svfprintf_r+0xd06>
  402f4c:	f108 0808 	add.w	r8, r8, #8
  402f50:	e6d7      	b.n	402d02 <_svfprintf_r+0xd1a>
  402f52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f54:	6813      	ldr	r3, [r2, #0]
  402f56:	3204      	adds	r2, #4
  402f58:	920f      	str	r2, [sp, #60]	; 0x3c
  402f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402f5c:	601a      	str	r2, [r3, #0]
  402f5e:	f7ff b86a 	b.w	402036 <_svfprintf_r+0x4e>
  402f62:	aa25      	add	r2, sp, #148	; 0x94
  402f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f66:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f68:	f002 f998 	bl	40529c <__ssprint_r>
  402f6c:	2800      	cmp	r0, #0
  402f6e:	f47f a90d 	bne.w	40218c <_svfprintf_r+0x1a4>
  402f72:	46c8      	mov	r8, r9
  402f74:	e48d      	b.n	402892 <_svfprintf_r+0x8aa>
  402f76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f78:	4a27      	ldr	r2, [pc, #156]	; (403018 <_svfprintf_r+0x1030>)
  402f7a:	f8c8 2000 	str.w	r2, [r8]
  402f7e:	3301      	adds	r3, #1
  402f80:	3401      	adds	r4, #1
  402f82:	2201      	movs	r2, #1
  402f84:	2b07      	cmp	r3, #7
  402f86:	9427      	str	r4, [sp, #156]	; 0x9c
  402f88:	9326      	str	r3, [sp, #152]	; 0x98
  402f8a:	f8c8 2004 	str.w	r2, [r8, #4]
  402f8e:	dc72      	bgt.n	403076 <_svfprintf_r+0x108e>
  402f90:	f108 0808 	add.w	r8, r8, #8
  402f94:	b929      	cbnz	r1, 402fa2 <_svfprintf_r+0xfba>
  402f96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f98:	b91b      	cbnz	r3, 402fa2 <_svfprintf_r+0xfba>
  402f9a:	9b07      	ldr	r3, [sp, #28]
  402f9c:	07d8      	lsls	r0, r3, #31
  402f9e:	f57f aa03 	bpl.w	4023a8 <_svfprintf_r+0x3c0>
  402fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fa4:	9819      	ldr	r0, [sp, #100]	; 0x64
  402fa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402fa8:	f8c8 2000 	str.w	r2, [r8]
  402fac:	3301      	adds	r3, #1
  402fae:	4602      	mov	r2, r0
  402fb0:	4422      	add	r2, r4
  402fb2:	2b07      	cmp	r3, #7
  402fb4:	9227      	str	r2, [sp, #156]	; 0x9c
  402fb6:	f8c8 0004 	str.w	r0, [r8, #4]
  402fba:	9326      	str	r3, [sp, #152]	; 0x98
  402fbc:	f300 818d 	bgt.w	4032da <_svfprintf_r+0x12f2>
  402fc0:	f108 0808 	add.w	r8, r8, #8
  402fc4:	2900      	cmp	r1, #0
  402fc6:	f2c0 8165 	blt.w	403294 <_svfprintf_r+0x12ac>
  402fca:	9913      	ldr	r1, [sp, #76]	; 0x4c
  402fcc:	f8c8 6000 	str.w	r6, [r8]
  402fd0:	3301      	adds	r3, #1
  402fd2:	188c      	adds	r4, r1, r2
  402fd4:	2b07      	cmp	r3, #7
  402fd6:	9427      	str	r4, [sp, #156]	; 0x9c
  402fd8:	9326      	str	r3, [sp, #152]	; 0x98
  402fda:	f8c8 1004 	str.w	r1, [r8, #4]
  402fde:	f77f a9e1 	ble.w	4023a4 <_svfprintf_r+0x3bc>
  402fe2:	e52c      	b.n	402a3e <_svfprintf_r+0xa56>
  402fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
  402fe8:	6813      	ldr	r3, [r2, #0]
  402fea:	17cd      	asrs	r5, r1, #31
  402fec:	4608      	mov	r0, r1
  402fee:	3204      	adds	r2, #4
  402ff0:	4629      	mov	r1, r5
  402ff2:	920f      	str	r2, [sp, #60]	; 0x3c
  402ff4:	e9c3 0100 	strd	r0, r1, [r3]
  402ff8:	f7ff b81d 	b.w	402036 <_svfprintf_r+0x4e>
  402ffc:	aa25      	add	r2, sp, #148	; 0x94
  402ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403000:	980c      	ldr	r0, [sp, #48]	; 0x30
  403002:	f002 f94b 	bl	40529c <__ssprint_r>
  403006:	2800      	cmp	r0, #0
  403008:	f47f a8c0 	bne.w	40218c <_svfprintf_r+0x1a4>
  40300c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40300e:	46c8      	mov	r8, r9
  403010:	e458      	b.n	4028c4 <_svfprintf_r+0x8dc>
  403012:	bf00      	nop
  403014:	00407298 	.word	0x00407298
  403018:	00407284 	.word	0x00407284
  40301c:	2140      	movs	r1, #64	; 0x40
  40301e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403020:	f001 fa0c 	bl	40443c <_malloc_r>
  403024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403026:	6010      	str	r0, [r2, #0]
  403028:	6110      	str	r0, [r2, #16]
  40302a:	2800      	cmp	r0, #0
  40302c:	f000 81f2 	beq.w	403414 <_svfprintf_r+0x142c>
  403030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403032:	2340      	movs	r3, #64	; 0x40
  403034:	6153      	str	r3, [r2, #20]
  403036:	f7fe bfee 	b.w	402016 <_svfprintf_r+0x2e>
  40303a:	a823      	add	r0, sp, #140	; 0x8c
  40303c:	a920      	add	r1, sp, #128	; 0x80
  40303e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403040:	9004      	str	r0, [sp, #16]
  403042:	9103      	str	r1, [sp, #12]
  403044:	a81f      	add	r0, sp, #124	; 0x7c
  403046:	2103      	movs	r1, #3
  403048:	9002      	str	r0, [sp, #8]
  40304a:	9a08      	ldr	r2, [sp, #32]
  40304c:	9401      	str	r4, [sp, #4]
  40304e:	463b      	mov	r3, r7
  403050:	9100      	str	r1, [sp, #0]
  403052:	980c      	ldr	r0, [sp, #48]	; 0x30
  403054:	f000 fa9c 	bl	403590 <_dtoa_r>
  403058:	4625      	mov	r5, r4
  40305a:	4606      	mov	r6, r0
  40305c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40305e:	2b46      	cmp	r3, #70	; 0x46
  403060:	eb06 0405 	add.w	r4, r6, r5
  403064:	f47f af29 	bne.w	402eba <_svfprintf_r+0xed2>
  403068:	7833      	ldrb	r3, [r6, #0]
  40306a:	2b30      	cmp	r3, #48	; 0x30
  40306c:	f000 8178 	beq.w	403360 <_svfprintf_r+0x1378>
  403070:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403072:	442c      	add	r4, r5
  403074:	e721      	b.n	402eba <_svfprintf_r+0xed2>
  403076:	aa25      	add	r2, sp, #148	; 0x94
  403078:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40307a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40307c:	f002 f90e 	bl	40529c <__ssprint_r>
  403080:	2800      	cmp	r0, #0
  403082:	f47f a883 	bne.w	40218c <_svfprintf_r+0x1a4>
  403086:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403088:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40308a:	46c8      	mov	r8, r9
  40308c:	e782      	b.n	402f94 <_svfprintf_r+0xfac>
  40308e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403090:	2b00      	cmp	r3, #0
  403092:	bf08      	it	eq
  403094:	2301      	moveq	r3, #1
  403096:	930a      	str	r3, [sp, #40]	; 0x28
  403098:	e6db      	b.n	402e52 <_svfprintf_r+0xe6a>
  40309a:	4630      	mov	r0, r6
  40309c:	940a      	str	r4, [sp, #40]	; 0x28
  40309e:	f002 f88f 	bl	4051c0 <strlen>
  4030a2:	950f      	str	r5, [sp, #60]	; 0x3c
  4030a4:	900e      	str	r0, [sp, #56]	; 0x38
  4030a6:	f8cd b01c 	str.w	fp, [sp, #28]
  4030aa:	4603      	mov	r3, r0
  4030ac:	f7ff b9f9 	b.w	4024a2 <_svfprintf_r+0x4ba>
  4030b0:	272d      	movs	r7, #45	; 0x2d
  4030b2:	2300      	movs	r3, #0
  4030b4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4030b8:	930a      	str	r3, [sp, #40]	; 0x28
  4030ba:	f7ff b8ae 	b.w	40221a <_svfprintf_r+0x232>
  4030be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4030c0:	9312      	str	r3, [sp, #72]	; 0x48
  4030c2:	461a      	mov	r2, r3
  4030c4:	3303      	adds	r3, #3
  4030c6:	db04      	blt.n	4030d2 <_svfprintf_r+0x10ea>
  4030c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030ca:	4619      	mov	r1, r3
  4030cc:	4291      	cmp	r1, r2
  4030ce:	f6bf af17 	bge.w	402f00 <_svfprintf_r+0xf18>
  4030d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4030d4:	3b02      	subs	r3, #2
  4030d6:	9311      	str	r3, [sp, #68]	; 0x44
  4030d8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4030dc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4030e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4030e2:	3b01      	subs	r3, #1
  4030e4:	2b00      	cmp	r3, #0
  4030e6:	931f      	str	r3, [sp, #124]	; 0x7c
  4030e8:	bfbd      	ittte	lt
  4030ea:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4030ec:	f1c3 0301 	rsblt	r3, r3, #1
  4030f0:	222d      	movlt	r2, #45	; 0x2d
  4030f2:	222b      	movge	r2, #43	; 0x2b
  4030f4:	2b09      	cmp	r3, #9
  4030f6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4030fa:	f340 8116 	ble.w	40332a <_svfprintf_r+0x1342>
  4030fe:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  403102:	4620      	mov	r0, r4
  403104:	4dab      	ldr	r5, [pc, #684]	; (4033b4 <_svfprintf_r+0x13cc>)
  403106:	e000      	b.n	40310a <_svfprintf_r+0x1122>
  403108:	4610      	mov	r0, r2
  40310a:	fb85 1203 	smull	r1, r2, r5, r3
  40310e:	17d9      	asrs	r1, r3, #31
  403110:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403114:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403118:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40311c:	3230      	adds	r2, #48	; 0x30
  40311e:	2909      	cmp	r1, #9
  403120:	f800 2c01 	strb.w	r2, [r0, #-1]
  403124:	460b      	mov	r3, r1
  403126:	f100 32ff 	add.w	r2, r0, #4294967295
  40312a:	dced      	bgt.n	403108 <_svfprintf_r+0x1120>
  40312c:	3330      	adds	r3, #48	; 0x30
  40312e:	3802      	subs	r0, #2
  403130:	b2d9      	uxtb	r1, r3
  403132:	4284      	cmp	r4, r0
  403134:	f802 1c01 	strb.w	r1, [r2, #-1]
  403138:	f240 8165 	bls.w	403406 <_svfprintf_r+0x141e>
  40313c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403140:	4613      	mov	r3, r2
  403142:	e001      	b.n	403148 <_svfprintf_r+0x1160>
  403144:	f813 1b01 	ldrb.w	r1, [r3], #1
  403148:	f800 1b01 	strb.w	r1, [r0], #1
  40314c:	42a3      	cmp	r3, r4
  40314e:	d1f9      	bne.n	403144 <_svfprintf_r+0x115c>
  403150:	3301      	adds	r3, #1
  403152:	1a9b      	subs	r3, r3, r2
  403154:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403158:	4413      	add	r3, r2
  40315a:	aa21      	add	r2, sp, #132	; 0x84
  40315c:	1a9b      	subs	r3, r3, r2
  40315e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403160:	931b      	str	r3, [sp, #108]	; 0x6c
  403162:	2a01      	cmp	r2, #1
  403164:	4413      	add	r3, r2
  403166:	930e      	str	r3, [sp, #56]	; 0x38
  403168:	f340 8119 	ble.w	40339e <_svfprintf_r+0x13b6>
  40316c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40316e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403170:	4413      	add	r3, r2
  403172:	930e      	str	r3, [sp, #56]	; 0x38
  403174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403178:	9308      	str	r3, [sp, #32]
  40317a:	2300      	movs	r3, #0
  40317c:	9312      	str	r3, [sp, #72]	; 0x48
  40317e:	e6cf      	b.n	402f20 <_svfprintf_r+0xf38>
  403180:	aa25      	add	r2, sp, #148	; 0x94
  403182:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403184:	980c      	ldr	r0, [sp, #48]	; 0x30
  403186:	f002 f889 	bl	40529c <__ssprint_r>
  40318a:	2800      	cmp	r0, #0
  40318c:	f47e affe 	bne.w	40218c <_svfprintf_r+0x1a4>
  403190:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403192:	46c8      	mov	r8, r9
  403194:	e4d7      	b.n	402b46 <_svfprintf_r+0xb5e>
  403196:	4623      	mov	r3, r4
  403198:	e6a2      	b.n	402ee0 <_svfprintf_r+0xef8>
  40319a:	aa25      	add	r2, sp, #148	; 0x94
  40319c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40319e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4031a0:	f002 f87c 	bl	40529c <__ssprint_r>
  4031a4:	2800      	cmp	r0, #0
  4031a6:	f47e aff1 	bne.w	40218c <_svfprintf_r+0x1a4>
  4031aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4031ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4031ae:	46c8      	mov	r8, r9
  4031b0:	e5ae      	b.n	402d10 <_svfprintf_r+0xd28>
  4031b2:	aa25      	add	r2, sp, #148	; 0x94
  4031b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4031b8:	f002 f870 	bl	40529c <__ssprint_r>
  4031bc:	2800      	cmp	r0, #0
  4031be:	f47e afe5 	bne.w	40218c <_svfprintf_r+0x1a4>
  4031c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4031c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4031c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4031c8:	1a9a      	subs	r2, r3, r2
  4031ca:	46c8      	mov	r8, r9
  4031cc:	e5b8      	b.n	402d40 <_svfprintf_r+0xd58>
  4031ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031d0:	9612      	str	r6, [sp, #72]	; 0x48
  4031d2:	2b06      	cmp	r3, #6
  4031d4:	bf28      	it	cs
  4031d6:	2306      	movcs	r3, #6
  4031d8:	960a      	str	r6, [sp, #40]	; 0x28
  4031da:	4637      	mov	r7, r6
  4031dc:	9308      	str	r3, [sp, #32]
  4031de:	950f      	str	r5, [sp, #60]	; 0x3c
  4031e0:	f8cd b01c 	str.w	fp, [sp, #28]
  4031e4:	930e      	str	r3, [sp, #56]	; 0x38
  4031e6:	4e74      	ldr	r6, [pc, #464]	; (4033b8 <_svfprintf_r+0x13d0>)
  4031e8:	f7ff b816 	b.w	402218 <_svfprintf_r+0x230>
  4031ec:	a823      	add	r0, sp, #140	; 0x8c
  4031ee:	a920      	add	r1, sp, #128	; 0x80
  4031f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4031f2:	9004      	str	r0, [sp, #16]
  4031f4:	9103      	str	r1, [sp, #12]
  4031f6:	a81f      	add	r0, sp, #124	; 0x7c
  4031f8:	2103      	movs	r1, #3
  4031fa:	9002      	str	r0, [sp, #8]
  4031fc:	9a08      	ldr	r2, [sp, #32]
  4031fe:	9501      	str	r5, [sp, #4]
  403200:	463b      	mov	r3, r7
  403202:	9100      	str	r1, [sp, #0]
  403204:	980c      	ldr	r0, [sp, #48]	; 0x30
  403206:	f000 f9c3 	bl	403590 <_dtoa_r>
  40320a:	4606      	mov	r6, r0
  40320c:	1944      	adds	r4, r0, r5
  40320e:	e72b      	b.n	403068 <_svfprintf_r+0x1080>
  403210:	2306      	movs	r3, #6
  403212:	930a      	str	r3, [sp, #40]	; 0x28
  403214:	e61d      	b.n	402e52 <_svfprintf_r+0xe6a>
  403216:	272d      	movs	r7, #45	; 0x2d
  403218:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40321c:	f7ff bacd 	b.w	4027ba <_svfprintf_r+0x7d2>
  403220:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403222:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403224:	4413      	add	r3, r2
  403226:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403228:	930e      	str	r3, [sp, #56]	; 0x38
  40322a:	2a00      	cmp	r2, #0
  40322c:	f340 80b0 	ble.w	403390 <_svfprintf_r+0x13a8>
  403230:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403234:	9308      	str	r3, [sp, #32]
  403236:	2367      	movs	r3, #103	; 0x67
  403238:	9311      	str	r3, [sp, #68]	; 0x44
  40323a:	e671      	b.n	402f20 <_svfprintf_r+0xf38>
  40323c:	2b00      	cmp	r3, #0
  40323e:	f340 80c3 	ble.w	4033c8 <_svfprintf_r+0x13e0>
  403242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403244:	2a00      	cmp	r2, #0
  403246:	f040 8099 	bne.w	40337c <_svfprintf_r+0x1394>
  40324a:	f01b 0f01 	tst.w	fp, #1
  40324e:	f040 8095 	bne.w	40337c <_svfprintf_r+0x1394>
  403252:	9308      	str	r3, [sp, #32]
  403254:	930e      	str	r3, [sp, #56]	; 0x38
  403256:	e663      	b.n	402f20 <_svfprintf_r+0xf38>
  403258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40325a:	9308      	str	r3, [sp, #32]
  40325c:	930e      	str	r3, [sp, #56]	; 0x38
  40325e:	900a      	str	r0, [sp, #40]	; 0x28
  403260:	950f      	str	r5, [sp, #60]	; 0x3c
  403262:	f8cd b01c 	str.w	fp, [sp, #28]
  403266:	9012      	str	r0, [sp, #72]	; 0x48
  403268:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40326c:	f7fe bfd4 	b.w	402218 <_svfprintf_r+0x230>
  403270:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403272:	2b47      	cmp	r3, #71	; 0x47
  403274:	f47f ae20 	bne.w	402eb8 <_svfprintf_r+0xed0>
  403278:	f01b 0f01 	tst.w	fp, #1
  40327c:	f47f aeee 	bne.w	40305c <_svfprintf_r+0x1074>
  403280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403282:	1b9b      	subs	r3, r3, r6
  403284:	9313      	str	r3, [sp, #76]	; 0x4c
  403286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403288:	2b47      	cmp	r3, #71	; 0x47
  40328a:	f43f af18 	beq.w	4030be <_svfprintf_r+0x10d6>
  40328e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403290:	9312      	str	r3, [sp, #72]	; 0x48
  403292:	e721      	b.n	4030d8 <_svfprintf_r+0x10f0>
  403294:	424f      	negs	r7, r1
  403296:	3110      	adds	r1, #16
  403298:	4d48      	ldr	r5, [pc, #288]	; (4033bc <_svfprintf_r+0x13d4>)
  40329a:	da2f      	bge.n	4032fc <_svfprintf_r+0x1314>
  40329c:	2410      	movs	r4, #16
  40329e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4032a2:	e004      	b.n	4032ae <_svfprintf_r+0x12c6>
  4032a4:	f108 0808 	add.w	r8, r8, #8
  4032a8:	3f10      	subs	r7, #16
  4032aa:	2f10      	cmp	r7, #16
  4032ac:	dd26      	ble.n	4032fc <_svfprintf_r+0x1314>
  4032ae:	3301      	adds	r3, #1
  4032b0:	3210      	adds	r2, #16
  4032b2:	2b07      	cmp	r3, #7
  4032b4:	9227      	str	r2, [sp, #156]	; 0x9c
  4032b6:	9326      	str	r3, [sp, #152]	; 0x98
  4032b8:	f8c8 5000 	str.w	r5, [r8]
  4032bc:	f8c8 4004 	str.w	r4, [r8, #4]
  4032c0:	ddf0      	ble.n	4032a4 <_svfprintf_r+0x12bc>
  4032c2:	aa25      	add	r2, sp, #148	; 0x94
  4032c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032c6:	4658      	mov	r0, fp
  4032c8:	f001 ffe8 	bl	40529c <__ssprint_r>
  4032cc:	2800      	cmp	r0, #0
  4032ce:	f47e af5d 	bne.w	40218c <_svfprintf_r+0x1a4>
  4032d2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4032d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4032d6:	46c8      	mov	r8, r9
  4032d8:	e7e6      	b.n	4032a8 <_svfprintf_r+0x12c0>
  4032da:	aa25      	add	r2, sp, #148	; 0x94
  4032dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032de:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032e0:	f001 ffdc 	bl	40529c <__ssprint_r>
  4032e4:	2800      	cmp	r0, #0
  4032e6:	f47e af51 	bne.w	40218c <_svfprintf_r+0x1a4>
  4032ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4032ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4032ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4032f0:	46c8      	mov	r8, r9
  4032f2:	e667      	b.n	402fc4 <_svfprintf_r+0xfdc>
  4032f4:	2000      	movs	r0, #0
  4032f6:	900a      	str	r0, [sp, #40]	; 0x28
  4032f8:	f7fe bed0 	b.w	40209c <_svfprintf_r+0xb4>
  4032fc:	3301      	adds	r3, #1
  4032fe:	443a      	add	r2, r7
  403300:	2b07      	cmp	r3, #7
  403302:	e888 00a0 	stmia.w	r8, {r5, r7}
  403306:	9227      	str	r2, [sp, #156]	; 0x9c
  403308:	9326      	str	r3, [sp, #152]	; 0x98
  40330a:	f108 0808 	add.w	r8, r8, #8
  40330e:	f77f ae5c 	ble.w	402fca <_svfprintf_r+0xfe2>
  403312:	aa25      	add	r2, sp, #148	; 0x94
  403314:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403316:	980c      	ldr	r0, [sp, #48]	; 0x30
  403318:	f001 ffc0 	bl	40529c <__ssprint_r>
  40331c:	2800      	cmp	r0, #0
  40331e:	f47e af35 	bne.w	40218c <_svfprintf_r+0x1a4>
  403322:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403324:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403326:	46c8      	mov	r8, r9
  403328:	e64f      	b.n	402fca <_svfprintf_r+0xfe2>
  40332a:	3330      	adds	r3, #48	; 0x30
  40332c:	2230      	movs	r2, #48	; 0x30
  40332e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403332:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403336:	ab22      	add	r3, sp, #136	; 0x88
  403338:	e70f      	b.n	40315a <_svfprintf_r+0x1172>
  40333a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40333c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40333e:	4413      	add	r3, r2
  403340:	930e      	str	r3, [sp, #56]	; 0x38
  403342:	e775      	b.n	403230 <_svfprintf_r+0x1248>
  403344:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403346:	e5cb      	b.n	402ee0 <_svfprintf_r+0xef8>
  403348:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40334a:	4e1d      	ldr	r6, [pc, #116]	; (4033c0 <_svfprintf_r+0x13d8>)
  40334c:	2b00      	cmp	r3, #0
  40334e:	bfb6      	itet	lt
  403350:	272d      	movlt	r7, #45	; 0x2d
  403352:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403356:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40335a:	4b1a      	ldr	r3, [pc, #104]	; (4033c4 <_svfprintf_r+0x13dc>)
  40335c:	f7ff ba2f 	b.w	4027be <_svfprintf_r+0x7d6>
  403360:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403362:	9808      	ldr	r0, [sp, #32]
  403364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403366:	4639      	mov	r1, r7
  403368:	f003 f82c 	bl	4063c4 <__aeabi_dcmpeq>
  40336c:	2800      	cmp	r0, #0
  40336e:	f47f ae7f 	bne.w	403070 <_svfprintf_r+0x1088>
  403372:	f1c5 0501 	rsb	r5, r5, #1
  403376:	951f      	str	r5, [sp, #124]	; 0x7c
  403378:	442c      	add	r4, r5
  40337a:	e59e      	b.n	402eba <_svfprintf_r+0xed2>
  40337c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40337e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403380:	4413      	add	r3, r2
  403382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403384:	441a      	add	r2, r3
  403386:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40338a:	920e      	str	r2, [sp, #56]	; 0x38
  40338c:	9308      	str	r3, [sp, #32]
  40338e:	e5c7      	b.n	402f20 <_svfprintf_r+0xf38>
  403390:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403394:	f1c3 0301 	rsb	r3, r3, #1
  403398:	441a      	add	r2, r3
  40339a:	4613      	mov	r3, r2
  40339c:	e7d0      	b.n	403340 <_svfprintf_r+0x1358>
  40339e:	f01b 0301 	ands.w	r3, fp, #1
  4033a2:	9312      	str	r3, [sp, #72]	; 0x48
  4033a4:	f47f aee2 	bne.w	40316c <_svfprintf_r+0x1184>
  4033a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4033aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4033ae:	9308      	str	r3, [sp, #32]
  4033b0:	e5b6      	b.n	402f20 <_svfprintf_r+0xf38>
  4033b2:	bf00      	nop
  4033b4:	66666667 	.word	0x66666667
  4033b8:	0040727c 	.word	0x0040727c
  4033bc:	00407298 	.word	0x00407298
  4033c0:	00407250 	.word	0x00407250
  4033c4:	0040724c 	.word	0x0040724c
  4033c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4033ca:	b913      	cbnz	r3, 4033d2 <_svfprintf_r+0x13ea>
  4033cc:	f01b 0f01 	tst.w	fp, #1
  4033d0:	d002      	beq.n	4033d8 <_svfprintf_r+0x13f0>
  4033d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4033d4:	3301      	adds	r3, #1
  4033d6:	e7d4      	b.n	403382 <_svfprintf_r+0x139a>
  4033d8:	2301      	movs	r3, #1
  4033da:	e73a      	b.n	403252 <_svfprintf_r+0x126a>
  4033dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4033de:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4033e2:	6828      	ldr	r0, [r5, #0]
  4033e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4033e8:	900a      	str	r0, [sp, #40]	; 0x28
  4033ea:	4628      	mov	r0, r5
  4033ec:	3004      	adds	r0, #4
  4033ee:	46a2      	mov	sl, r4
  4033f0:	900f      	str	r0, [sp, #60]	; 0x3c
  4033f2:	f7fe be51 	b.w	402098 <_svfprintf_r+0xb0>
  4033f6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4033fa:	f7ff b867 	b.w	4024cc <_svfprintf_r+0x4e4>
  4033fe:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403402:	f7ff ba15 	b.w	402830 <_svfprintf_r+0x848>
  403406:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40340a:	e6a6      	b.n	40315a <_svfprintf_r+0x1172>
  40340c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403410:	f7ff b8eb 	b.w	4025ea <_svfprintf_r+0x602>
  403414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403416:	230c      	movs	r3, #12
  403418:	6013      	str	r3, [r2, #0]
  40341a:	f04f 33ff 	mov.w	r3, #4294967295
  40341e:	9309      	str	r3, [sp, #36]	; 0x24
  403420:	f7fe bebd 	b.w	40219e <_svfprintf_r+0x1b6>
  403424:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403428:	f7ff b99a 	b.w	402760 <_svfprintf_r+0x778>
  40342c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403430:	f7ff b976 	b.w	402720 <_svfprintf_r+0x738>
  403434:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403438:	f7ff b959 	b.w	4026ee <_svfprintf_r+0x706>
  40343c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403440:	f7ff b912 	b.w	402668 <_svfprintf_r+0x680>

00403444 <register_fini>:
  403444:	4b02      	ldr	r3, [pc, #8]	; (403450 <register_fini+0xc>)
  403446:	b113      	cbz	r3, 40344e <register_fini+0xa>
  403448:	4802      	ldr	r0, [pc, #8]	; (403454 <register_fini+0x10>)
  40344a:	f000 b805 	b.w	403458 <atexit>
  40344e:	4770      	bx	lr
  403450:	00000000 	.word	0x00000000
  403454:	004043e5 	.word	0x004043e5

00403458 <atexit>:
  403458:	2300      	movs	r3, #0
  40345a:	4601      	mov	r1, r0
  40345c:	461a      	mov	r2, r3
  40345e:	4618      	mov	r0, r3
  403460:	f001 bf9a 	b.w	405398 <__register_exitproc>

00403464 <quorem>:
  403464:	6902      	ldr	r2, [r0, #16]
  403466:	690b      	ldr	r3, [r1, #16]
  403468:	4293      	cmp	r3, r2
  40346a:	f300 808d 	bgt.w	403588 <quorem+0x124>
  40346e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403472:	f103 38ff 	add.w	r8, r3, #4294967295
  403476:	f101 0714 	add.w	r7, r1, #20
  40347a:	f100 0b14 	add.w	fp, r0, #20
  40347e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403482:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403486:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40348a:	b083      	sub	sp, #12
  40348c:	3201      	adds	r2, #1
  40348e:	fbb3 f9f2 	udiv	r9, r3, r2
  403492:	eb0b 0304 	add.w	r3, fp, r4
  403496:	9400      	str	r4, [sp, #0]
  403498:	eb07 0a04 	add.w	sl, r7, r4
  40349c:	9301      	str	r3, [sp, #4]
  40349e:	f1b9 0f00 	cmp.w	r9, #0
  4034a2:	d039      	beq.n	403518 <quorem+0xb4>
  4034a4:	2500      	movs	r5, #0
  4034a6:	462e      	mov	r6, r5
  4034a8:	46bc      	mov	ip, r7
  4034aa:	46de      	mov	lr, fp
  4034ac:	f85c 4b04 	ldr.w	r4, [ip], #4
  4034b0:	f8de 3000 	ldr.w	r3, [lr]
  4034b4:	b2a2      	uxth	r2, r4
  4034b6:	fb09 5502 	mla	r5, r9, r2, r5
  4034ba:	0c22      	lsrs	r2, r4, #16
  4034bc:	0c2c      	lsrs	r4, r5, #16
  4034be:	fb09 4202 	mla	r2, r9, r2, r4
  4034c2:	b2ad      	uxth	r5, r5
  4034c4:	1b75      	subs	r5, r6, r5
  4034c6:	b296      	uxth	r6, r2
  4034c8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4034cc:	fa15 f383 	uxtah	r3, r5, r3
  4034d0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4034d4:	b29b      	uxth	r3, r3
  4034d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4034da:	45e2      	cmp	sl, ip
  4034dc:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4034e0:	f84e 3b04 	str.w	r3, [lr], #4
  4034e4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4034e8:	d2e0      	bcs.n	4034ac <quorem+0x48>
  4034ea:	9b00      	ldr	r3, [sp, #0]
  4034ec:	f85b 3003 	ldr.w	r3, [fp, r3]
  4034f0:	b993      	cbnz	r3, 403518 <quorem+0xb4>
  4034f2:	9c01      	ldr	r4, [sp, #4]
  4034f4:	1f23      	subs	r3, r4, #4
  4034f6:	459b      	cmp	fp, r3
  4034f8:	d20c      	bcs.n	403514 <quorem+0xb0>
  4034fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4034fe:	b94b      	cbnz	r3, 403514 <quorem+0xb0>
  403500:	f1a4 0308 	sub.w	r3, r4, #8
  403504:	e002      	b.n	40350c <quorem+0xa8>
  403506:	681a      	ldr	r2, [r3, #0]
  403508:	3b04      	subs	r3, #4
  40350a:	b91a      	cbnz	r2, 403514 <quorem+0xb0>
  40350c:	459b      	cmp	fp, r3
  40350e:	f108 38ff 	add.w	r8, r8, #4294967295
  403512:	d3f8      	bcc.n	403506 <quorem+0xa2>
  403514:	f8c0 8010 	str.w	r8, [r0, #16]
  403518:	4604      	mov	r4, r0
  40351a:	f001 fd35 	bl	404f88 <__mcmp>
  40351e:	2800      	cmp	r0, #0
  403520:	db2e      	blt.n	403580 <quorem+0x11c>
  403522:	f109 0901 	add.w	r9, r9, #1
  403526:	465d      	mov	r5, fp
  403528:	2300      	movs	r3, #0
  40352a:	f857 1b04 	ldr.w	r1, [r7], #4
  40352e:	6828      	ldr	r0, [r5, #0]
  403530:	b28a      	uxth	r2, r1
  403532:	1a9a      	subs	r2, r3, r2
  403534:	0c0b      	lsrs	r3, r1, #16
  403536:	fa12 f280 	uxtah	r2, r2, r0
  40353a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40353e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  403542:	b292      	uxth	r2, r2
  403544:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403548:	45ba      	cmp	sl, r7
  40354a:	f845 2b04 	str.w	r2, [r5], #4
  40354e:	ea4f 4323 	mov.w	r3, r3, asr #16
  403552:	d2ea      	bcs.n	40352a <quorem+0xc6>
  403554:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403558:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40355c:	b982      	cbnz	r2, 403580 <quorem+0x11c>
  40355e:	1f1a      	subs	r2, r3, #4
  403560:	4593      	cmp	fp, r2
  403562:	d20b      	bcs.n	40357c <quorem+0x118>
  403564:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403568:	b942      	cbnz	r2, 40357c <quorem+0x118>
  40356a:	3b08      	subs	r3, #8
  40356c:	e002      	b.n	403574 <quorem+0x110>
  40356e:	681a      	ldr	r2, [r3, #0]
  403570:	3b04      	subs	r3, #4
  403572:	b91a      	cbnz	r2, 40357c <quorem+0x118>
  403574:	459b      	cmp	fp, r3
  403576:	f108 38ff 	add.w	r8, r8, #4294967295
  40357a:	d3f8      	bcc.n	40356e <quorem+0x10a>
  40357c:	f8c4 8010 	str.w	r8, [r4, #16]
  403580:	4648      	mov	r0, r9
  403582:	b003      	add	sp, #12
  403584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403588:	2000      	movs	r0, #0
  40358a:	4770      	bx	lr
  40358c:	0000      	movs	r0, r0
	...

00403590 <_dtoa_r>:
  403590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403594:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403596:	b09b      	sub	sp, #108	; 0x6c
  403598:	4604      	mov	r4, r0
  40359a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40359c:	4692      	mov	sl, r2
  40359e:	469b      	mov	fp, r3
  4035a0:	b141      	cbz	r1, 4035b4 <_dtoa_r+0x24>
  4035a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4035a4:	604a      	str	r2, [r1, #4]
  4035a6:	2301      	movs	r3, #1
  4035a8:	4093      	lsls	r3, r2
  4035aa:	608b      	str	r3, [r1, #8]
  4035ac:	f001 fb14 	bl	404bd8 <_Bfree>
  4035b0:	2300      	movs	r3, #0
  4035b2:	6423      	str	r3, [r4, #64]	; 0x40
  4035b4:	f1bb 0f00 	cmp.w	fp, #0
  4035b8:	465d      	mov	r5, fp
  4035ba:	db35      	blt.n	403628 <_dtoa_r+0x98>
  4035bc:	2300      	movs	r3, #0
  4035be:	6033      	str	r3, [r6, #0]
  4035c0:	4b9d      	ldr	r3, [pc, #628]	; (403838 <_dtoa_r+0x2a8>)
  4035c2:	43ab      	bics	r3, r5
  4035c4:	d015      	beq.n	4035f2 <_dtoa_r+0x62>
  4035c6:	4650      	mov	r0, sl
  4035c8:	4659      	mov	r1, fp
  4035ca:	2200      	movs	r2, #0
  4035cc:	2300      	movs	r3, #0
  4035ce:	f002 fef9 	bl	4063c4 <__aeabi_dcmpeq>
  4035d2:	4680      	mov	r8, r0
  4035d4:	2800      	cmp	r0, #0
  4035d6:	d02d      	beq.n	403634 <_dtoa_r+0xa4>
  4035d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4035da:	2301      	movs	r3, #1
  4035dc:	6013      	str	r3, [r2, #0]
  4035de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4035e0:	2b00      	cmp	r3, #0
  4035e2:	f000 80bd 	beq.w	403760 <_dtoa_r+0x1d0>
  4035e6:	4895      	ldr	r0, [pc, #596]	; (40383c <_dtoa_r+0x2ac>)
  4035e8:	6018      	str	r0, [r3, #0]
  4035ea:	3801      	subs	r0, #1
  4035ec:	b01b      	add	sp, #108	; 0x6c
  4035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4035f4:	f242 730f 	movw	r3, #9999	; 0x270f
  4035f8:	6013      	str	r3, [r2, #0]
  4035fa:	f1ba 0f00 	cmp.w	sl, #0
  4035fe:	d10d      	bne.n	40361c <_dtoa_r+0x8c>
  403600:	f3c5 0513 	ubfx	r5, r5, #0, #20
  403604:	b955      	cbnz	r5, 40361c <_dtoa_r+0x8c>
  403606:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403608:	488d      	ldr	r0, [pc, #564]	; (403840 <_dtoa_r+0x2b0>)
  40360a:	2b00      	cmp	r3, #0
  40360c:	d0ee      	beq.n	4035ec <_dtoa_r+0x5c>
  40360e:	f100 0308 	add.w	r3, r0, #8
  403612:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  403614:	6013      	str	r3, [r2, #0]
  403616:	b01b      	add	sp, #108	; 0x6c
  403618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40361c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40361e:	4889      	ldr	r0, [pc, #548]	; (403844 <_dtoa_r+0x2b4>)
  403620:	2b00      	cmp	r3, #0
  403622:	d0e3      	beq.n	4035ec <_dtoa_r+0x5c>
  403624:	1cc3      	adds	r3, r0, #3
  403626:	e7f4      	b.n	403612 <_dtoa_r+0x82>
  403628:	2301      	movs	r3, #1
  40362a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40362e:	6033      	str	r3, [r6, #0]
  403630:	46ab      	mov	fp, r5
  403632:	e7c5      	b.n	4035c0 <_dtoa_r+0x30>
  403634:	aa18      	add	r2, sp, #96	; 0x60
  403636:	ab19      	add	r3, sp, #100	; 0x64
  403638:	9201      	str	r2, [sp, #4]
  40363a:	9300      	str	r3, [sp, #0]
  40363c:	4652      	mov	r2, sl
  40363e:	465b      	mov	r3, fp
  403640:	4620      	mov	r0, r4
  403642:	f001 fd41 	bl	4050c8 <__d2b>
  403646:	0d2b      	lsrs	r3, r5, #20
  403648:	4681      	mov	r9, r0
  40364a:	d071      	beq.n	403730 <_dtoa_r+0x1a0>
  40364c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403650:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  403654:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403656:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40365a:	4650      	mov	r0, sl
  40365c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403660:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403664:	2200      	movs	r2, #0
  403666:	4b78      	ldr	r3, [pc, #480]	; (403848 <_dtoa_r+0x2b8>)
  403668:	f002 fa90 	bl	405b8c <__aeabi_dsub>
  40366c:	a36c      	add	r3, pc, #432	; (adr r3, 403820 <_dtoa_r+0x290>)
  40366e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403672:	f002 fc3f 	bl	405ef4 <__aeabi_dmul>
  403676:	a36c      	add	r3, pc, #432	; (adr r3, 403828 <_dtoa_r+0x298>)
  403678:	e9d3 2300 	ldrd	r2, r3, [r3]
  40367c:	f002 fa88 	bl	405b90 <__adddf3>
  403680:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403684:	4630      	mov	r0, r6
  403686:	f002 fbcf 	bl	405e28 <__aeabi_i2d>
  40368a:	a369      	add	r3, pc, #420	; (adr r3, 403830 <_dtoa_r+0x2a0>)
  40368c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403690:	f002 fc30 	bl	405ef4 <__aeabi_dmul>
  403694:	4602      	mov	r2, r0
  403696:	460b      	mov	r3, r1
  403698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40369c:	f002 fa78 	bl	405b90 <__adddf3>
  4036a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4036a4:	f002 fed6 	bl	406454 <__aeabi_d2iz>
  4036a8:	2200      	movs	r2, #0
  4036aa:	9002      	str	r0, [sp, #8]
  4036ac:	2300      	movs	r3, #0
  4036ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4036b2:	f002 fe91 	bl	4063d8 <__aeabi_dcmplt>
  4036b6:	2800      	cmp	r0, #0
  4036b8:	f040 8173 	bne.w	4039a2 <_dtoa_r+0x412>
  4036bc:	9d02      	ldr	r5, [sp, #8]
  4036be:	2d16      	cmp	r5, #22
  4036c0:	f200 815d 	bhi.w	40397e <_dtoa_r+0x3ee>
  4036c4:	4b61      	ldr	r3, [pc, #388]	; (40384c <_dtoa_r+0x2bc>)
  4036c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4036ca:	e9d3 0100 	ldrd	r0, r1, [r3]
  4036ce:	4652      	mov	r2, sl
  4036d0:	465b      	mov	r3, fp
  4036d2:	f002 fe9f 	bl	406414 <__aeabi_dcmpgt>
  4036d6:	2800      	cmp	r0, #0
  4036d8:	f000 81c5 	beq.w	403a66 <_dtoa_r+0x4d6>
  4036dc:	1e6b      	subs	r3, r5, #1
  4036de:	9302      	str	r3, [sp, #8]
  4036e0:	2300      	movs	r3, #0
  4036e2:	930e      	str	r3, [sp, #56]	; 0x38
  4036e4:	1bbf      	subs	r7, r7, r6
  4036e6:	1e7b      	subs	r3, r7, #1
  4036e8:	9306      	str	r3, [sp, #24]
  4036ea:	f100 8154 	bmi.w	403996 <_dtoa_r+0x406>
  4036ee:	2300      	movs	r3, #0
  4036f0:	9308      	str	r3, [sp, #32]
  4036f2:	9b02      	ldr	r3, [sp, #8]
  4036f4:	2b00      	cmp	r3, #0
  4036f6:	f2c0 8145 	blt.w	403984 <_dtoa_r+0x3f4>
  4036fa:	9a06      	ldr	r2, [sp, #24]
  4036fc:	930d      	str	r3, [sp, #52]	; 0x34
  4036fe:	4611      	mov	r1, r2
  403700:	4419      	add	r1, r3
  403702:	2300      	movs	r3, #0
  403704:	9106      	str	r1, [sp, #24]
  403706:	930c      	str	r3, [sp, #48]	; 0x30
  403708:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40370a:	2b09      	cmp	r3, #9
  40370c:	d82a      	bhi.n	403764 <_dtoa_r+0x1d4>
  40370e:	2b05      	cmp	r3, #5
  403710:	f340 865b 	ble.w	4043ca <_dtoa_r+0xe3a>
  403714:	3b04      	subs	r3, #4
  403716:	9324      	str	r3, [sp, #144]	; 0x90
  403718:	2500      	movs	r5, #0
  40371a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40371c:	3b02      	subs	r3, #2
  40371e:	2b03      	cmp	r3, #3
  403720:	f200 8642 	bhi.w	4043a8 <_dtoa_r+0xe18>
  403724:	e8df f013 	tbh	[pc, r3, lsl #1]
  403728:	02c903d4 	.word	0x02c903d4
  40372c:	046103df 	.word	0x046103df
  403730:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403732:	9e19      	ldr	r6, [sp, #100]	; 0x64
  403734:	443e      	add	r6, r7
  403736:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40373a:	2b20      	cmp	r3, #32
  40373c:	f340 818e 	ble.w	403a5c <_dtoa_r+0x4cc>
  403740:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403744:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403748:	409d      	lsls	r5, r3
  40374a:	fa2a f000 	lsr.w	r0, sl, r0
  40374e:	4328      	orrs	r0, r5
  403750:	f002 fb5a 	bl	405e08 <__aeabi_ui2d>
  403754:	2301      	movs	r3, #1
  403756:	3e01      	subs	r6, #1
  403758:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40375c:	9314      	str	r3, [sp, #80]	; 0x50
  40375e:	e781      	b.n	403664 <_dtoa_r+0xd4>
  403760:	483b      	ldr	r0, [pc, #236]	; (403850 <_dtoa_r+0x2c0>)
  403762:	e743      	b.n	4035ec <_dtoa_r+0x5c>
  403764:	2100      	movs	r1, #0
  403766:	6461      	str	r1, [r4, #68]	; 0x44
  403768:	4620      	mov	r0, r4
  40376a:	9125      	str	r1, [sp, #148]	; 0x94
  40376c:	f001 fa0e 	bl	404b8c <_Balloc>
  403770:	f04f 33ff 	mov.w	r3, #4294967295
  403774:	930a      	str	r3, [sp, #40]	; 0x28
  403776:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403778:	930f      	str	r3, [sp, #60]	; 0x3c
  40377a:	2301      	movs	r3, #1
  40377c:	9004      	str	r0, [sp, #16]
  40377e:	6420      	str	r0, [r4, #64]	; 0x40
  403780:	9224      	str	r2, [sp, #144]	; 0x90
  403782:	930b      	str	r3, [sp, #44]	; 0x2c
  403784:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403786:	2b00      	cmp	r3, #0
  403788:	f2c0 80d9 	blt.w	40393e <_dtoa_r+0x3ae>
  40378c:	9a02      	ldr	r2, [sp, #8]
  40378e:	2a0e      	cmp	r2, #14
  403790:	f300 80d5 	bgt.w	40393e <_dtoa_r+0x3ae>
  403794:	4b2d      	ldr	r3, [pc, #180]	; (40384c <_dtoa_r+0x2bc>)
  403796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40379a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40379e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4037a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4037a4:	2b00      	cmp	r3, #0
  4037a6:	f2c0 83ba 	blt.w	403f1e <_dtoa_r+0x98e>
  4037aa:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4037ae:	4650      	mov	r0, sl
  4037b0:	462a      	mov	r2, r5
  4037b2:	4633      	mov	r3, r6
  4037b4:	4659      	mov	r1, fp
  4037b6:	f002 fcc7 	bl	406148 <__aeabi_ddiv>
  4037ba:	f002 fe4b 	bl	406454 <__aeabi_d2iz>
  4037be:	4680      	mov	r8, r0
  4037c0:	f002 fb32 	bl	405e28 <__aeabi_i2d>
  4037c4:	462a      	mov	r2, r5
  4037c6:	4633      	mov	r3, r6
  4037c8:	f002 fb94 	bl	405ef4 <__aeabi_dmul>
  4037cc:	460b      	mov	r3, r1
  4037ce:	4602      	mov	r2, r0
  4037d0:	4659      	mov	r1, fp
  4037d2:	4650      	mov	r0, sl
  4037d4:	f002 f9da 	bl	405b8c <__aeabi_dsub>
  4037d8:	9d04      	ldr	r5, [sp, #16]
  4037da:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4037de:	702b      	strb	r3, [r5, #0]
  4037e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037e2:	2b01      	cmp	r3, #1
  4037e4:	4606      	mov	r6, r0
  4037e6:	460f      	mov	r7, r1
  4037e8:	f105 0501 	add.w	r5, r5, #1
  4037ec:	d068      	beq.n	4038c0 <_dtoa_r+0x330>
  4037ee:	2200      	movs	r2, #0
  4037f0:	4b18      	ldr	r3, [pc, #96]	; (403854 <_dtoa_r+0x2c4>)
  4037f2:	f002 fb7f 	bl	405ef4 <__aeabi_dmul>
  4037f6:	2200      	movs	r2, #0
  4037f8:	2300      	movs	r3, #0
  4037fa:	4606      	mov	r6, r0
  4037fc:	460f      	mov	r7, r1
  4037fe:	f002 fde1 	bl	4063c4 <__aeabi_dcmpeq>
  403802:	2800      	cmp	r0, #0
  403804:	f040 8088 	bne.w	403918 <_dtoa_r+0x388>
  403808:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40380c:	f04f 0a00 	mov.w	sl, #0
  403810:	f8df b040 	ldr.w	fp, [pc, #64]	; 403854 <_dtoa_r+0x2c4>
  403814:	940c      	str	r4, [sp, #48]	; 0x30
  403816:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40381a:	e028      	b.n	40386e <_dtoa_r+0x2de>
  40381c:	f3af 8000 	nop.w
  403820:	636f4361 	.word	0x636f4361
  403824:	3fd287a7 	.word	0x3fd287a7
  403828:	8b60c8b3 	.word	0x8b60c8b3
  40382c:	3fc68a28 	.word	0x3fc68a28
  403830:	509f79fb 	.word	0x509f79fb
  403834:	3fd34413 	.word	0x3fd34413
  403838:	7ff00000 	.word	0x7ff00000
  40383c:	00407285 	.word	0x00407285
  403840:	004072a8 	.word	0x004072a8
  403844:	004072b4 	.word	0x004072b4
  403848:	3ff80000 	.word	0x3ff80000
  40384c:	004072e0 	.word	0x004072e0
  403850:	00407284 	.word	0x00407284
  403854:	40240000 	.word	0x40240000
  403858:	f002 fb4c 	bl	405ef4 <__aeabi_dmul>
  40385c:	2200      	movs	r2, #0
  40385e:	2300      	movs	r3, #0
  403860:	4606      	mov	r6, r0
  403862:	460f      	mov	r7, r1
  403864:	f002 fdae 	bl	4063c4 <__aeabi_dcmpeq>
  403868:	2800      	cmp	r0, #0
  40386a:	f040 83c1 	bne.w	403ff0 <_dtoa_r+0xa60>
  40386e:	4642      	mov	r2, r8
  403870:	464b      	mov	r3, r9
  403872:	4630      	mov	r0, r6
  403874:	4639      	mov	r1, r7
  403876:	f002 fc67 	bl	406148 <__aeabi_ddiv>
  40387a:	f002 fdeb 	bl	406454 <__aeabi_d2iz>
  40387e:	4604      	mov	r4, r0
  403880:	f002 fad2 	bl	405e28 <__aeabi_i2d>
  403884:	4642      	mov	r2, r8
  403886:	464b      	mov	r3, r9
  403888:	f002 fb34 	bl	405ef4 <__aeabi_dmul>
  40388c:	4602      	mov	r2, r0
  40388e:	460b      	mov	r3, r1
  403890:	4630      	mov	r0, r6
  403892:	4639      	mov	r1, r7
  403894:	f002 f97a 	bl	405b8c <__aeabi_dsub>
  403898:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40389c:	9e04      	ldr	r6, [sp, #16]
  40389e:	f805 eb01 	strb.w	lr, [r5], #1
  4038a2:	eba5 0e06 	sub.w	lr, r5, r6
  4038a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4038a8:	45b6      	cmp	lr, r6
  4038aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4038ae:	4652      	mov	r2, sl
  4038b0:	465b      	mov	r3, fp
  4038b2:	d1d1      	bne.n	403858 <_dtoa_r+0x2c8>
  4038b4:	46a0      	mov	r8, r4
  4038b6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4038ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4038bc:	4606      	mov	r6, r0
  4038be:	460f      	mov	r7, r1
  4038c0:	4632      	mov	r2, r6
  4038c2:	463b      	mov	r3, r7
  4038c4:	4630      	mov	r0, r6
  4038c6:	4639      	mov	r1, r7
  4038c8:	f002 f962 	bl	405b90 <__adddf3>
  4038cc:	4606      	mov	r6, r0
  4038ce:	460f      	mov	r7, r1
  4038d0:	4602      	mov	r2, r0
  4038d2:	460b      	mov	r3, r1
  4038d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4038d8:	f002 fd7e 	bl	4063d8 <__aeabi_dcmplt>
  4038dc:	b948      	cbnz	r0, 4038f2 <_dtoa_r+0x362>
  4038de:	4632      	mov	r2, r6
  4038e0:	463b      	mov	r3, r7
  4038e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4038e6:	f002 fd6d 	bl	4063c4 <__aeabi_dcmpeq>
  4038ea:	b1a8      	cbz	r0, 403918 <_dtoa_r+0x388>
  4038ec:	f018 0f01 	tst.w	r8, #1
  4038f0:	d012      	beq.n	403918 <_dtoa_r+0x388>
  4038f2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4038f6:	9a04      	ldr	r2, [sp, #16]
  4038f8:	1e6b      	subs	r3, r5, #1
  4038fa:	e004      	b.n	403906 <_dtoa_r+0x376>
  4038fc:	429a      	cmp	r2, r3
  4038fe:	f000 8401 	beq.w	404104 <_dtoa_r+0xb74>
  403902:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403906:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40390a:	f103 0501 	add.w	r5, r3, #1
  40390e:	d0f5      	beq.n	4038fc <_dtoa_r+0x36c>
  403910:	f108 0801 	add.w	r8, r8, #1
  403914:	f883 8000 	strb.w	r8, [r3]
  403918:	4649      	mov	r1, r9
  40391a:	4620      	mov	r0, r4
  40391c:	f001 f95c 	bl	404bd8 <_Bfree>
  403920:	2200      	movs	r2, #0
  403922:	9b02      	ldr	r3, [sp, #8]
  403924:	702a      	strb	r2, [r5, #0]
  403926:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403928:	3301      	adds	r3, #1
  40392a:	6013      	str	r3, [r2, #0]
  40392c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40392e:	2b00      	cmp	r3, #0
  403930:	f000 839e 	beq.w	404070 <_dtoa_r+0xae0>
  403934:	9804      	ldr	r0, [sp, #16]
  403936:	601d      	str	r5, [r3, #0]
  403938:	b01b      	add	sp, #108	; 0x6c
  40393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40393e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403940:	2a00      	cmp	r2, #0
  403942:	d03e      	beq.n	4039c2 <_dtoa_r+0x432>
  403944:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403946:	2a01      	cmp	r2, #1
  403948:	f340 8311 	ble.w	403f6e <_dtoa_r+0x9de>
  40394c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40394e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403950:	1e5f      	subs	r7, r3, #1
  403952:	42ba      	cmp	r2, r7
  403954:	f2c0 838f 	blt.w	404076 <_dtoa_r+0xae6>
  403958:	1bd7      	subs	r7, r2, r7
  40395a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40395c:	2b00      	cmp	r3, #0
  40395e:	f2c0 848b 	blt.w	404278 <_dtoa_r+0xce8>
  403962:	9d08      	ldr	r5, [sp, #32]
  403964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403966:	9a08      	ldr	r2, [sp, #32]
  403968:	441a      	add	r2, r3
  40396a:	9208      	str	r2, [sp, #32]
  40396c:	9a06      	ldr	r2, [sp, #24]
  40396e:	2101      	movs	r1, #1
  403970:	441a      	add	r2, r3
  403972:	4620      	mov	r0, r4
  403974:	9206      	str	r2, [sp, #24]
  403976:	f001 f9c9 	bl	404d0c <__i2b>
  40397a:	4606      	mov	r6, r0
  40397c:	e024      	b.n	4039c8 <_dtoa_r+0x438>
  40397e:	2301      	movs	r3, #1
  403980:	930e      	str	r3, [sp, #56]	; 0x38
  403982:	e6af      	b.n	4036e4 <_dtoa_r+0x154>
  403984:	9a08      	ldr	r2, [sp, #32]
  403986:	9b02      	ldr	r3, [sp, #8]
  403988:	1ad2      	subs	r2, r2, r3
  40398a:	425b      	negs	r3, r3
  40398c:	930c      	str	r3, [sp, #48]	; 0x30
  40398e:	2300      	movs	r3, #0
  403990:	9208      	str	r2, [sp, #32]
  403992:	930d      	str	r3, [sp, #52]	; 0x34
  403994:	e6b8      	b.n	403708 <_dtoa_r+0x178>
  403996:	f1c7 0301 	rsb	r3, r7, #1
  40399a:	9308      	str	r3, [sp, #32]
  40399c:	2300      	movs	r3, #0
  40399e:	9306      	str	r3, [sp, #24]
  4039a0:	e6a7      	b.n	4036f2 <_dtoa_r+0x162>
  4039a2:	9d02      	ldr	r5, [sp, #8]
  4039a4:	4628      	mov	r0, r5
  4039a6:	f002 fa3f 	bl	405e28 <__aeabi_i2d>
  4039aa:	4602      	mov	r2, r0
  4039ac:	460b      	mov	r3, r1
  4039ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4039b2:	f002 fd07 	bl	4063c4 <__aeabi_dcmpeq>
  4039b6:	2800      	cmp	r0, #0
  4039b8:	f47f ae80 	bne.w	4036bc <_dtoa_r+0x12c>
  4039bc:	1e6b      	subs	r3, r5, #1
  4039be:	9302      	str	r3, [sp, #8]
  4039c0:	e67c      	b.n	4036bc <_dtoa_r+0x12c>
  4039c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4039c4:	9d08      	ldr	r5, [sp, #32]
  4039c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4039c8:	2d00      	cmp	r5, #0
  4039ca:	dd0c      	ble.n	4039e6 <_dtoa_r+0x456>
  4039cc:	9906      	ldr	r1, [sp, #24]
  4039ce:	2900      	cmp	r1, #0
  4039d0:	460b      	mov	r3, r1
  4039d2:	dd08      	ble.n	4039e6 <_dtoa_r+0x456>
  4039d4:	42a9      	cmp	r1, r5
  4039d6:	9a08      	ldr	r2, [sp, #32]
  4039d8:	bfa8      	it	ge
  4039da:	462b      	movge	r3, r5
  4039dc:	1ad2      	subs	r2, r2, r3
  4039de:	1aed      	subs	r5, r5, r3
  4039e0:	1acb      	subs	r3, r1, r3
  4039e2:	9208      	str	r2, [sp, #32]
  4039e4:	9306      	str	r3, [sp, #24]
  4039e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039e8:	b1d3      	cbz	r3, 403a20 <_dtoa_r+0x490>
  4039ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	f000 82b7 	beq.w	403f60 <_dtoa_r+0x9d0>
  4039f2:	2f00      	cmp	r7, #0
  4039f4:	dd10      	ble.n	403a18 <_dtoa_r+0x488>
  4039f6:	4631      	mov	r1, r6
  4039f8:	463a      	mov	r2, r7
  4039fa:	4620      	mov	r0, r4
  4039fc:	f001 fa22 	bl	404e44 <__pow5mult>
  403a00:	464a      	mov	r2, r9
  403a02:	4601      	mov	r1, r0
  403a04:	4606      	mov	r6, r0
  403a06:	4620      	mov	r0, r4
  403a08:	f001 f98a 	bl	404d20 <__multiply>
  403a0c:	4649      	mov	r1, r9
  403a0e:	4680      	mov	r8, r0
  403a10:	4620      	mov	r0, r4
  403a12:	f001 f8e1 	bl	404bd8 <_Bfree>
  403a16:	46c1      	mov	r9, r8
  403a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403a1a:	1bda      	subs	r2, r3, r7
  403a1c:	f040 82a1 	bne.w	403f62 <_dtoa_r+0x9d2>
  403a20:	2101      	movs	r1, #1
  403a22:	4620      	mov	r0, r4
  403a24:	f001 f972 	bl	404d0c <__i2b>
  403a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	4680      	mov	r8, r0
  403a2e:	dd1c      	ble.n	403a6a <_dtoa_r+0x4da>
  403a30:	4601      	mov	r1, r0
  403a32:	461a      	mov	r2, r3
  403a34:	4620      	mov	r0, r4
  403a36:	f001 fa05 	bl	404e44 <__pow5mult>
  403a3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a3c:	2b01      	cmp	r3, #1
  403a3e:	4680      	mov	r8, r0
  403a40:	f340 8254 	ble.w	403eec <_dtoa_r+0x95c>
  403a44:	2300      	movs	r3, #0
  403a46:	930c      	str	r3, [sp, #48]	; 0x30
  403a48:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403a4c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403a50:	6918      	ldr	r0, [r3, #16]
  403a52:	f001 f90b 	bl	404c6c <__hi0bits>
  403a56:	f1c0 0020 	rsb	r0, r0, #32
  403a5a:	e010      	b.n	403a7e <_dtoa_r+0x4ee>
  403a5c:	f1c3 0520 	rsb	r5, r3, #32
  403a60:	fa0a f005 	lsl.w	r0, sl, r5
  403a64:	e674      	b.n	403750 <_dtoa_r+0x1c0>
  403a66:	900e      	str	r0, [sp, #56]	; 0x38
  403a68:	e63c      	b.n	4036e4 <_dtoa_r+0x154>
  403a6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a6c:	2b01      	cmp	r3, #1
  403a6e:	f340 8287 	ble.w	403f80 <_dtoa_r+0x9f0>
  403a72:	2300      	movs	r3, #0
  403a74:	930c      	str	r3, [sp, #48]	; 0x30
  403a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a78:	2001      	movs	r0, #1
  403a7a:	2b00      	cmp	r3, #0
  403a7c:	d1e4      	bne.n	403a48 <_dtoa_r+0x4b8>
  403a7e:	9a06      	ldr	r2, [sp, #24]
  403a80:	4410      	add	r0, r2
  403a82:	f010 001f 	ands.w	r0, r0, #31
  403a86:	f000 80a1 	beq.w	403bcc <_dtoa_r+0x63c>
  403a8a:	f1c0 0320 	rsb	r3, r0, #32
  403a8e:	2b04      	cmp	r3, #4
  403a90:	f340 849e 	ble.w	4043d0 <_dtoa_r+0xe40>
  403a94:	9b08      	ldr	r3, [sp, #32]
  403a96:	f1c0 001c 	rsb	r0, r0, #28
  403a9a:	4403      	add	r3, r0
  403a9c:	9308      	str	r3, [sp, #32]
  403a9e:	4613      	mov	r3, r2
  403aa0:	4403      	add	r3, r0
  403aa2:	4405      	add	r5, r0
  403aa4:	9306      	str	r3, [sp, #24]
  403aa6:	9b08      	ldr	r3, [sp, #32]
  403aa8:	2b00      	cmp	r3, #0
  403aaa:	dd05      	ble.n	403ab8 <_dtoa_r+0x528>
  403aac:	4649      	mov	r1, r9
  403aae:	461a      	mov	r2, r3
  403ab0:	4620      	mov	r0, r4
  403ab2:	f001 fa17 	bl	404ee4 <__lshift>
  403ab6:	4681      	mov	r9, r0
  403ab8:	9b06      	ldr	r3, [sp, #24]
  403aba:	2b00      	cmp	r3, #0
  403abc:	dd05      	ble.n	403aca <_dtoa_r+0x53a>
  403abe:	4641      	mov	r1, r8
  403ac0:	461a      	mov	r2, r3
  403ac2:	4620      	mov	r0, r4
  403ac4:	f001 fa0e 	bl	404ee4 <__lshift>
  403ac8:	4680      	mov	r8, r0
  403aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403acc:	2b00      	cmp	r3, #0
  403ace:	f040 8086 	bne.w	403bde <_dtoa_r+0x64e>
  403ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ad4:	2b00      	cmp	r3, #0
  403ad6:	f340 8266 	ble.w	403fa6 <_dtoa_r+0xa16>
  403ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403adc:	2b00      	cmp	r3, #0
  403ade:	f000 8098 	beq.w	403c12 <_dtoa_r+0x682>
  403ae2:	2d00      	cmp	r5, #0
  403ae4:	dd05      	ble.n	403af2 <_dtoa_r+0x562>
  403ae6:	4631      	mov	r1, r6
  403ae8:	462a      	mov	r2, r5
  403aea:	4620      	mov	r0, r4
  403aec:	f001 f9fa 	bl	404ee4 <__lshift>
  403af0:	4606      	mov	r6, r0
  403af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403af4:	2b00      	cmp	r3, #0
  403af6:	f040 8337 	bne.w	404168 <_dtoa_r+0xbd8>
  403afa:	9606      	str	r6, [sp, #24]
  403afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403afe:	9a04      	ldr	r2, [sp, #16]
  403b00:	f8dd b018 	ldr.w	fp, [sp, #24]
  403b04:	3b01      	subs	r3, #1
  403b06:	18d3      	adds	r3, r2, r3
  403b08:	930b      	str	r3, [sp, #44]	; 0x2c
  403b0a:	f00a 0301 	and.w	r3, sl, #1
  403b0e:	930c      	str	r3, [sp, #48]	; 0x30
  403b10:	4617      	mov	r7, r2
  403b12:	46c2      	mov	sl, r8
  403b14:	4651      	mov	r1, sl
  403b16:	4648      	mov	r0, r9
  403b18:	f7ff fca4 	bl	403464 <quorem>
  403b1c:	4631      	mov	r1, r6
  403b1e:	4605      	mov	r5, r0
  403b20:	4648      	mov	r0, r9
  403b22:	f001 fa31 	bl	404f88 <__mcmp>
  403b26:	465a      	mov	r2, fp
  403b28:	900a      	str	r0, [sp, #40]	; 0x28
  403b2a:	4651      	mov	r1, sl
  403b2c:	4620      	mov	r0, r4
  403b2e:	f001 fa47 	bl	404fc0 <__mdiff>
  403b32:	68c2      	ldr	r2, [r0, #12]
  403b34:	4680      	mov	r8, r0
  403b36:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403b3a:	2a00      	cmp	r2, #0
  403b3c:	f040 822b 	bne.w	403f96 <_dtoa_r+0xa06>
  403b40:	4601      	mov	r1, r0
  403b42:	4648      	mov	r0, r9
  403b44:	9308      	str	r3, [sp, #32]
  403b46:	f001 fa1f 	bl	404f88 <__mcmp>
  403b4a:	4641      	mov	r1, r8
  403b4c:	9006      	str	r0, [sp, #24]
  403b4e:	4620      	mov	r0, r4
  403b50:	f001 f842 	bl	404bd8 <_Bfree>
  403b54:	9a06      	ldr	r2, [sp, #24]
  403b56:	9b08      	ldr	r3, [sp, #32]
  403b58:	b932      	cbnz	r2, 403b68 <_dtoa_r+0x5d8>
  403b5a:	9924      	ldr	r1, [sp, #144]	; 0x90
  403b5c:	b921      	cbnz	r1, 403b68 <_dtoa_r+0x5d8>
  403b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403b60:	2a00      	cmp	r2, #0
  403b62:	f000 83ef 	beq.w	404344 <_dtoa_r+0xdb4>
  403b66:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403b68:	990a      	ldr	r1, [sp, #40]	; 0x28
  403b6a:	2900      	cmp	r1, #0
  403b6c:	f2c0 829f 	blt.w	4040ae <_dtoa_r+0xb1e>
  403b70:	d105      	bne.n	403b7e <_dtoa_r+0x5ee>
  403b72:	9924      	ldr	r1, [sp, #144]	; 0x90
  403b74:	b919      	cbnz	r1, 403b7e <_dtoa_r+0x5ee>
  403b76:	990c      	ldr	r1, [sp, #48]	; 0x30
  403b78:	2900      	cmp	r1, #0
  403b7a:	f000 8298 	beq.w	4040ae <_dtoa_r+0xb1e>
  403b7e:	2a00      	cmp	r2, #0
  403b80:	f300 8306 	bgt.w	404190 <_dtoa_r+0xc00>
  403b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b86:	703b      	strb	r3, [r7, #0]
  403b88:	f107 0801 	add.w	r8, r7, #1
  403b8c:	4297      	cmp	r7, r2
  403b8e:	4645      	mov	r5, r8
  403b90:	f000 830c 	beq.w	4041ac <_dtoa_r+0xc1c>
  403b94:	4649      	mov	r1, r9
  403b96:	2300      	movs	r3, #0
  403b98:	220a      	movs	r2, #10
  403b9a:	4620      	mov	r0, r4
  403b9c:	f001 f826 	bl	404bec <__multadd>
  403ba0:	455e      	cmp	r6, fp
  403ba2:	4681      	mov	r9, r0
  403ba4:	4631      	mov	r1, r6
  403ba6:	f04f 0300 	mov.w	r3, #0
  403baa:	f04f 020a 	mov.w	r2, #10
  403bae:	4620      	mov	r0, r4
  403bb0:	f000 81eb 	beq.w	403f8a <_dtoa_r+0x9fa>
  403bb4:	f001 f81a 	bl	404bec <__multadd>
  403bb8:	4659      	mov	r1, fp
  403bba:	4606      	mov	r6, r0
  403bbc:	2300      	movs	r3, #0
  403bbe:	220a      	movs	r2, #10
  403bc0:	4620      	mov	r0, r4
  403bc2:	f001 f813 	bl	404bec <__multadd>
  403bc6:	4647      	mov	r7, r8
  403bc8:	4683      	mov	fp, r0
  403bca:	e7a3      	b.n	403b14 <_dtoa_r+0x584>
  403bcc:	201c      	movs	r0, #28
  403bce:	9b08      	ldr	r3, [sp, #32]
  403bd0:	4403      	add	r3, r0
  403bd2:	9308      	str	r3, [sp, #32]
  403bd4:	9b06      	ldr	r3, [sp, #24]
  403bd6:	4403      	add	r3, r0
  403bd8:	4405      	add	r5, r0
  403bda:	9306      	str	r3, [sp, #24]
  403bdc:	e763      	b.n	403aa6 <_dtoa_r+0x516>
  403bde:	4641      	mov	r1, r8
  403be0:	4648      	mov	r0, r9
  403be2:	f001 f9d1 	bl	404f88 <__mcmp>
  403be6:	2800      	cmp	r0, #0
  403be8:	f6bf af73 	bge.w	403ad2 <_dtoa_r+0x542>
  403bec:	9f02      	ldr	r7, [sp, #8]
  403bee:	4649      	mov	r1, r9
  403bf0:	2300      	movs	r3, #0
  403bf2:	220a      	movs	r2, #10
  403bf4:	4620      	mov	r0, r4
  403bf6:	3f01      	subs	r7, #1
  403bf8:	9702      	str	r7, [sp, #8]
  403bfa:	f000 fff7 	bl	404bec <__multadd>
  403bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c00:	4681      	mov	r9, r0
  403c02:	2b00      	cmp	r3, #0
  403c04:	f040 83b6 	bne.w	404374 <_dtoa_r+0xde4>
  403c08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403c0a:	2b00      	cmp	r3, #0
  403c0c:	f340 83bf 	ble.w	40438e <_dtoa_r+0xdfe>
  403c10:	930a      	str	r3, [sp, #40]	; 0x28
  403c12:	f8dd b010 	ldr.w	fp, [sp, #16]
  403c16:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403c18:	465d      	mov	r5, fp
  403c1a:	e002      	b.n	403c22 <_dtoa_r+0x692>
  403c1c:	f000 ffe6 	bl	404bec <__multadd>
  403c20:	4681      	mov	r9, r0
  403c22:	4641      	mov	r1, r8
  403c24:	4648      	mov	r0, r9
  403c26:	f7ff fc1d 	bl	403464 <quorem>
  403c2a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403c2e:	f805 ab01 	strb.w	sl, [r5], #1
  403c32:	eba5 030b 	sub.w	r3, r5, fp
  403c36:	42bb      	cmp	r3, r7
  403c38:	f04f 020a 	mov.w	r2, #10
  403c3c:	f04f 0300 	mov.w	r3, #0
  403c40:	4649      	mov	r1, r9
  403c42:	4620      	mov	r0, r4
  403c44:	dbea      	blt.n	403c1c <_dtoa_r+0x68c>
  403c46:	9b04      	ldr	r3, [sp, #16]
  403c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403c4a:	2a01      	cmp	r2, #1
  403c4c:	bfac      	ite	ge
  403c4e:	189b      	addge	r3, r3, r2
  403c50:	3301      	addlt	r3, #1
  403c52:	461d      	mov	r5, r3
  403c54:	f04f 0b00 	mov.w	fp, #0
  403c58:	4649      	mov	r1, r9
  403c5a:	2201      	movs	r2, #1
  403c5c:	4620      	mov	r0, r4
  403c5e:	f001 f941 	bl	404ee4 <__lshift>
  403c62:	4641      	mov	r1, r8
  403c64:	4681      	mov	r9, r0
  403c66:	f001 f98f 	bl	404f88 <__mcmp>
  403c6a:	2800      	cmp	r0, #0
  403c6c:	f340 823d 	ble.w	4040ea <_dtoa_r+0xb5a>
  403c70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403c74:	9904      	ldr	r1, [sp, #16]
  403c76:	1e6b      	subs	r3, r5, #1
  403c78:	e004      	b.n	403c84 <_dtoa_r+0x6f4>
  403c7a:	428b      	cmp	r3, r1
  403c7c:	f000 81ae 	beq.w	403fdc <_dtoa_r+0xa4c>
  403c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403c84:	2a39      	cmp	r2, #57	; 0x39
  403c86:	f103 0501 	add.w	r5, r3, #1
  403c8a:	d0f6      	beq.n	403c7a <_dtoa_r+0x6ea>
  403c8c:	3201      	adds	r2, #1
  403c8e:	701a      	strb	r2, [r3, #0]
  403c90:	4641      	mov	r1, r8
  403c92:	4620      	mov	r0, r4
  403c94:	f000 ffa0 	bl	404bd8 <_Bfree>
  403c98:	2e00      	cmp	r6, #0
  403c9a:	f43f ae3d 	beq.w	403918 <_dtoa_r+0x388>
  403c9e:	f1bb 0f00 	cmp.w	fp, #0
  403ca2:	d005      	beq.n	403cb0 <_dtoa_r+0x720>
  403ca4:	45b3      	cmp	fp, r6
  403ca6:	d003      	beq.n	403cb0 <_dtoa_r+0x720>
  403ca8:	4659      	mov	r1, fp
  403caa:	4620      	mov	r0, r4
  403cac:	f000 ff94 	bl	404bd8 <_Bfree>
  403cb0:	4631      	mov	r1, r6
  403cb2:	4620      	mov	r0, r4
  403cb4:	f000 ff90 	bl	404bd8 <_Bfree>
  403cb8:	e62e      	b.n	403918 <_dtoa_r+0x388>
  403cba:	2300      	movs	r3, #0
  403cbc:	930b      	str	r3, [sp, #44]	; 0x2c
  403cbe:	9b02      	ldr	r3, [sp, #8]
  403cc0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403cc2:	4413      	add	r3, r2
  403cc4:	930f      	str	r3, [sp, #60]	; 0x3c
  403cc6:	3301      	adds	r3, #1
  403cc8:	2b01      	cmp	r3, #1
  403cca:	461f      	mov	r7, r3
  403ccc:	461e      	mov	r6, r3
  403cce:	930a      	str	r3, [sp, #40]	; 0x28
  403cd0:	bfb8      	it	lt
  403cd2:	2701      	movlt	r7, #1
  403cd4:	2100      	movs	r1, #0
  403cd6:	2f17      	cmp	r7, #23
  403cd8:	6461      	str	r1, [r4, #68]	; 0x44
  403cda:	d90a      	bls.n	403cf2 <_dtoa_r+0x762>
  403cdc:	2201      	movs	r2, #1
  403cde:	2304      	movs	r3, #4
  403ce0:	005b      	lsls	r3, r3, #1
  403ce2:	f103 0014 	add.w	r0, r3, #20
  403ce6:	4287      	cmp	r7, r0
  403ce8:	4611      	mov	r1, r2
  403cea:	f102 0201 	add.w	r2, r2, #1
  403cee:	d2f7      	bcs.n	403ce0 <_dtoa_r+0x750>
  403cf0:	6461      	str	r1, [r4, #68]	; 0x44
  403cf2:	4620      	mov	r0, r4
  403cf4:	f000 ff4a 	bl	404b8c <_Balloc>
  403cf8:	2e0e      	cmp	r6, #14
  403cfa:	9004      	str	r0, [sp, #16]
  403cfc:	6420      	str	r0, [r4, #64]	; 0x40
  403cfe:	f63f ad41 	bhi.w	403784 <_dtoa_r+0x1f4>
  403d02:	2d00      	cmp	r5, #0
  403d04:	f43f ad3e 	beq.w	403784 <_dtoa_r+0x1f4>
  403d08:	9902      	ldr	r1, [sp, #8]
  403d0a:	2900      	cmp	r1, #0
  403d0c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  403d10:	f340 8202 	ble.w	404118 <_dtoa_r+0xb88>
  403d14:	4bb8      	ldr	r3, [pc, #736]	; (403ff8 <_dtoa_r+0xa68>)
  403d16:	f001 020f 	and.w	r2, r1, #15
  403d1a:	110d      	asrs	r5, r1, #4
  403d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403d20:	06e9      	lsls	r1, r5, #27
  403d22:	e9d3 6700 	ldrd	r6, r7, [r3]
  403d26:	f140 81ae 	bpl.w	404086 <_dtoa_r+0xaf6>
  403d2a:	4bb4      	ldr	r3, [pc, #720]	; (403ffc <_dtoa_r+0xa6c>)
  403d2c:	4650      	mov	r0, sl
  403d2e:	4659      	mov	r1, fp
  403d30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403d34:	f002 fa08 	bl	406148 <__aeabi_ddiv>
  403d38:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  403d3c:	f005 050f 	and.w	r5, r5, #15
  403d40:	f04f 0a03 	mov.w	sl, #3
  403d44:	b18d      	cbz	r5, 403d6a <_dtoa_r+0x7da>
  403d46:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 403ffc <_dtoa_r+0xa6c>
  403d4a:	07ea      	lsls	r2, r5, #31
  403d4c:	d509      	bpl.n	403d62 <_dtoa_r+0x7d2>
  403d4e:	4630      	mov	r0, r6
  403d50:	4639      	mov	r1, r7
  403d52:	e9d8 2300 	ldrd	r2, r3, [r8]
  403d56:	f002 f8cd 	bl	405ef4 <__aeabi_dmul>
  403d5a:	f10a 0a01 	add.w	sl, sl, #1
  403d5e:	4606      	mov	r6, r0
  403d60:	460f      	mov	r7, r1
  403d62:	106d      	asrs	r5, r5, #1
  403d64:	f108 0808 	add.w	r8, r8, #8
  403d68:	d1ef      	bne.n	403d4a <_dtoa_r+0x7ba>
  403d6a:	463b      	mov	r3, r7
  403d6c:	4632      	mov	r2, r6
  403d6e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403d72:	f002 f9e9 	bl	406148 <__aeabi_ddiv>
  403d76:	4607      	mov	r7, r0
  403d78:	4688      	mov	r8, r1
  403d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403d7c:	b143      	cbz	r3, 403d90 <_dtoa_r+0x800>
  403d7e:	2200      	movs	r2, #0
  403d80:	4b9f      	ldr	r3, [pc, #636]	; (404000 <_dtoa_r+0xa70>)
  403d82:	4638      	mov	r0, r7
  403d84:	4641      	mov	r1, r8
  403d86:	f002 fb27 	bl	4063d8 <__aeabi_dcmplt>
  403d8a:	2800      	cmp	r0, #0
  403d8c:	f040 8286 	bne.w	40429c <_dtoa_r+0xd0c>
  403d90:	4650      	mov	r0, sl
  403d92:	f002 f849 	bl	405e28 <__aeabi_i2d>
  403d96:	463a      	mov	r2, r7
  403d98:	4643      	mov	r3, r8
  403d9a:	f002 f8ab 	bl	405ef4 <__aeabi_dmul>
  403d9e:	4b99      	ldr	r3, [pc, #612]	; (404004 <_dtoa_r+0xa74>)
  403da0:	2200      	movs	r2, #0
  403da2:	f001 fef5 	bl	405b90 <__adddf3>
  403da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403da8:	4605      	mov	r5, r0
  403daa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  403dae:	2b00      	cmp	r3, #0
  403db0:	f000 813e 	beq.w	404030 <_dtoa_r+0xaa0>
  403db4:	9b02      	ldr	r3, [sp, #8]
  403db6:	9315      	str	r3, [sp, #84]	; 0x54
  403db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dba:	9312      	str	r3, [sp, #72]	; 0x48
  403dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403dbe:	2b00      	cmp	r3, #0
  403dc0:	f000 81fa 	beq.w	4041b8 <_dtoa_r+0xc28>
  403dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403dc6:	4b8c      	ldr	r3, [pc, #560]	; (403ff8 <_dtoa_r+0xa68>)
  403dc8:	498f      	ldr	r1, [pc, #572]	; (404008 <_dtoa_r+0xa78>)
  403dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403dce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  403dd2:	2000      	movs	r0, #0
  403dd4:	f002 f9b8 	bl	406148 <__aeabi_ddiv>
  403dd8:	462a      	mov	r2, r5
  403dda:	4633      	mov	r3, r6
  403ddc:	f001 fed6 	bl	405b8c <__aeabi_dsub>
  403de0:	4682      	mov	sl, r0
  403de2:	468b      	mov	fp, r1
  403de4:	4638      	mov	r0, r7
  403de6:	4641      	mov	r1, r8
  403de8:	f002 fb34 	bl	406454 <__aeabi_d2iz>
  403dec:	4605      	mov	r5, r0
  403dee:	f002 f81b 	bl	405e28 <__aeabi_i2d>
  403df2:	4602      	mov	r2, r0
  403df4:	460b      	mov	r3, r1
  403df6:	4638      	mov	r0, r7
  403df8:	4641      	mov	r1, r8
  403dfa:	f001 fec7 	bl	405b8c <__aeabi_dsub>
  403dfe:	3530      	adds	r5, #48	; 0x30
  403e00:	fa5f f885 	uxtb.w	r8, r5
  403e04:	9d04      	ldr	r5, [sp, #16]
  403e06:	4606      	mov	r6, r0
  403e08:	460f      	mov	r7, r1
  403e0a:	f885 8000 	strb.w	r8, [r5]
  403e0e:	4602      	mov	r2, r0
  403e10:	460b      	mov	r3, r1
  403e12:	4650      	mov	r0, sl
  403e14:	4659      	mov	r1, fp
  403e16:	3501      	adds	r5, #1
  403e18:	f002 fafc 	bl	406414 <__aeabi_dcmpgt>
  403e1c:	2800      	cmp	r0, #0
  403e1e:	d154      	bne.n	403eca <_dtoa_r+0x93a>
  403e20:	4632      	mov	r2, r6
  403e22:	463b      	mov	r3, r7
  403e24:	2000      	movs	r0, #0
  403e26:	4976      	ldr	r1, [pc, #472]	; (404000 <_dtoa_r+0xa70>)
  403e28:	f001 feb0 	bl	405b8c <__aeabi_dsub>
  403e2c:	4602      	mov	r2, r0
  403e2e:	460b      	mov	r3, r1
  403e30:	4650      	mov	r0, sl
  403e32:	4659      	mov	r1, fp
  403e34:	f002 faee 	bl	406414 <__aeabi_dcmpgt>
  403e38:	2800      	cmp	r0, #0
  403e3a:	f040 8270 	bne.w	40431e <_dtoa_r+0xd8e>
  403e3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403e40:	2a01      	cmp	r2, #1
  403e42:	f000 8111 	beq.w	404068 <_dtoa_r+0xad8>
  403e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e48:	9a04      	ldr	r2, [sp, #16]
  403e4a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  403e4e:	4413      	add	r3, r2
  403e50:	4699      	mov	r9, r3
  403e52:	e00d      	b.n	403e70 <_dtoa_r+0x8e0>
  403e54:	2000      	movs	r0, #0
  403e56:	496a      	ldr	r1, [pc, #424]	; (404000 <_dtoa_r+0xa70>)
  403e58:	f001 fe98 	bl	405b8c <__aeabi_dsub>
  403e5c:	4652      	mov	r2, sl
  403e5e:	465b      	mov	r3, fp
  403e60:	f002 faba 	bl	4063d8 <__aeabi_dcmplt>
  403e64:	2800      	cmp	r0, #0
  403e66:	f040 8258 	bne.w	40431a <_dtoa_r+0xd8a>
  403e6a:	454d      	cmp	r5, r9
  403e6c:	f000 80fa 	beq.w	404064 <_dtoa_r+0xad4>
  403e70:	4650      	mov	r0, sl
  403e72:	4659      	mov	r1, fp
  403e74:	2200      	movs	r2, #0
  403e76:	4b65      	ldr	r3, [pc, #404]	; (40400c <_dtoa_r+0xa7c>)
  403e78:	f002 f83c 	bl	405ef4 <__aeabi_dmul>
  403e7c:	2200      	movs	r2, #0
  403e7e:	4b63      	ldr	r3, [pc, #396]	; (40400c <_dtoa_r+0xa7c>)
  403e80:	4682      	mov	sl, r0
  403e82:	468b      	mov	fp, r1
  403e84:	4630      	mov	r0, r6
  403e86:	4639      	mov	r1, r7
  403e88:	f002 f834 	bl	405ef4 <__aeabi_dmul>
  403e8c:	460f      	mov	r7, r1
  403e8e:	4606      	mov	r6, r0
  403e90:	f002 fae0 	bl	406454 <__aeabi_d2iz>
  403e94:	4680      	mov	r8, r0
  403e96:	f001 ffc7 	bl	405e28 <__aeabi_i2d>
  403e9a:	4602      	mov	r2, r0
  403e9c:	460b      	mov	r3, r1
  403e9e:	4630      	mov	r0, r6
  403ea0:	4639      	mov	r1, r7
  403ea2:	f001 fe73 	bl	405b8c <__aeabi_dsub>
  403ea6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  403eaa:	fa5f f888 	uxtb.w	r8, r8
  403eae:	4652      	mov	r2, sl
  403eb0:	465b      	mov	r3, fp
  403eb2:	f805 8b01 	strb.w	r8, [r5], #1
  403eb6:	4606      	mov	r6, r0
  403eb8:	460f      	mov	r7, r1
  403eba:	f002 fa8d 	bl	4063d8 <__aeabi_dcmplt>
  403ebe:	4632      	mov	r2, r6
  403ec0:	463b      	mov	r3, r7
  403ec2:	2800      	cmp	r0, #0
  403ec4:	d0c6      	beq.n	403e54 <_dtoa_r+0x8c4>
  403ec6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  403eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403ecc:	9302      	str	r3, [sp, #8]
  403ece:	e523      	b.n	403918 <_dtoa_r+0x388>
  403ed0:	2300      	movs	r3, #0
  403ed2:	930b      	str	r3, [sp, #44]	; 0x2c
  403ed4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403ed6:	2b00      	cmp	r3, #0
  403ed8:	f340 80dc 	ble.w	404094 <_dtoa_r+0xb04>
  403edc:	461f      	mov	r7, r3
  403ede:	461e      	mov	r6, r3
  403ee0:	930f      	str	r3, [sp, #60]	; 0x3c
  403ee2:	930a      	str	r3, [sp, #40]	; 0x28
  403ee4:	e6f6      	b.n	403cd4 <_dtoa_r+0x744>
  403ee6:	2301      	movs	r3, #1
  403ee8:	930b      	str	r3, [sp, #44]	; 0x2c
  403eea:	e7f3      	b.n	403ed4 <_dtoa_r+0x944>
  403eec:	f1ba 0f00 	cmp.w	sl, #0
  403ef0:	f47f ada8 	bne.w	403a44 <_dtoa_r+0x4b4>
  403ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403ef8:	2b00      	cmp	r3, #0
  403efa:	f47f adba 	bne.w	403a72 <_dtoa_r+0x4e2>
  403efe:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  403f02:	0d3f      	lsrs	r7, r7, #20
  403f04:	053f      	lsls	r7, r7, #20
  403f06:	2f00      	cmp	r7, #0
  403f08:	f000 820d 	beq.w	404326 <_dtoa_r+0xd96>
  403f0c:	9b08      	ldr	r3, [sp, #32]
  403f0e:	3301      	adds	r3, #1
  403f10:	9308      	str	r3, [sp, #32]
  403f12:	9b06      	ldr	r3, [sp, #24]
  403f14:	3301      	adds	r3, #1
  403f16:	9306      	str	r3, [sp, #24]
  403f18:	2301      	movs	r3, #1
  403f1a:	930c      	str	r3, [sp, #48]	; 0x30
  403f1c:	e5ab      	b.n	403a76 <_dtoa_r+0x4e6>
  403f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f20:	2b00      	cmp	r3, #0
  403f22:	f73f ac42 	bgt.w	4037aa <_dtoa_r+0x21a>
  403f26:	f040 8221 	bne.w	40436c <_dtoa_r+0xddc>
  403f2a:	2200      	movs	r2, #0
  403f2c:	4b38      	ldr	r3, [pc, #224]	; (404010 <_dtoa_r+0xa80>)
  403f2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403f32:	f001 ffdf 	bl	405ef4 <__aeabi_dmul>
  403f36:	4652      	mov	r2, sl
  403f38:	465b      	mov	r3, fp
  403f3a:	f002 fa61 	bl	406400 <__aeabi_dcmpge>
  403f3e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  403f42:	4646      	mov	r6, r8
  403f44:	2800      	cmp	r0, #0
  403f46:	d041      	beq.n	403fcc <_dtoa_r+0xa3c>
  403f48:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403f4a:	9d04      	ldr	r5, [sp, #16]
  403f4c:	43db      	mvns	r3, r3
  403f4e:	9302      	str	r3, [sp, #8]
  403f50:	4641      	mov	r1, r8
  403f52:	4620      	mov	r0, r4
  403f54:	f000 fe40 	bl	404bd8 <_Bfree>
  403f58:	2e00      	cmp	r6, #0
  403f5a:	f43f acdd 	beq.w	403918 <_dtoa_r+0x388>
  403f5e:	e6a7      	b.n	403cb0 <_dtoa_r+0x720>
  403f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403f62:	4649      	mov	r1, r9
  403f64:	4620      	mov	r0, r4
  403f66:	f000 ff6d 	bl	404e44 <__pow5mult>
  403f6a:	4681      	mov	r9, r0
  403f6c:	e558      	b.n	403a20 <_dtoa_r+0x490>
  403f6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403f70:	2a00      	cmp	r2, #0
  403f72:	f000 8187 	beq.w	404284 <_dtoa_r+0xcf4>
  403f76:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403f7a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403f7c:	9d08      	ldr	r5, [sp, #32]
  403f7e:	e4f2      	b.n	403966 <_dtoa_r+0x3d6>
  403f80:	f1ba 0f00 	cmp.w	sl, #0
  403f84:	f47f ad75 	bne.w	403a72 <_dtoa_r+0x4e2>
  403f88:	e7b4      	b.n	403ef4 <_dtoa_r+0x964>
  403f8a:	f000 fe2f 	bl	404bec <__multadd>
  403f8e:	4647      	mov	r7, r8
  403f90:	4606      	mov	r6, r0
  403f92:	4683      	mov	fp, r0
  403f94:	e5be      	b.n	403b14 <_dtoa_r+0x584>
  403f96:	4601      	mov	r1, r0
  403f98:	4620      	mov	r0, r4
  403f9a:	9306      	str	r3, [sp, #24]
  403f9c:	f000 fe1c 	bl	404bd8 <_Bfree>
  403fa0:	2201      	movs	r2, #1
  403fa2:	9b06      	ldr	r3, [sp, #24]
  403fa4:	e5e0      	b.n	403b68 <_dtoa_r+0x5d8>
  403fa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fa8:	2b02      	cmp	r3, #2
  403faa:	f77f ad96 	ble.w	403ada <_dtoa_r+0x54a>
  403fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fb0:	2b00      	cmp	r3, #0
  403fb2:	d1c9      	bne.n	403f48 <_dtoa_r+0x9b8>
  403fb4:	4641      	mov	r1, r8
  403fb6:	2205      	movs	r2, #5
  403fb8:	4620      	mov	r0, r4
  403fba:	f000 fe17 	bl	404bec <__multadd>
  403fbe:	4601      	mov	r1, r0
  403fc0:	4680      	mov	r8, r0
  403fc2:	4648      	mov	r0, r9
  403fc4:	f000 ffe0 	bl	404f88 <__mcmp>
  403fc8:	2800      	cmp	r0, #0
  403fca:	ddbd      	ble.n	403f48 <_dtoa_r+0x9b8>
  403fcc:	9a02      	ldr	r2, [sp, #8]
  403fce:	9904      	ldr	r1, [sp, #16]
  403fd0:	2331      	movs	r3, #49	; 0x31
  403fd2:	3201      	adds	r2, #1
  403fd4:	9202      	str	r2, [sp, #8]
  403fd6:	700b      	strb	r3, [r1, #0]
  403fd8:	1c4d      	adds	r5, r1, #1
  403fda:	e7b9      	b.n	403f50 <_dtoa_r+0x9c0>
  403fdc:	9a02      	ldr	r2, [sp, #8]
  403fde:	3201      	adds	r2, #1
  403fe0:	9202      	str	r2, [sp, #8]
  403fe2:	9a04      	ldr	r2, [sp, #16]
  403fe4:	2331      	movs	r3, #49	; 0x31
  403fe6:	7013      	strb	r3, [r2, #0]
  403fe8:	e652      	b.n	403c90 <_dtoa_r+0x700>
  403fea:	2301      	movs	r3, #1
  403fec:	930b      	str	r3, [sp, #44]	; 0x2c
  403fee:	e666      	b.n	403cbe <_dtoa_r+0x72e>
  403ff0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403ff4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403ff6:	e48f      	b.n	403918 <_dtoa_r+0x388>
  403ff8:	004072e0 	.word	0x004072e0
  403ffc:	004072b8 	.word	0x004072b8
  404000:	3ff00000 	.word	0x3ff00000
  404004:	401c0000 	.word	0x401c0000
  404008:	3fe00000 	.word	0x3fe00000
  40400c:	40240000 	.word	0x40240000
  404010:	40140000 	.word	0x40140000
  404014:	4650      	mov	r0, sl
  404016:	f001 ff07 	bl	405e28 <__aeabi_i2d>
  40401a:	463a      	mov	r2, r7
  40401c:	4643      	mov	r3, r8
  40401e:	f001 ff69 	bl	405ef4 <__aeabi_dmul>
  404022:	2200      	movs	r2, #0
  404024:	4bc1      	ldr	r3, [pc, #772]	; (40432c <_dtoa_r+0xd9c>)
  404026:	f001 fdb3 	bl	405b90 <__adddf3>
  40402a:	4605      	mov	r5, r0
  40402c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404030:	4641      	mov	r1, r8
  404032:	2200      	movs	r2, #0
  404034:	4bbe      	ldr	r3, [pc, #760]	; (404330 <_dtoa_r+0xda0>)
  404036:	4638      	mov	r0, r7
  404038:	f001 fda8 	bl	405b8c <__aeabi_dsub>
  40403c:	462a      	mov	r2, r5
  40403e:	4633      	mov	r3, r6
  404040:	4682      	mov	sl, r0
  404042:	468b      	mov	fp, r1
  404044:	f002 f9e6 	bl	406414 <__aeabi_dcmpgt>
  404048:	4680      	mov	r8, r0
  40404a:	2800      	cmp	r0, #0
  40404c:	f040 8110 	bne.w	404270 <_dtoa_r+0xce0>
  404050:	462a      	mov	r2, r5
  404052:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  404056:	4650      	mov	r0, sl
  404058:	4659      	mov	r1, fp
  40405a:	f002 f9bd 	bl	4063d8 <__aeabi_dcmplt>
  40405e:	b118      	cbz	r0, 404068 <_dtoa_r+0xad8>
  404060:	4646      	mov	r6, r8
  404062:	e771      	b.n	403f48 <_dtoa_r+0x9b8>
  404064:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404068:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40406c:	f7ff bb8a 	b.w	403784 <_dtoa_r+0x1f4>
  404070:	9804      	ldr	r0, [sp, #16]
  404072:	f7ff babb 	b.w	4035ec <_dtoa_r+0x5c>
  404076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40407a:	970c      	str	r7, [sp, #48]	; 0x30
  40407c:	1afb      	subs	r3, r7, r3
  40407e:	441a      	add	r2, r3
  404080:	920d      	str	r2, [sp, #52]	; 0x34
  404082:	2700      	movs	r7, #0
  404084:	e469      	b.n	40395a <_dtoa_r+0x3ca>
  404086:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40408a:	f04f 0a02 	mov.w	sl, #2
  40408e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  404092:	e657      	b.n	403d44 <_dtoa_r+0x7b4>
  404094:	2100      	movs	r1, #0
  404096:	2301      	movs	r3, #1
  404098:	6461      	str	r1, [r4, #68]	; 0x44
  40409a:	4620      	mov	r0, r4
  40409c:	9325      	str	r3, [sp, #148]	; 0x94
  40409e:	f000 fd75 	bl	404b8c <_Balloc>
  4040a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4040a4:	9004      	str	r0, [sp, #16]
  4040a6:	6420      	str	r0, [r4, #64]	; 0x40
  4040a8:	930a      	str	r3, [sp, #40]	; 0x28
  4040aa:	930f      	str	r3, [sp, #60]	; 0x3c
  4040ac:	e629      	b.n	403d02 <_dtoa_r+0x772>
  4040ae:	2a00      	cmp	r2, #0
  4040b0:	46d0      	mov	r8, sl
  4040b2:	f8cd b018 	str.w	fp, [sp, #24]
  4040b6:	469a      	mov	sl, r3
  4040b8:	dd11      	ble.n	4040de <_dtoa_r+0xb4e>
  4040ba:	4649      	mov	r1, r9
  4040bc:	2201      	movs	r2, #1
  4040be:	4620      	mov	r0, r4
  4040c0:	f000 ff10 	bl	404ee4 <__lshift>
  4040c4:	4641      	mov	r1, r8
  4040c6:	4681      	mov	r9, r0
  4040c8:	f000 ff5e 	bl	404f88 <__mcmp>
  4040cc:	2800      	cmp	r0, #0
  4040ce:	f340 8146 	ble.w	40435e <_dtoa_r+0xdce>
  4040d2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4040d6:	f000 8106 	beq.w	4042e6 <_dtoa_r+0xd56>
  4040da:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4040de:	46b3      	mov	fp, r6
  4040e0:	f887 a000 	strb.w	sl, [r7]
  4040e4:	1c7d      	adds	r5, r7, #1
  4040e6:	9e06      	ldr	r6, [sp, #24]
  4040e8:	e5d2      	b.n	403c90 <_dtoa_r+0x700>
  4040ea:	d104      	bne.n	4040f6 <_dtoa_r+0xb66>
  4040ec:	f01a 0f01 	tst.w	sl, #1
  4040f0:	d001      	beq.n	4040f6 <_dtoa_r+0xb66>
  4040f2:	e5bd      	b.n	403c70 <_dtoa_r+0x6e0>
  4040f4:	4615      	mov	r5, r2
  4040f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4040fa:	2b30      	cmp	r3, #48	; 0x30
  4040fc:	f105 32ff 	add.w	r2, r5, #4294967295
  404100:	d0f8      	beq.n	4040f4 <_dtoa_r+0xb64>
  404102:	e5c5      	b.n	403c90 <_dtoa_r+0x700>
  404104:	9904      	ldr	r1, [sp, #16]
  404106:	2230      	movs	r2, #48	; 0x30
  404108:	700a      	strb	r2, [r1, #0]
  40410a:	9a02      	ldr	r2, [sp, #8]
  40410c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404110:	3201      	adds	r2, #1
  404112:	9202      	str	r2, [sp, #8]
  404114:	f7ff bbfc 	b.w	403910 <_dtoa_r+0x380>
  404118:	f000 80bb 	beq.w	404292 <_dtoa_r+0xd02>
  40411c:	9b02      	ldr	r3, [sp, #8]
  40411e:	425d      	negs	r5, r3
  404120:	4b84      	ldr	r3, [pc, #528]	; (404334 <_dtoa_r+0xda4>)
  404122:	f005 020f 	and.w	r2, r5, #15
  404126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40412a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40412e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404132:	f001 fedf 	bl	405ef4 <__aeabi_dmul>
  404136:	112d      	asrs	r5, r5, #4
  404138:	4607      	mov	r7, r0
  40413a:	4688      	mov	r8, r1
  40413c:	f000 812c 	beq.w	404398 <_dtoa_r+0xe08>
  404140:	4e7d      	ldr	r6, [pc, #500]	; (404338 <_dtoa_r+0xda8>)
  404142:	f04f 0a02 	mov.w	sl, #2
  404146:	07eb      	lsls	r3, r5, #31
  404148:	d509      	bpl.n	40415e <_dtoa_r+0xbce>
  40414a:	4638      	mov	r0, r7
  40414c:	4641      	mov	r1, r8
  40414e:	e9d6 2300 	ldrd	r2, r3, [r6]
  404152:	f001 fecf 	bl	405ef4 <__aeabi_dmul>
  404156:	f10a 0a01 	add.w	sl, sl, #1
  40415a:	4607      	mov	r7, r0
  40415c:	4688      	mov	r8, r1
  40415e:	106d      	asrs	r5, r5, #1
  404160:	f106 0608 	add.w	r6, r6, #8
  404164:	d1ef      	bne.n	404146 <_dtoa_r+0xbb6>
  404166:	e608      	b.n	403d7a <_dtoa_r+0x7ea>
  404168:	6871      	ldr	r1, [r6, #4]
  40416a:	4620      	mov	r0, r4
  40416c:	f000 fd0e 	bl	404b8c <_Balloc>
  404170:	6933      	ldr	r3, [r6, #16]
  404172:	3302      	adds	r3, #2
  404174:	009a      	lsls	r2, r3, #2
  404176:	4605      	mov	r5, r0
  404178:	f106 010c 	add.w	r1, r6, #12
  40417c:	300c      	adds	r0, #12
  40417e:	f000 fc5f 	bl	404a40 <memcpy>
  404182:	4629      	mov	r1, r5
  404184:	2201      	movs	r2, #1
  404186:	4620      	mov	r0, r4
  404188:	f000 feac 	bl	404ee4 <__lshift>
  40418c:	9006      	str	r0, [sp, #24]
  40418e:	e4b5      	b.n	403afc <_dtoa_r+0x56c>
  404190:	2b39      	cmp	r3, #57	; 0x39
  404192:	f8cd b018 	str.w	fp, [sp, #24]
  404196:	46d0      	mov	r8, sl
  404198:	f000 80a5 	beq.w	4042e6 <_dtoa_r+0xd56>
  40419c:	f103 0a01 	add.w	sl, r3, #1
  4041a0:	46b3      	mov	fp, r6
  4041a2:	f887 a000 	strb.w	sl, [r7]
  4041a6:	1c7d      	adds	r5, r7, #1
  4041a8:	9e06      	ldr	r6, [sp, #24]
  4041aa:	e571      	b.n	403c90 <_dtoa_r+0x700>
  4041ac:	465a      	mov	r2, fp
  4041ae:	46d0      	mov	r8, sl
  4041b0:	46b3      	mov	fp, r6
  4041b2:	469a      	mov	sl, r3
  4041b4:	4616      	mov	r6, r2
  4041b6:	e54f      	b.n	403c58 <_dtoa_r+0x6c8>
  4041b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041ba:	495e      	ldr	r1, [pc, #376]	; (404334 <_dtoa_r+0xda4>)
  4041bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4041c0:	462a      	mov	r2, r5
  4041c2:	4633      	mov	r3, r6
  4041c4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4041c8:	f001 fe94 	bl	405ef4 <__aeabi_dmul>
  4041cc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4041d0:	4638      	mov	r0, r7
  4041d2:	4641      	mov	r1, r8
  4041d4:	f002 f93e 	bl	406454 <__aeabi_d2iz>
  4041d8:	4605      	mov	r5, r0
  4041da:	f001 fe25 	bl	405e28 <__aeabi_i2d>
  4041de:	460b      	mov	r3, r1
  4041e0:	4602      	mov	r2, r0
  4041e2:	4641      	mov	r1, r8
  4041e4:	4638      	mov	r0, r7
  4041e6:	f001 fcd1 	bl	405b8c <__aeabi_dsub>
  4041ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041ec:	460f      	mov	r7, r1
  4041ee:	9904      	ldr	r1, [sp, #16]
  4041f0:	3530      	adds	r5, #48	; 0x30
  4041f2:	2b01      	cmp	r3, #1
  4041f4:	700d      	strb	r5, [r1, #0]
  4041f6:	4606      	mov	r6, r0
  4041f8:	f101 0501 	add.w	r5, r1, #1
  4041fc:	d026      	beq.n	40424c <_dtoa_r+0xcbc>
  4041fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404200:	9a04      	ldr	r2, [sp, #16]
  404202:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404340 <_dtoa_r+0xdb0>
  404206:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40420a:	4413      	add	r3, r2
  40420c:	f04f 0a00 	mov.w	sl, #0
  404210:	4699      	mov	r9, r3
  404212:	4652      	mov	r2, sl
  404214:	465b      	mov	r3, fp
  404216:	4630      	mov	r0, r6
  404218:	4639      	mov	r1, r7
  40421a:	f001 fe6b 	bl	405ef4 <__aeabi_dmul>
  40421e:	460f      	mov	r7, r1
  404220:	4606      	mov	r6, r0
  404222:	f002 f917 	bl	406454 <__aeabi_d2iz>
  404226:	4680      	mov	r8, r0
  404228:	f001 fdfe 	bl	405e28 <__aeabi_i2d>
  40422c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404230:	4602      	mov	r2, r0
  404232:	460b      	mov	r3, r1
  404234:	4630      	mov	r0, r6
  404236:	4639      	mov	r1, r7
  404238:	f001 fca8 	bl	405b8c <__aeabi_dsub>
  40423c:	f805 8b01 	strb.w	r8, [r5], #1
  404240:	454d      	cmp	r5, r9
  404242:	4606      	mov	r6, r0
  404244:	460f      	mov	r7, r1
  404246:	d1e4      	bne.n	404212 <_dtoa_r+0xc82>
  404248:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40424c:	4b3b      	ldr	r3, [pc, #236]	; (40433c <_dtoa_r+0xdac>)
  40424e:	2200      	movs	r2, #0
  404250:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404254:	f001 fc9c 	bl	405b90 <__adddf3>
  404258:	4632      	mov	r2, r6
  40425a:	463b      	mov	r3, r7
  40425c:	f002 f8bc 	bl	4063d8 <__aeabi_dcmplt>
  404260:	2800      	cmp	r0, #0
  404262:	d046      	beq.n	4042f2 <_dtoa_r+0xd62>
  404264:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404266:	9302      	str	r3, [sp, #8]
  404268:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40426c:	f7ff bb43 	b.w	4038f6 <_dtoa_r+0x366>
  404270:	f04f 0800 	mov.w	r8, #0
  404274:	4646      	mov	r6, r8
  404276:	e6a9      	b.n	403fcc <_dtoa_r+0xa3c>
  404278:	9b08      	ldr	r3, [sp, #32]
  40427a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40427c:	1a9d      	subs	r5, r3, r2
  40427e:	2300      	movs	r3, #0
  404280:	f7ff bb71 	b.w	403966 <_dtoa_r+0x3d6>
  404284:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404286:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404288:	9d08      	ldr	r5, [sp, #32]
  40428a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40428e:	f7ff bb6a 	b.w	403966 <_dtoa_r+0x3d6>
  404292:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404296:	f04f 0a02 	mov.w	sl, #2
  40429a:	e56e      	b.n	403d7a <_dtoa_r+0x7ea>
  40429c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40429e:	2b00      	cmp	r3, #0
  4042a0:	f43f aeb8 	beq.w	404014 <_dtoa_r+0xa84>
  4042a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	f77f aede 	ble.w	404068 <_dtoa_r+0xad8>
  4042ac:	2200      	movs	r2, #0
  4042ae:	4b24      	ldr	r3, [pc, #144]	; (404340 <_dtoa_r+0xdb0>)
  4042b0:	4638      	mov	r0, r7
  4042b2:	4641      	mov	r1, r8
  4042b4:	f001 fe1e 	bl	405ef4 <__aeabi_dmul>
  4042b8:	4607      	mov	r7, r0
  4042ba:	4688      	mov	r8, r1
  4042bc:	f10a 0001 	add.w	r0, sl, #1
  4042c0:	f001 fdb2 	bl	405e28 <__aeabi_i2d>
  4042c4:	463a      	mov	r2, r7
  4042c6:	4643      	mov	r3, r8
  4042c8:	f001 fe14 	bl	405ef4 <__aeabi_dmul>
  4042cc:	2200      	movs	r2, #0
  4042ce:	4b17      	ldr	r3, [pc, #92]	; (40432c <_dtoa_r+0xd9c>)
  4042d0:	f001 fc5e 	bl	405b90 <__adddf3>
  4042d4:	9a02      	ldr	r2, [sp, #8]
  4042d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4042d8:	9312      	str	r3, [sp, #72]	; 0x48
  4042da:	3a01      	subs	r2, #1
  4042dc:	4605      	mov	r5, r0
  4042de:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4042e2:	9215      	str	r2, [sp, #84]	; 0x54
  4042e4:	e56a      	b.n	403dbc <_dtoa_r+0x82c>
  4042e6:	2239      	movs	r2, #57	; 0x39
  4042e8:	46b3      	mov	fp, r6
  4042ea:	703a      	strb	r2, [r7, #0]
  4042ec:	9e06      	ldr	r6, [sp, #24]
  4042ee:	1c7d      	adds	r5, r7, #1
  4042f0:	e4c0      	b.n	403c74 <_dtoa_r+0x6e4>
  4042f2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4042f6:	2000      	movs	r0, #0
  4042f8:	4910      	ldr	r1, [pc, #64]	; (40433c <_dtoa_r+0xdac>)
  4042fa:	f001 fc47 	bl	405b8c <__aeabi_dsub>
  4042fe:	4632      	mov	r2, r6
  404300:	463b      	mov	r3, r7
  404302:	f002 f887 	bl	406414 <__aeabi_dcmpgt>
  404306:	b908      	cbnz	r0, 40430c <_dtoa_r+0xd7c>
  404308:	e6ae      	b.n	404068 <_dtoa_r+0xad8>
  40430a:	4615      	mov	r5, r2
  40430c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404310:	2b30      	cmp	r3, #48	; 0x30
  404312:	f105 32ff 	add.w	r2, r5, #4294967295
  404316:	d0f8      	beq.n	40430a <_dtoa_r+0xd7a>
  404318:	e5d7      	b.n	403eca <_dtoa_r+0x93a>
  40431a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40431e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404320:	9302      	str	r3, [sp, #8]
  404322:	f7ff bae8 	b.w	4038f6 <_dtoa_r+0x366>
  404326:	970c      	str	r7, [sp, #48]	; 0x30
  404328:	f7ff bba5 	b.w	403a76 <_dtoa_r+0x4e6>
  40432c:	401c0000 	.word	0x401c0000
  404330:	40140000 	.word	0x40140000
  404334:	004072e0 	.word	0x004072e0
  404338:	004072b8 	.word	0x004072b8
  40433c:	3fe00000 	.word	0x3fe00000
  404340:	40240000 	.word	0x40240000
  404344:	2b39      	cmp	r3, #57	; 0x39
  404346:	f8cd b018 	str.w	fp, [sp, #24]
  40434a:	46d0      	mov	r8, sl
  40434c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404350:	469a      	mov	sl, r3
  404352:	d0c8      	beq.n	4042e6 <_dtoa_r+0xd56>
  404354:	f1bb 0f00 	cmp.w	fp, #0
  404358:	f73f aebf 	bgt.w	4040da <_dtoa_r+0xb4a>
  40435c:	e6bf      	b.n	4040de <_dtoa_r+0xb4e>
  40435e:	f47f aebe 	bne.w	4040de <_dtoa_r+0xb4e>
  404362:	f01a 0f01 	tst.w	sl, #1
  404366:	f43f aeba 	beq.w	4040de <_dtoa_r+0xb4e>
  40436a:	e6b2      	b.n	4040d2 <_dtoa_r+0xb42>
  40436c:	f04f 0800 	mov.w	r8, #0
  404370:	4646      	mov	r6, r8
  404372:	e5e9      	b.n	403f48 <_dtoa_r+0x9b8>
  404374:	4631      	mov	r1, r6
  404376:	2300      	movs	r3, #0
  404378:	220a      	movs	r2, #10
  40437a:	4620      	mov	r0, r4
  40437c:	f000 fc36 	bl	404bec <__multadd>
  404380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404382:	2b00      	cmp	r3, #0
  404384:	4606      	mov	r6, r0
  404386:	dd0a      	ble.n	40439e <_dtoa_r+0xe0e>
  404388:	930a      	str	r3, [sp, #40]	; 0x28
  40438a:	f7ff bbaa 	b.w	403ae2 <_dtoa_r+0x552>
  40438e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404390:	2b02      	cmp	r3, #2
  404392:	dc23      	bgt.n	4043dc <_dtoa_r+0xe4c>
  404394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404396:	e43b      	b.n	403c10 <_dtoa_r+0x680>
  404398:	f04f 0a02 	mov.w	sl, #2
  40439c:	e4ed      	b.n	403d7a <_dtoa_r+0x7ea>
  40439e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4043a0:	2b02      	cmp	r3, #2
  4043a2:	dc1b      	bgt.n	4043dc <_dtoa_r+0xe4c>
  4043a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4043a6:	e7ef      	b.n	404388 <_dtoa_r+0xdf8>
  4043a8:	2500      	movs	r5, #0
  4043aa:	6465      	str	r5, [r4, #68]	; 0x44
  4043ac:	4629      	mov	r1, r5
  4043ae:	4620      	mov	r0, r4
  4043b0:	f000 fbec 	bl	404b8c <_Balloc>
  4043b4:	f04f 33ff 	mov.w	r3, #4294967295
  4043b8:	930a      	str	r3, [sp, #40]	; 0x28
  4043ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4043bc:	2301      	movs	r3, #1
  4043be:	9004      	str	r0, [sp, #16]
  4043c0:	9525      	str	r5, [sp, #148]	; 0x94
  4043c2:	6420      	str	r0, [r4, #64]	; 0x40
  4043c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4043c6:	f7ff b9dd 	b.w	403784 <_dtoa_r+0x1f4>
  4043ca:	2501      	movs	r5, #1
  4043cc:	f7ff b9a5 	b.w	40371a <_dtoa_r+0x18a>
  4043d0:	f43f ab69 	beq.w	403aa6 <_dtoa_r+0x516>
  4043d4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4043d8:	f7ff bbf9 	b.w	403bce <_dtoa_r+0x63e>
  4043dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4043de:	930a      	str	r3, [sp, #40]	; 0x28
  4043e0:	e5e5      	b.n	403fae <_dtoa_r+0xa1e>
  4043e2:	bf00      	nop

004043e4 <__libc_fini_array>:
  4043e4:	b538      	push	{r3, r4, r5, lr}
  4043e6:	4c0a      	ldr	r4, [pc, #40]	; (404410 <__libc_fini_array+0x2c>)
  4043e8:	4d0a      	ldr	r5, [pc, #40]	; (404414 <__libc_fini_array+0x30>)
  4043ea:	1b64      	subs	r4, r4, r5
  4043ec:	10a4      	asrs	r4, r4, #2
  4043ee:	d00a      	beq.n	404406 <__libc_fini_array+0x22>
  4043f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4043f4:	3b01      	subs	r3, #1
  4043f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4043fa:	3c01      	subs	r4, #1
  4043fc:	f855 3904 	ldr.w	r3, [r5], #-4
  404400:	4798      	blx	r3
  404402:	2c00      	cmp	r4, #0
  404404:	d1f9      	bne.n	4043fa <__libc_fini_array+0x16>
  404406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40440a:	f003 b867 	b.w	4074dc <_fini>
  40440e:	bf00      	nop
  404410:	004074ec 	.word	0x004074ec
  404414:	004074e8 	.word	0x004074e8

00404418 <_localeconv_r>:
  404418:	4a04      	ldr	r2, [pc, #16]	; (40442c <_localeconv_r+0x14>)
  40441a:	4b05      	ldr	r3, [pc, #20]	; (404430 <_localeconv_r+0x18>)
  40441c:	6812      	ldr	r2, [r2, #0]
  40441e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404420:	2800      	cmp	r0, #0
  404422:	bf08      	it	eq
  404424:	4618      	moveq	r0, r3
  404426:	30f0      	adds	r0, #240	; 0xf0
  404428:	4770      	bx	lr
  40442a:	bf00      	nop
  40442c:	20400020 	.word	0x20400020
  404430:	20400864 	.word	0x20400864

00404434 <__retarget_lock_acquire_recursive>:
  404434:	4770      	bx	lr
  404436:	bf00      	nop

00404438 <__retarget_lock_release_recursive>:
  404438:	4770      	bx	lr
  40443a:	bf00      	nop

0040443c <_malloc_r>:
  40443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404440:	f101 060b 	add.w	r6, r1, #11
  404444:	2e16      	cmp	r6, #22
  404446:	b083      	sub	sp, #12
  404448:	4605      	mov	r5, r0
  40444a:	f240 809e 	bls.w	40458a <_malloc_r+0x14e>
  40444e:	f036 0607 	bics.w	r6, r6, #7
  404452:	f100 80bd 	bmi.w	4045d0 <_malloc_r+0x194>
  404456:	42b1      	cmp	r1, r6
  404458:	f200 80ba 	bhi.w	4045d0 <_malloc_r+0x194>
  40445c:	f000 fb8a 	bl	404b74 <__malloc_lock>
  404460:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404464:	f0c0 8293 	bcc.w	40498e <_malloc_r+0x552>
  404468:	0a73      	lsrs	r3, r6, #9
  40446a:	f000 80b8 	beq.w	4045de <_malloc_r+0x1a2>
  40446e:	2b04      	cmp	r3, #4
  404470:	f200 8179 	bhi.w	404766 <_malloc_r+0x32a>
  404474:	09b3      	lsrs	r3, r6, #6
  404476:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40447a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40447e:	00c3      	lsls	r3, r0, #3
  404480:	4fbf      	ldr	r7, [pc, #764]	; (404780 <_malloc_r+0x344>)
  404482:	443b      	add	r3, r7
  404484:	f1a3 0108 	sub.w	r1, r3, #8
  404488:	685c      	ldr	r4, [r3, #4]
  40448a:	42a1      	cmp	r1, r4
  40448c:	d106      	bne.n	40449c <_malloc_r+0x60>
  40448e:	e00c      	b.n	4044aa <_malloc_r+0x6e>
  404490:	2a00      	cmp	r2, #0
  404492:	f280 80aa 	bge.w	4045ea <_malloc_r+0x1ae>
  404496:	68e4      	ldr	r4, [r4, #12]
  404498:	42a1      	cmp	r1, r4
  40449a:	d006      	beq.n	4044aa <_malloc_r+0x6e>
  40449c:	6863      	ldr	r3, [r4, #4]
  40449e:	f023 0303 	bic.w	r3, r3, #3
  4044a2:	1b9a      	subs	r2, r3, r6
  4044a4:	2a0f      	cmp	r2, #15
  4044a6:	ddf3      	ble.n	404490 <_malloc_r+0x54>
  4044a8:	4670      	mov	r0, lr
  4044aa:	693c      	ldr	r4, [r7, #16]
  4044ac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404794 <_malloc_r+0x358>
  4044b0:	4574      	cmp	r4, lr
  4044b2:	f000 81ab 	beq.w	40480c <_malloc_r+0x3d0>
  4044b6:	6863      	ldr	r3, [r4, #4]
  4044b8:	f023 0303 	bic.w	r3, r3, #3
  4044bc:	1b9a      	subs	r2, r3, r6
  4044be:	2a0f      	cmp	r2, #15
  4044c0:	f300 8190 	bgt.w	4047e4 <_malloc_r+0x3a8>
  4044c4:	2a00      	cmp	r2, #0
  4044c6:	f8c7 e014 	str.w	lr, [r7, #20]
  4044ca:	f8c7 e010 	str.w	lr, [r7, #16]
  4044ce:	f280 809d 	bge.w	40460c <_malloc_r+0x1d0>
  4044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4044d6:	f080 8161 	bcs.w	40479c <_malloc_r+0x360>
  4044da:	08db      	lsrs	r3, r3, #3
  4044dc:	f103 0c01 	add.w	ip, r3, #1
  4044e0:	1099      	asrs	r1, r3, #2
  4044e2:	687a      	ldr	r2, [r7, #4]
  4044e4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4044e8:	f8c4 8008 	str.w	r8, [r4, #8]
  4044ec:	2301      	movs	r3, #1
  4044ee:	408b      	lsls	r3, r1
  4044f0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4044f4:	4313      	orrs	r3, r2
  4044f6:	3908      	subs	r1, #8
  4044f8:	60e1      	str	r1, [r4, #12]
  4044fa:	607b      	str	r3, [r7, #4]
  4044fc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404500:	f8c8 400c 	str.w	r4, [r8, #12]
  404504:	1082      	asrs	r2, r0, #2
  404506:	2401      	movs	r4, #1
  404508:	4094      	lsls	r4, r2
  40450a:	429c      	cmp	r4, r3
  40450c:	f200 808b 	bhi.w	404626 <_malloc_r+0x1ea>
  404510:	421c      	tst	r4, r3
  404512:	d106      	bne.n	404522 <_malloc_r+0xe6>
  404514:	f020 0003 	bic.w	r0, r0, #3
  404518:	0064      	lsls	r4, r4, #1
  40451a:	421c      	tst	r4, r3
  40451c:	f100 0004 	add.w	r0, r0, #4
  404520:	d0fa      	beq.n	404518 <_malloc_r+0xdc>
  404522:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404526:	46cc      	mov	ip, r9
  404528:	4680      	mov	r8, r0
  40452a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40452e:	459c      	cmp	ip, r3
  404530:	d107      	bne.n	404542 <_malloc_r+0x106>
  404532:	e16d      	b.n	404810 <_malloc_r+0x3d4>
  404534:	2a00      	cmp	r2, #0
  404536:	f280 817b 	bge.w	404830 <_malloc_r+0x3f4>
  40453a:	68db      	ldr	r3, [r3, #12]
  40453c:	459c      	cmp	ip, r3
  40453e:	f000 8167 	beq.w	404810 <_malloc_r+0x3d4>
  404542:	6859      	ldr	r1, [r3, #4]
  404544:	f021 0103 	bic.w	r1, r1, #3
  404548:	1b8a      	subs	r2, r1, r6
  40454a:	2a0f      	cmp	r2, #15
  40454c:	ddf2      	ble.n	404534 <_malloc_r+0xf8>
  40454e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404552:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404556:	9300      	str	r3, [sp, #0]
  404558:	199c      	adds	r4, r3, r6
  40455a:	4628      	mov	r0, r5
  40455c:	f046 0601 	orr.w	r6, r6, #1
  404560:	f042 0501 	orr.w	r5, r2, #1
  404564:	605e      	str	r6, [r3, #4]
  404566:	f8c8 c00c 	str.w	ip, [r8, #12]
  40456a:	f8cc 8008 	str.w	r8, [ip, #8]
  40456e:	617c      	str	r4, [r7, #20]
  404570:	613c      	str	r4, [r7, #16]
  404572:	f8c4 e00c 	str.w	lr, [r4, #12]
  404576:	f8c4 e008 	str.w	lr, [r4, #8]
  40457a:	6065      	str	r5, [r4, #4]
  40457c:	505a      	str	r2, [r3, r1]
  40457e:	f000 faff 	bl	404b80 <__malloc_unlock>
  404582:	9b00      	ldr	r3, [sp, #0]
  404584:	f103 0408 	add.w	r4, r3, #8
  404588:	e01e      	b.n	4045c8 <_malloc_r+0x18c>
  40458a:	2910      	cmp	r1, #16
  40458c:	d820      	bhi.n	4045d0 <_malloc_r+0x194>
  40458e:	f000 faf1 	bl	404b74 <__malloc_lock>
  404592:	2610      	movs	r6, #16
  404594:	2318      	movs	r3, #24
  404596:	2002      	movs	r0, #2
  404598:	4f79      	ldr	r7, [pc, #484]	; (404780 <_malloc_r+0x344>)
  40459a:	443b      	add	r3, r7
  40459c:	f1a3 0208 	sub.w	r2, r3, #8
  4045a0:	685c      	ldr	r4, [r3, #4]
  4045a2:	4294      	cmp	r4, r2
  4045a4:	f000 813d 	beq.w	404822 <_malloc_r+0x3e6>
  4045a8:	6863      	ldr	r3, [r4, #4]
  4045aa:	68e1      	ldr	r1, [r4, #12]
  4045ac:	68a6      	ldr	r6, [r4, #8]
  4045ae:	f023 0303 	bic.w	r3, r3, #3
  4045b2:	4423      	add	r3, r4
  4045b4:	4628      	mov	r0, r5
  4045b6:	685a      	ldr	r2, [r3, #4]
  4045b8:	60f1      	str	r1, [r6, #12]
  4045ba:	f042 0201 	orr.w	r2, r2, #1
  4045be:	608e      	str	r6, [r1, #8]
  4045c0:	605a      	str	r2, [r3, #4]
  4045c2:	f000 fadd 	bl	404b80 <__malloc_unlock>
  4045c6:	3408      	adds	r4, #8
  4045c8:	4620      	mov	r0, r4
  4045ca:	b003      	add	sp, #12
  4045cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045d0:	2400      	movs	r4, #0
  4045d2:	230c      	movs	r3, #12
  4045d4:	4620      	mov	r0, r4
  4045d6:	602b      	str	r3, [r5, #0]
  4045d8:	b003      	add	sp, #12
  4045da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045de:	2040      	movs	r0, #64	; 0x40
  4045e0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4045e4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4045e8:	e74a      	b.n	404480 <_malloc_r+0x44>
  4045ea:	4423      	add	r3, r4
  4045ec:	68e1      	ldr	r1, [r4, #12]
  4045ee:	685a      	ldr	r2, [r3, #4]
  4045f0:	68a6      	ldr	r6, [r4, #8]
  4045f2:	f042 0201 	orr.w	r2, r2, #1
  4045f6:	60f1      	str	r1, [r6, #12]
  4045f8:	4628      	mov	r0, r5
  4045fa:	608e      	str	r6, [r1, #8]
  4045fc:	605a      	str	r2, [r3, #4]
  4045fe:	f000 fabf 	bl	404b80 <__malloc_unlock>
  404602:	3408      	adds	r4, #8
  404604:	4620      	mov	r0, r4
  404606:	b003      	add	sp, #12
  404608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40460c:	4423      	add	r3, r4
  40460e:	4628      	mov	r0, r5
  404610:	685a      	ldr	r2, [r3, #4]
  404612:	f042 0201 	orr.w	r2, r2, #1
  404616:	605a      	str	r2, [r3, #4]
  404618:	f000 fab2 	bl	404b80 <__malloc_unlock>
  40461c:	3408      	adds	r4, #8
  40461e:	4620      	mov	r0, r4
  404620:	b003      	add	sp, #12
  404622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404626:	68bc      	ldr	r4, [r7, #8]
  404628:	6863      	ldr	r3, [r4, #4]
  40462a:	f023 0803 	bic.w	r8, r3, #3
  40462e:	45b0      	cmp	r8, r6
  404630:	d304      	bcc.n	40463c <_malloc_r+0x200>
  404632:	eba8 0306 	sub.w	r3, r8, r6
  404636:	2b0f      	cmp	r3, #15
  404638:	f300 8085 	bgt.w	404746 <_malloc_r+0x30a>
  40463c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404798 <_malloc_r+0x35c>
  404640:	4b50      	ldr	r3, [pc, #320]	; (404784 <_malloc_r+0x348>)
  404642:	f8d9 2000 	ldr.w	r2, [r9]
  404646:	681b      	ldr	r3, [r3, #0]
  404648:	3201      	adds	r2, #1
  40464a:	4433      	add	r3, r6
  40464c:	eb04 0a08 	add.w	sl, r4, r8
  404650:	f000 8155 	beq.w	4048fe <_malloc_r+0x4c2>
  404654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404658:	330f      	adds	r3, #15
  40465a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40465e:	f02b 0b0f 	bic.w	fp, fp, #15
  404662:	4659      	mov	r1, fp
  404664:	4628      	mov	r0, r5
  404666:	f000 fd8b 	bl	405180 <_sbrk_r>
  40466a:	1c41      	adds	r1, r0, #1
  40466c:	4602      	mov	r2, r0
  40466e:	f000 80fc 	beq.w	40486a <_malloc_r+0x42e>
  404672:	4582      	cmp	sl, r0
  404674:	f200 80f7 	bhi.w	404866 <_malloc_r+0x42a>
  404678:	4b43      	ldr	r3, [pc, #268]	; (404788 <_malloc_r+0x34c>)
  40467a:	6819      	ldr	r1, [r3, #0]
  40467c:	4459      	add	r1, fp
  40467e:	6019      	str	r1, [r3, #0]
  404680:	f000 814d 	beq.w	40491e <_malloc_r+0x4e2>
  404684:	f8d9 0000 	ldr.w	r0, [r9]
  404688:	3001      	adds	r0, #1
  40468a:	bf1b      	ittet	ne
  40468c:	eba2 0a0a 	subne.w	sl, r2, sl
  404690:	4451      	addne	r1, sl
  404692:	f8c9 2000 	streq.w	r2, [r9]
  404696:	6019      	strne	r1, [r3, #0]
  404698:	f012 0107 	ands.w	r1, r2, #7
  40469c:	f000 8115 	beq.w	4048ca <_malloc_r+0x48e>
  4046a0:	f1c1 0008 	rsb	r0, r1, #8
  4046a4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4046a8:	4402      	add	r2, r0
  4046aa:	3108      	adds	r1, #8
  4046ac:	eb02 090b 	add.w	r9, r2, fp
  4046b0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4046b4:	eba1 0909 	sub.w	r9, r1, r9
  4046b8:	4649      	mov	r1, r9
  4046ba:	4628      	mov	r0, r5
  4046bc:	9301      	str	r3, [sp, #4]
  4046be:	9200      	str	r2, [sp, #0]
  4046c0:	f000 fd5e 	bl	405180 <_sbrk_r>
  4046c4:	1c43      	adds	r3, r0, #1
  4046c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4046ca:	f000 8143 	beq.w	404954 <_malloc_r+0x518>
  4046ce:	1a80      	subs	r0, r0, r2
  4046d0:	4448      	add	r0, r9
  4046d2:	f040 0001 	orr.w	r0, r0, #1
  4046d6:	6819      	ldr	r1, [r3, #0]
  4046d8:	60ba      	str	r2, [r7, #8]
  4046da:	4449      	add	r1, r9
  4046dc:	42bc      	cmp	r4, r7
  4046de:	6050      	str	r0, [r2, #4]
  4046e0:	6019      	str	r1, [r3, #0]
  4046e2:	d017      	beq.n	404714 <_malloc_r+0x2d8>
  4046e4:	f1b8 0f0f 	cmp.w	r8, #15
  4046e8:	f240 80fb 	bls.w	4048e2 <_malloc_r+0x4a6>
  4046ec:	6860      	ldr	r0, [r4, #4]
  4046ee:	f1a8 020c 	sub.w	r2, r8, #12
  4046f2:	f022 0207 	bic.w	r2, r2, #7
  4046f6:	eb04 0e02 	add.w	lr, r4, r2
  4046fa:	f000 0001 	and.w	r0, r0, #1
  4046fe:	f04f 0c05 	mov.w	ip, #5
  404702:	4310      	orrs	r0, r2
  404704:	2a0f      	cmp	r2, #15
  404706:	6060      	str	r0, [r4, #4]
  404708:	f8ce c004 	str.w	ip, [lr, #4]
  40470c:	f8ce c008 	str.w	ip, [lr, #8]
  404710:	f200 8117 	bhi.w	404942 <_malloc_r+0x506>
  404714:	4b1d      	ldr	r3, [pc, #116]	; (40478c <_malloc_r+0x350>)
  404716:	68bc      	ldr	r4, [r7, #8]
  404718:	681a      	ldr	r2, [r3, #0]
  40471a:	4291      	cmp	r1, r2
  40471c:	bf88      	it	hi
  40471e:	6019      	strhi	r1, [r3, #0]
  404720:	4b1b      	ldr	r3, [pc, #108]	; (404790 <_malloc_r+0x354>)
  404722:	681a      	ldr	r2, [r3, #0]
  404724:	4291      	cmp	r1, r2
  404726:	6862      	ldr	r2, [r4, #4]
  404728:	bf88      	it	hi
  40472a:	6019      	strhi	r1, [r3, #0]
  40472c:	f022 0203 	bic.w	r2, r2, #3
  404730:	4296      	cmp	r6, r2
  404732:	eba2 0306 	sub.w	r3, r2, r6
  404736:	d801      	bhi.n	40473c <_malloc_r+0x300>
  404738:	2b0f      	cmp	r3, #15
  40473a:	dc04      	bgt.n	404746 <_malloc_r+0x30a>
  40473c:	4628      	mov	r0, r5
  40473e:	f000 fa1f 	bl	404b80 <__malloc_unlock>
  404742:	2400      	movs	r4, #0
  404744:	e740      	b.n	4045c8 <_malloc_r+0x18c>
  404746:	19a2      	adds	r2, r4, r6
  404748:	f043 0301 	orr.w	r3, r3, #1
  40474c:	f046 0601 	orr.w	r6, r6, #1
  404750:	6066      	str	r6, [r4, #4]
  404752:	4628      	mov	r0, r5
  404754:	60ba      	str	r2, [r7, #8]
  404756:	6053      	str	r3, [r2, #4]
  404758:	f000 fa12 	bl	404b80 <__malloc_unlock>
  40475c:	3408      	adds	r4, #8
  40475e:	4620      	mov	r0, r4
  404760:	b003      	add	sp, #12
  404762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404766:	2b14      	cmp	r3, #20
  404768:	d971      	bls.n	40484e <_malloc_r+0x412>
  40476a:	2b54      	cmp	r3, #84	; 0x54
  40476c:	f200 80a3 	bhi.w	4048b6 <_malloc_r+0x47a>
  404770:	0b33      	lsrs	r3, r6, #12
  404772:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404776:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40477a:	00c3      	lsls	r3, r0, #3
  40477c:	e680      	b.n	404480 <_malloc_r+0x44>
  40477e:	bf00      	nop
  404780:	20400454 	.word	0x20400454
  404784:	20400ca4 	.word	0x20400ca4
  404788:	20400c74 	.word	0x20400c74
  40478c:	20400c9c 	.word	0x20400c9c
  404790:	20400ca0 	.word	0x20400ca0
  404794:	2040045c 	.word	0x2040045c
  404798:	2040085c 	.word	0x2040085c
  40479c:	0a5a      	lsrs	r2, r3, #9
  40479e:	2a04      	cmp	r2, #4
  4047a0:	d95b      	bls.n	40485a <_malloc_r+0x41e>
  4047a2:	2a14      	cmp	r2, #20
  4047a4:	f200 80ae 	bhi.w	404904 <_malloc_r+0x4c8>
  4047a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4047ac:	00c9      	lsls	r1, r1, #3
  4047ae:	325b      	adds	r2, #91	; 0x5b
  4047b0:	eb07 0c01 	add.w	ip, r7, r1
  4047b4:	5879      	ldr	r1, [r7, r1]
  4047b6:	f1ac 0c08 	sub.w	ip, ip, #8
  4047ba:	458c      	cmp	ip, r1
  4047bc:	f000 8088 	beq.w	4048d0 <_malloc_r+0x494>
  4047c0:	684a      	ldr	r2, [r1, #4]
  4047c2:	f022 0203 	bic.w	r2, r2, #3
  4047c6:	4293      	cmp	r3, r2
  4047c8:	d273      	bcs.n	4048b2 <_malloc_r+0x476>
  4047ca:	6889      	ldr	r1, [r1, #8]
  4047cc:	458c      	cmp	ip, r1
  4047ce:	d1f7      	bne.n	4047c0 <_malloc_r+0x384>
  4047d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4047d4:	687b      	ldr	r3, [r7, #4]
  4047d6:	60e2      	str	r2, [r4, #12]
  4047d8:	f8c4 c008 	str.w	ip, [r4, #8]
  4047dc:	6094      	str	r4, [r2, #8]
  4047de:	f8cc 400c 	str.w	r4, [ip, #12]
  4047e2:	e68f      	b.n	404504 <_malloc_r+0xc8>
  4047e4:	19a1      	adds	r1, r4, r6
  4047e6:	f046 0c01 	orr.w	ip, r6, #1
  4047ea:	f042 0601 	orr.w	r6, r2, #1
  4047ee:	f8c4 c004 	str.w	ip, [r4, #4]
  4047f2:	4628      	mov	r0, r5
  4047f4:	6179      	str	r1, [r7, #20]
  4047f6:	6139      	str	r1, [r7, #16]
  4047f8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4047fc:	f8c1 e008 	str.w	lr, [r1, #8]
  404800:	604e      	str	r6, [r1, #4]
  404802:	50e2      	str	r2, [r4, r3]
  404804:	f000 f9bc 	bl	404b80 <__malloc_unlock>
  404808:	3408      	adds	r4, #8
  40480a:	e6dd      	b.n	4045c8 <_malloc_r+0x18c>
  40480c:	687b      	ldr	r3, [r7, #4]
  40480e:	e679      	b.n	404504 <_malloc_r+0xc8>
  404810:	f108 0801 	add.w	r8, r8, #1
  404814:	f018 0f03 	tst.w	r8, #3
  404818:	f10c 0c08 	add.w	ip, ip, #8
  40481c:	f47f ae85 	bne.w	40452a <_malloc_r+0xee>
  404820:	e02d      	b.n	40487e <_malloc_r+0x442>
  404822:	68dc      	ldr	r4, [r3, #12]
  404824:	42a3      	cmp	r3, r4
  404826:	bf08      	it	eq
  404828:	3002      	addeq	r0, #2
  40482a:	f43f ae3e 	beq.w	4044aa <_malloc_r+0x6e>
  40482e:	e6bb      	b.n	4045a8 <_malloc_r+0x16c>
  404830:	4419      	add	r1, r3
  404832:	461c      	mov	r4, r3
  404834:	684a      	ldr	r2, [r1, #4]
  404836:	68db      	ldr	r3, [r3, #12]
  404838:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40483c:	f042 0201 	orr.w	r2, r2, #1
  404840:	604a      	str	r2, [r1, #4]
  404842:	4628      	mov	r0, r5
  404844:	60f3      	str	r3, [r6, #12]
  404846:	609e      	str	r6, [r3, #8]
  404848:	f000 f99a 	bl	404b80 <__malloc_unlock>
  40484c:	e6bc      	b.n	4045c8 <_malloc_r+0x18c>
  40484e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404852:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404856:	00c3      	lsls	r3, r0, #3
  404858:	e612      	b.n	404480 <_malloc_r+0x44>
  40485a:	099a      	lsrs	r2, r3, #6
  40485c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404860:	00c9      	lsls	r1, r1, #3
  404862:	3238      	adds	r2, #56	; 0x38
  404864:	e7a4      	b.n	4047b0 <_malloc_r+0x374>
  404866:	42bc      	cmp	r4, r7
  404868:	d054      	beq.n	404914 <_malloc_r+0x4d8>
  40486a:	68bc      	ldr	r4, [r7, #8]
  40486c:	6862      	ldr	r2, [r4, #4]
  40486e:	f022 0203 	bic.w	r2, r2, #3
  404872:	e75d      	b.n	404730 <_malloc_r+0x2f4>
  404874:	f859 3908 	ldr.w	r3, [r9], #-8
  404878:	4599      	cmp	r9, r3
  40487a:	f040 8086 	bne.w	40498a <_malloc_r+0x54e>
  40487e:	f010 0f03 	tst.w	r0, #3
  404882:	f100 30ff 	add.w	r0, r0, #4294967295
  404886:	d1f5      	bne.n	404874 <_malloc_r+0x438>
  404888:	687b      	ldr	r3, [r7, #4]
  40488a:	ea23 0304 	bic.w	r3, r3, r4
  40488e:	607b      	str	r3, [r7, #4]
  404890:	0064      	lsls	r4, r4, #1
  404892:	429c      	cmp	r4, r3
  404894:	f63f aec7 	bhi.w	404626 <_malloc_r+0x1ea>
  404898:	2c00      	cmp	r4, #0
  40489a:	f43f aec4 	beq.w	404626 <_malloc_r+0x1ea>
  40489e:	421c      	tst	r4, r3
  4048a0:	4640      	mov	r0, r8
  4048a2:	f47f ae3e 	bne.w	404522 <_malloc_r+0xe6>
  4048a6:	0064      	lsls	r4, r4, #1
  4048a8:	421c      	tst	r4, r3
  4048aa:	f100 0004 	add.w	r0, r0, #4
  4048ae:	d0fa      	beq.n	4048a6 <_malloc_r+0x46a>
  4048b0:	e637      	b.n	404522 <_malloc_r+0xe6>
  4048b2:	468c      	mov	ip, r1
  4048b4:	e78c      	b.n	4047d0 <_malloc_r+0x394>
  4048b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4048ba:	d815      	bhi.n	4048e8 <_malloc_r+0x4ac>
  4048bc:	0bf3      	lsrs	r3, r6, #15
  4048be:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4048c2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4048c6:	00c3      	lsls	r3, r0, #3
  4048c8:	e5da      	b.n	404480 <_malloc_r+0x44>
  4048ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4048ce:	e6ed      	b.n	4046ac <_malloc_r+0x270>
  4048d0:	687b      	ldr	r3, [r7, #4]
  4048d2:	1092      	asrs	r2, r2, #2
  4048d4:	2101      	movs	r1, #1
  4048d6:	fa01 f202 	lsl.w	r2, r1, r2
  4048da:	4313      	orrs	r3, r2
  4048dc:	607b      	str	r3, [r7, #4]
  4048de:	4662      	mov	r2, ip
  4048e0:	e779      	b.n	4047d6 <_malloc_r+0x39a>
  4048e2:	2301      	movs	r3, #1
  4048e4:	6053      	str	r3, [r2, #4]
  4048e6:	e729      	b.n	40473c <_malloc_r+0x300>
  4048e8:	f240 5254 	movw	r2, #1364	; 0x554
  4048ec:	4293      	cmp	r3, r2
  4048ee:	d822      	bhi.n	404936 <_malloc_r+0x4fa>
  4048f0:	0cb3      	lsrs	r3, r6, #18
  4048f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4048f6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4048fa:	00c3      	lsls	r3, r0, #3
  4048fc:	e5c0      	b.n	404480 <_malloc_r+0x44>
  4048fe:	f103 0b10 	add.w	fp, r3, #16
  404902:	e6ae      	b.n	404662 <_malloc_r+0x226>
  404904:	2a54      	cmp	r2, #84	; 0x54
  404906:	d829      	bhi.n	40495c <_malloc_r+0x520>
  404908:	0b1a      	lsrs	r2, r3, #12
  40490a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40490e:	00c9      	lsls	r1, r1, #3
  404910:	326e      	adds	r2, #110	; 0x6e
  404912:	e74d      	b.n	4047b0 <_malloc_r+0x374>
  404914:	4b20      	ldr	r3, [pc, #128]	; (404998 <_malloc_r+0x55c>)
  404916:	6819      	ldr	r1, [r3, #0]
  404918:	4459      	add	r1, fp
  40491a:	6019      	str	r1, [r3, #0]
  40491c:	e6b2      	b.n	404684 <_malloc_r+0x248>
  40491e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404922:	2800      	cmp	r0, #0
  404924:	f47f aeae 	bne.w	404684 <_malloc_r+0x248>
  404928:	eb08 030b 	add.w	r3, r8, fp
  40492c:	68ba      	ldr	r2, [r7, #8]
  40492e:	f043 0301 	orr.w	r3, r3, #1
  404932:	6053      	str	r3, [r2, #4]
  404934:	e6ee      	b.n	404714 <_malloc_r+0x2d8>
  404936:	207f      	movs	r0, #127	; 0x7f
  404938:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40493c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404940:	e59e      	b.n	404480 <_malloc_r+0x44>
  404942:	f104 0108 	add.w	r1, r4, #8
  404946:	4628      	mov	r0, r5
  404948:	9300      	str	r3, [sp, #0]
  40494a:	f000 fe07 	bl	40555c <_free_r>
  40494e:	9b00      	ldr	r3, [sp, #0]
  404950:	6819      	ldr	r1, [r3, #0]
  404952:	e6df      	b.n	404714 <_malloc_r+0x2d8>
  404954:	2001      	movs	r0, #1
  404956:	f04f 0900 	mov.w	r9, #0
  40495a:	e6bc      	b.n	4046d6 <_malloc_r+0x29a>
  40495c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404960:	d805      	bhi.n	40496e <_malloc_r+0x532>
  404962:	0bda      	lsrs	r2, r3, #15
  404964:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404968:	00c9      	lsls	r1, r1, #3
  40496a:	3277      	adds	r2, #119	; 0x77
  40496c:	e720      	b.n	4047b0 <_malloc_r+0x374>
  40496e:	f240 5154 	movw	r1, #1364	; 0x554
  404972:	428a      	cmp	r2, r1
  404974:	d805      	bhi.n	404982 <_malloc_r+0x546>
  404976:	0c9a      	lsrs	r2, r3, #18
  404978:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40497c:	00c9      	lsls	r1, r1, #3
  40497e:	327c      	adds	r2, #124	; 0x7c
  404980:	e716      	b.n	4047b0 <_malloc_r+0x374>
  404982:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404986:	227e      	movs	r2, #126	; 0x7e
  404988:	e712      	b.n	4047b0 <_malloc_r+0x374>
  40498a:	687b      	ldr	r3, [r7, #4]
  40498c:	e780      	b.n	404890 <_malloc_r+0x454>
  40498e:	08f0      	lsrs	r0, r6, #3
  404990:	f106 0308 	add.w	r3, r6, #8
  404994:	e600      	b.n	404598 <_malloc_r+0x15c>
  404996:	bf00      	nop
  404998:	20400c74 	.word	0x20400c74
  40499c:	00000000 	.word	0x00000000

004049a0 <memchr>:
  4049a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4049a4:	2a10      	cmp	r2, #16
  4049a6:	db2b      	blt.n	404a00 <memchr+0x60>
  4049a8:	f010 0f07 	tst.w	r0, #7
  4049ac:	d008      	beq.n	4049c0 <memchr+0x20>
  4049ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4049b2:	3a01      	subs	r2, #1
  4049b4:	428b      	cmp	r3, r1
  4049b6:	d02d      	beq.n	404a14 <memchr+0x74>
  4049b8:	f010 0f07 	tst.w	r0, #7
  4049bc:	b342      	cbz	r2, 404a10 <memchr+0x70>
  4049be:	d1f6      	bne.n	4049ae <memchr+0xe>
  4049c0:	b4f0      	push	{r4, r5, r6, r7}
  4049c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4049c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4049ca:	f022 0407 	bic.w	r4, r2, #7
  4049ce:	f07f 0700 	mvns.w	r7, #0
  4049d2:	2300      	movs	r3, #0
  4049d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4049d8:	3c08      	subs	r4, #8
  4049da:	ea85 0501 	eor.w	r5, r5, r1
  4049de:	ea86 0601 	eor.w	r6, r6, r1
  4049e2:	fa85 f547 	uadd8	r5, r5, r7
  4049e6:	faa3 f587 	sel	r5, r3, r7
  4049ea:	fa86 f647 	uadd8	r6, r6, r7
  4049ee:	faa5 f687 	sel	r6, r5, r7
  4049f2:	b98e      	cbnz	r6, 404a18 <memchr+0x78>
  4049f4:	d1ee      	bne.n	4049d4 <memchr+0x34>
  4049f6:	bcf0      	pop	{r4, r5, r6, r7}
  4049f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4049fc:	f002 0207 	and.w	r2, r2, #7
  404a00:	b132      	cbz	r2, 404a10 <memchr+0x70>
  404a02:	f810 3b01 	ldrb.w	r3, [r0], #1
  404a06:	3a01      	subs	r2, #1
  404a08:	ea83 0301 	eor.w	r3, r3, r1
  404a0c:	b113      	cbz	r3, 404a14 <memchr+0x74>
  404a0e:	d1f8      	bne.n	404a02 <memchr+0x62>
  404a10:	2000      	movs	r0, #0
  404a12:	4770      	bx	lr
  404a14:	3801      	subs	r0, #1
  404a16:	4770      	bx	lr
  404a18:	2d00      	cmp	r5, #0
  404a1a:	bf06      	itte	eq
  404a1c:	4635      	moveq	r5, r6
  404a1e:	3803      	subeq	r0, #3
  404a20:	3807      	subne	r0, #7
  404a22:	f015 0f01 	tst.w	r5, #1
  404a26:	d107      	bne.n	404a38 <memchr+0x98>
  404a28:	3001      	adds	r0, #1
  404a2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404a2e:	bf02      	ittt	eq
  404a30:	3001      	addeq	r0, #1
  404a32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404a36:	3001      	addeq	r0, #1
  404a38:	bcf0      	pop	{r4, r5, r6, r7}
  404a3a:	3801      	subs	r0, #1
  404a3c:	4770      	bx	lr
  404a3e:	bf00      	nop

00404a40 <memcpy>:
  404a40:	4684      	mov	ip, r0
  404a42:	ea41 0300 	orr.w	r3, r1, r0
  404a46:	f013 0303 	ands.w	r3, r3, #3
  404a4a:	d16d      	bne.n	404b28 <memcpy+0xe8>
  404a4c:	3a40      	subs	r2, #64	; 0x40
  404a4e:	d341      	bcc.n	404ad4 <memcpy+0x94>
  404a50:	f851 3b04 	ldr.w	r3, [r1], #4
  404a54:	f840 3b04 	str.w	r3, [r0], #4
  404a58:	f851 3b04 	ldr.w	r3, [r1], #4
  404a5c:	f840 3b04 	str.w	r3, [r0], #4
  404a60:	f851 3b04 	ldr.w	r3, [r1], #4
  404a64:	f840 3b04 	str.w	r3, [r0], #4
  404a68:	f851 3b04 	ldr.w	r3, [r1], #4
  404a6c:	f840 3b04 	str.w	r3, [r0], #4
  404a70:	f851 3b04 	ldr.w	r3, [r1], #4
  404a74:	f840 3b04 	str.w	r3, [r0], #4
  404a78:	f851 3b04 	ldr.w	r3, [r1], #4
  404a7c:	f840 3b04 	str.w	r3, [r0], #4
  404a80:	f851 3b04 	ldr.w	r3, [r1], #4
  404a84:	f840 3b04 	str.w	r3, [r0], #4
  404a88:	f851 3b04 	ldr.w	r3, [r1], #4
  404a8c:	f840 3b04 	str.w	r3, [r0], #4
  404a90:	f851 3b04 	ldr.w	r3, [r1], #4
  404a94:	f840 3b04 	str.w	r3, [r0], #4
  404a98:	f851 3b04 	ldr.w	r3, [r1], #4
  404a9c:	f840 3b04 	str.w	r3, [r0], #4
  404aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404aa4:	f840 3b04 	str.w	r3, [r0], #4
  404aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aac:	f840 3b04 	str.w	r3, [r0], #4
  404ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ab4:	f840 3b04 	str.w	r3, [r0], #4
  404ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  404abc:	f840 3b04 	str.w	r3, [r0], #4
  404ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ac4:	f840 3b04 	str.w	r3, [r0], #4
  404ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  404acc:	f840 3b04 	str.w	r3, [r0], #4
  404ad0:	3a40      	subs	r2, #64	; 0x40
  404ad2:	d2bd      	bcs.n	404a50 <memcpy+0x10>
  404ad4:	3230      	adds	r2, #48	; 0x30
  404ad6:	d311      	bcc.n	404afc <memcpy+0xbc>
  404ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  404adc:	f840 3b04 	str.w	r3, [r0], #4
  404ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ae4:	f840 3b04 	str.w	r3, [r0], #4
  404ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aec:	f840 3b04 	str.w	r3, [r0], #4
  404af0:	f851 3b04 	ldr.w	r3, [r1], #4
  404af4:	f840 3b04 	str.w	r3, [r0], #4
  404af8:	3a10      	subs	r2, #16
  404afa:	d2ed      	bcs.n	404ad8 <memcpy+0x98>
  404afc:	320c      	adds	r2, #12
  404afe:	d305      	bcc.n	404b0c <memcpy+0xcc>
  404b00:	f851 3b04 	ldr.w	r3, [r1], #4
  404b04:	f840 3b04 	str.w	r3, [r0], #4
  404b08:	3a04      	subs	r2, #4
  404b0a:	d2f9      	bcs.n	404b00 <memcpy+0xc0>
  404b0c:	3204      	adds	r2, #4
  404b0e:	d008      	beq.n	404b22 <memcpy+0xe2>
  404b10:	07d2      	lsls	r2, r2, #31
  404b12:	bf1c      	itt	ne
  404b14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b18:	f800 3b01 	strbne.w	r3, [r0], #1
  404b1c:	d301      	bcc.n	404b22 <memcpy+0xe2>
  404b1e:	880b      	ldrh	r3, [r1, #0]
  404b20:	8003      	strh	r3, [r0, #0]
  404b22:	4660      	mov	r0, ip
  404b24:	4770      	bx	lr
  404b26:	bf00      	nop
  404b28:	2a08      	cmp	r2, #8
  404b2a:	d313      	bcc.n	404b54 <memcpy+0x114>
  404b2c:	078b      	lsls	r3, r1, #30
  404b2e:	d08d      	beq.n	404a4c <memcpy+0xc>
  404b30:	f010 0303 	ands.w	r3, r0, #3
  404b34:	d08a      	beq.n	404a4c <memcpy+0xc>
  404b36:	f1c3 0304 	rsb	r3, r3, #4
  404b3a:	1ad2      	subs	r2, r2, r3
  404b3c:	07db      	lsls	r3, r3, #31
  404b3e:	bf1c      	itt	ne
  404b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b44:	f800 3b01 	strbne.w	r3, [r0], #1
  404b48:	d380      	bcc.n	404a4c <memcpy+0xc>
  404b4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404b4e:	f820 3b02 	strh.w	r3, [r0], #2
  404b52:	e77b      	b.n	404a4c <memcpy+0xc>
  404b54:	3a04      	subs	r2, #4
  404b56:	d3d9      	bcc.n	404b0c <memcpy+0xcc>
  404b58:	3a01      	subs	r2, #1
  404b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404b5e:	f800 3b01 	strb.w	r3, [r0], #1
  404b62:	d2f9      	bcs.n	404b58 <memcpy+0x118>
  404b64:	780b      	ldrb	r3, [r1, #0]
  404b66:	7003      	strb	r3, [r0, #0]
  404b68:	784b      	ldrb	r3, [r1, #1]
  404b6a:	7043      	strb	r3, [r0, #1]
  404b6c:	788b      	ldrb	r3, [r1, #2]
  404b6e:	7083      	strb	r3, [r0, #2]
  404b70:	4660      	mov	r0, ip
  404b72:	4770      	bx	lr

00404b74 <__malloc_lock>:
  404b74:	4801      	ldr	r0, [pc, #4]	; (404b7c <__malloc_lock+0x8>)
  404b76:	f7ff bc5d 	b.w	404434 <__retarget_lock_acquire_recursive>
  404b7a:	bf00      	nop
  404b7c:	20400cc4 	.word	0x20400cc4

00404b80 <__malloc_unlock>:
  404b80:	4801      	ldr	r0, [pc, #4]	; (404b88 <__malloc_unlock+0x8>)
  404b82:	f7ff bc59 	b.w	404438 <__retarget_lock_release_recursive>
  404b86:	bf00      	nop
  404b88:	20400cc4 	.word	0x20400cc4

00404b8c <_Balloc>:
  404b8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404b8e:	b570      	push	{r4, r5, r6, lr}
  404b90:	4605      	mov	r5, r0
  404b92:	460c      	mov	r4, r1
  404b94:	b14b      	cbz	r3, 404baa <_Balloc+0x1e>
  404b96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404b9a:	b180      	cbz	r0, 404bbe <_Balloc+0x32>
  404b9c:	6802      	ldr	r2, [r0, #0]
  404b9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404ba2:	2300      	movs	r3, #0
  404ba4:	6103      	str	r3, [r0, #16]
  404ba6:	60c3      	str	r3, [r0, #12]
  404ba8:	bd70      	pop	{r4, r5, r6, pc}
  404baa:	2221      	movs	r2, #33	; 0x21
  404bac:	2104      	movs	r1, #4
  404bae:	f000 fc55 	bl	40545c <_calloc_r>
  404bb2:	64e8      	str	r0, [r5, #76]	; 0x4c
  404bb4:	4603      	mov	r3, r0
  404bb6:	2800      	cmp	r0, #0
  404bb8:	d1ed      	bne.n	404b96 <_Balloc+0xa>
  404bba:	2000      	movs	r0, #0
  404bbc:	bd70      	pop	{r4, r5, r6, pc}
  404bbe:	2101      	movs	r1, #1
  404bc0:	fa01 f604 	lsl.w	r6, r1, r4
  404bc4:	1d72      	adds	r2, r6, #5
  404bc6:	4628      	mov	r0, r5
  404bc8:	0092      	lsls	r2, r2, #2
  404bca:	f000 fc47 	bl	40545c <_calloc_r>
  404bce:	2800      	cmp	r0, #0
  404bd0:	d0f3      	beq.n	404bba <_Balloc+0x2e>
  404bd2:	6044      	str	r4, [r0, #4]
  404bd4:	6086      	str	r6, [r0, #8]
  404bd6:	e7e4      	b.n	404ba2 <_Balloc+0x16>

00404bd8 <_Bfree>:
  404bd8:	b131      	cbz	r1, 404be8 <_Bfree+0x10>
  404bda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404bdc:	684a      	ldr	r2, [r1, #4]
  404bde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404be2:	6008      	str	r0, [r1, #0]
  404be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404be8:	4770      	bx	lr
  404bea:	bf00      	nop

00404bec <__multadd>:
  404bec:	b5f0      	push	{r4, r5, r6, r7, lr}
  404bee:	690c      	ldr	r4, [r1, #16]
  404bf0:	b083      	sub	sp, #12
  404bf2:	460d      	mov	r5, r1
  404bf4:	4606      	mov	r6, r0
  404bf6:	f101 0e14 	add.w	lr, r1, #20
  404bfa:	2700      	movs	r7, #0
  404bfc:	f8de 0000 	ldr.w	r0, [lr]
  404c00:	b281      	uxth	r1, r0
  404c02:	fb02 3301 	mla	r3, r2, r1, r3
  404c06:	0c01      	lsrs	r1, r0, #16
  404c08:	0c18      	lsrs	r0, r3, #16
  404c0a:	fb02 0101 	mla	r1, r2, r1, r0
  404c0e:	b29b      	uxth	r3, r3
  404c10:	3701      	adds	r7, #1
  404c12:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  404c16:	42bc      	cmp	r4, r7
  404c18:	f84e 3b04 	str.w	r3, [lr], #4
  404c1c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  404c20:	dcec      	bgt.n	404bfc <__multadd+0x10>
  404c22:	b13b      	cbz	r3, 404c34 <__multadd+0x48>
  404c24:	68aa      	ldr	r2, [r5, #8]
  404c26:	4294      	cmp	r4, r2
  404c28:	da07      	bge.n	404c3a <__multadd+0x4e>
  404c2a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404c2e:	3401      	adds	r4, #1
  404c30:	6153      	str	r3, [r2, #20]
  404c32:	612c      	str	r4, [r5, #16]
  404c34:	4628      	mov	r0, r5
  404c36:	b003      	add	sp, #12
  404c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c3a:	6869      	ldr	r1, [r5, #4]
  404c3c:	9301      	str	r3, [sp, #4]
  404c3e:	3101      	adds	r1, #1
  404c40:	4630      	mov	r0, r6
  404c42:	f7ff ffa3 	bl	404b8c <_Balloc>
  404c46:	692a      	ldr	r2, [r5, #16]
  404c48:	3202      	adds	r2, #2
  404c4a:	f105 010c 	add.w	r1, r5, #12
  404c4e:	4607      	mov	r7, r0
  404c50:	0092      	lsls	r2, r2, #2
  404c52:	300c      	adds	r0, #12
  404c54:	f7ff fef4 	bl	404a40 <memcpy>
  404c58:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404c5a:	6869      	ldr	r1, [r5, #4]
  404c5c:	9b01      	ldr	r3, [sp, #4]
  404c5e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404c62:	6028      	str	r0, [r5, #0]
  404c64:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404c68:	463d      	mov	r5, r7
  404c6a:	e7de      	b.n	404c2a <__multadd+0x3e>

00404c6c <__hi0bits>:
  404c6c:	0c02      	lsrs	r2, r0, #16
  404c6e:	0412      	lsls	r2, r2, #16
  404c70:	4603      	mov	r3, r0
  404c72:	b9b2      	cbnz	r2, 404ca2 <__hi0bits+0x36>
  404c74:	0403      	lsls	r3, r0, #16
  404c76:	2010      	movs	r0, #16
  404c78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404c7c:	bf04      	itt	eq
  404c7e:	021b      	lsleq	r3, r3, #8
  404c80:	3008      	addeq	r0, #8
  404c82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404c86:	bf04      	itt	eq
  404c88:	011b      	lsleq	r3, r3, #4
  404c8a:	3004      	addeq	r0, #4
  404c8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404c90:	bf04      	itt	eq
  404c92:	009b      	lsleq	r3, r3, #2
  404c94:	3002      	addeq	r0, #2
  404c96:	2b00      	cmp	r3, #0
  404c98:	db02      	blt.n	404ca0 <__hi0bits+0x34>
  404c9a:	005b      	lsls	r3, r3, #1
  404c9c:	d403      	bmi.n	404ca6 <__hi0bits+0x3a>
  404c9e:	2020      	movs	r0, #32
  404ca0:	4770      	bx	lr
  404ca2:	2000      	movs	r0, #0
  404ca4:	e7e8      	b.n	404c78 <__hi0bits+0xc>
  404ca6:	3001      	adds	r0, #1
  404ca8:	4770      	bx	lr
  404caa:	bf00      	nop

00404cac <__lo0bits>:
  404cac:	6803      	ldr	r3, [r0, #0]
  404cae:	f013 0207 	ands.w	r2, r3, #7
  404cb2:	4601      	mov	r1, r0
  404cb4:	d007      	beq.n	404cc6 <__lo0bits+0x1a>
  404cb6:	07da      	lsls	r2, r3, #31
  404cb8:	d421      	bmi.n	404cfe <__lo0bits+0x52>
  404cba:	0798      	lsls	r0, r3, #30
  404cbc:	d421      	bmi.n	404d02 <__lo0bits+0x56>
  404cbe:	089b      	lsrs	r3, r3, #2
  404cc0:	600b      	str	r3, [r1, #0]
  404cc2:	2002      	movs	r0, #2
  404cc4:	4770      	bx	lr
  404cc6:	b298      	uxth	r0, r3
  404cc8:	b198      	cbz	r0, 404cf2 <__lo0bits+0x46>
  404cca:	4610      	mov	r0, r2
  404ccc:	f013 0fff 	tst.w	r3, #255	; 0xff
  404cd0:	bf04      	itt	eq
  404cd2:	0a1b      	lsreq	r3, r3, #8
  404cd4:	3008      	addeq	r0, #8
  404cd6:	071a      	lsls	r2, r3, #28
  404cd8:	bf04      	itt	eq
  404cda:	091b      	lsreq	r3, r3, #4
  404cdc:	3004      	addeq	r0, #4
  404cde:	079a      	lsls	r2, r3, #30
  404ce0:	bf04      	itt	eq
  404ce2:	089b      	lsreq	r3, r3, #2
  404ce4:	3002      	addeq	r0, #2
  404ce6:	07da      	lsls	r2, r3, #31
  404ce8:	d407      	bmi.n	404cfa <__lo0bits+0x4e>
  404cea:	085b      	lsrs	r3, r3, #1
  404cec:	d104      	bne.n	404cf8 <__lo0bits+0x4c>
  404cee:	2020      	movs	r0, #32
  404cf0:	4770      	bx	lr
  404cf2:	0c1b      	lsrs	r3, r3, #16
  404cf4:	2010      	movs	r0, #16
  404cf6:	e7e9      	b.n	404ccc <__lo0bits+0x20>
  404cf8:	3001      	adds	r0, #1
  404cfa:	600b      	str	r3, [r1, #0]
  404cfc:	4770      	bx	lr
  404cfe:	2000      	movs	r0, #0
  404d00:	4770      	bx	lr
  404d02:	085b      	lsrs	r3, r3, #1
  404d04:	600b      	str	r3, [r1, #0]
  404d06:	2001      	movs	r0, #1
  404d08:	4770      	bx	lr
  404d0a:	bf00      	nop

00404d0c <__i2b>:
  404d0c:	b510      	push	{r4, lr}
  404d0e:	460c      	mov	r4, r1
  404d10:	2101      	movs	r1, #1
  404d12:	f7ff ff3b 	bl	404b8c <_Balloc>
  404d16:	2201      	movs	r2, #1
  404d18:	6144      	str	r4, [r0, #20]
  404d1a:	6102      	str	r2, [r0, #16]
  404d1c:	bd10      	pop	{r4, pc}
  404d1e:	bf00      	nop

00404d20 <__multiply>:
  404d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d24:	690c      	ldr	r4, [r1, #16]
  404d26:	6915      	ldr	r5, [r2, #16]
  404d28:	42ac      	cmp	r4, r5
  404d2a:	b083      	sub	sp, #12
  404d2c:	468b      	mov	fp, r1
  404d2e:	4616      	mov	r6, r2
  404d30:	da04      	bge.n	404d3c <__multiply+0x1c>
  404d32:	4622      	mov	r2, r4
  404d34:	46b3      	mov	fp, r6
  404d36:	462c      	mov	r4, r5
  404d38:	460e      	mov	r6, r1
  404d3a:	4615      	mov	r5, r2
  404d3c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404d40:	f8db 1004 	ldr.w	r1, [fp, #4]
  404d44:	eb04 0805 	add.w	r8, r4, r5
  404d48:	4598      	cmp	r8, r3
  404d4a:	bfc8      	it	gt
  404d4c:	3101      	addgt	r1, #1
  404d4e:	f7ff ff1d 	bl	404b8c <_Balloc>
  404d52:	f100 0914 	add.w	r9, r0, #20
  404d56:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  404d5a:	45d1      	cmp	r9, sl
  404d5c:	9000      	str	r0, [sp, #0]
  404d5e:	d205      	bcs.n	404d6c <__multiply+0x4c>
  404d60:	464b      	mov	r3, r9
  404d62:	2100      	movs	r1, #0
  404d64:	f843 1b04 	str.w	r1, [r3], #4
  404d68:	459a      	cmp	sl, r3
  404d6a:	d8fb      	bhi.n	404d64 <__multiply+0x44>
  404d6c:	f106 0c14 	add.w	ip, r6, #20
  404d70:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  404d74:	f10b 0b14 	add.w	fp, fp, #20
  404d78:	459c      	cmp	ip, r3
  404d7a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  404d7e:	d24c      	bcs.n	404e1a <__multiply+0xfa>
  404d80:	f8cd a004 	str.w	sl, [sp, #4]
  404d84:	469a      	mov	sl, r3
  404d86:	f8dc 5000 	ldr.w	r5, [ip]
  404d8a:	b2af      	uxth	r7, r5
  404d8c:	b1ef      	cbz	r7, 404dca <__multiply+0xaa>
  404d8e:	2100      	movs	r1, #0
  404d90:	464d      	mov	r5, r9
  404d92:	465e      	mov	r6, fp
  404d94:	460c      	mov	r4, r1
  404d96:	f856 2b04 	ldr.w	r2, [r6], #4
  404d9a:	6828      	ldr	r0, [r5, #0]
  404d9c:	b293      	uxth	r3, r2
  404d9e:	b281      	uxth	r1, r0
  404da0:	fb07 1303 	mla	r3, r7, r3, r1
  404da4:	0c12      	lsrs	r2, r2, #16
  404da6:	0c01      	lsrs	r1, r0, #16
  404da8:	4423      	add	r3, r4
  404daa:	fb07 1102 	mla	r1, r7, r2, r1
  404dae:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  404db2:	b29b      	uxth	r3, r3
  404db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  404db8:	45b6      	cmp	lr, r6
  404dba:	f845 3b04 	str.w	r3, [r5], #4
  404dbe:	ea4f 4411 	mov.w	r4, r1, lsr #16
  404dc2:	d8e8      	bhi.n	404d96 <__multiply+0x76>
  404dc4:	602c      	str	r4, [r5, #0]
  404dc6:	f8dc 5000 	ldr.w	r5, [ip]
  404dca:	0c2d      	lsrs	r5, r5, #16
  404dcc:	d01d      	beq.n	404e0a <__multiply+0xea>
  404dce:	f8d9 3000 	ldr.w	r3, [r9]
  404dd2:	4648      	mov	r0, r9
  404dd4:	461c      	mov	r4, r3
  404dd6:	4659      	mov	r1, fp
  404dd8:	2200      	movs	r2, #0
  404dda:	880e      	ldrh	r6, [r1, #0]
  404ddc:	0c24      	lsrs	r4, r4, #16
  404dde:	fb05 4406 	mla	r4, r5, r6, r4
  404de2:	4422      	add	r2, r4
  404de4:	b29b      	uxth	r3, r3
  404de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404dea:	f840 3b04 	str.w	r3, [r0], #4
  404dee:	f851 3b04 	ldr.w	r3, [r1], #4
  404df2:	6804      	ldr	r4, [r0, #0]
  404df4:	0c1b      	lsrs	r3, r3, #16
  404df6:	b2a6      	uxth	r6, r4
  404df8:	fb05 6303 	mla	r3, r5, r3, r6
  404dfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  404e00:	458e      	cmp	lr, r1
  404e02:	ea4f 4213 	mov.w	r2, r3, lsr #16
  404e06:	d8e8      	bhi.n	404dda <__multiply+0xba>
  404e08:	6003      	str	r3, [r0, #0]
  404e0a:	f10c 0c04 	add.w	ip, ip, #4
  404e0e:	45e2      	cmp	sl, ip
  404e10:	f109 0904 	add.w	r9, r9, #4
  404e14:	d8b7      	bhi.n	404d86 <__multiply+0x66>
  404e16:	f8dd a004 	ldr.w	sl, [sp, #4]
  404e1a:	f1b8 0f00 	cmp.w	r8, #0
  404e1e:	dd0b      	ble.n	404e38 <__multiply+0x118>
  404e20:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  404e24:	f1aa 0a04 	sub.w	sl, sl, #4
  404e28:	b11b      	cbz	r3, 404e32 <__multiply+0x112>
  404e2a:	e005      	b.n	404e38 <__multiply+0x118>
  404e2c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  404e30:	b913      	cbnz	r3, 404e38 <__multiply+0x118>
  404e32:	f1b8 0801 	subs.w	r8, r8, #1
  404e36:	d1f9      	bne.n	404e2c <__multiply+0x10c>
  404e38:	9800      	ldr	r0, [sp, #0]
  404e3a:	f8c0 8010 	str.w	r8, [r0, #16]
  404e3e:	b003      	add	sp, #12
  404e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404e44 <__pow5mult>:
  404e44:	f012 0303 	ands.w	r3, r2, #3
  404e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e4c:	4614      	mov	r4, r2
  404e4e:	4607      	mov	r7, r0
  404e50:	d12e      	bne.n	404eb0 <__pow5mult+0x6c>
  404e52:	460d      	mov	r5, r1
  404e54:	10a4      	asrs	r4, r4, #2
  404e56:	d01c      	beq.n	404e92 <__pow5mult+0x4e>
  404e58:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  404e5a:	b396      	cbz	r6, 404ec2 <__pow5mult+0x7e>
  404e5c:	07e3      	lsls	r3, r4, #31
  404e5e:	f04f 0800 	mov.w	r8, #0
  404e62:	d406      	bmi.n	404e72 <__pow5mult+0x2e>
  404e64:	1064      	asrs	r4, r4, #1
  404e66:	d014      	beq.n	404e92 <__pow5mult+0x4e>
  404e68:	6830      	ldr	r0, [r6, #0]
  404e6a:	b1a8      	cbz	r0, 404e98 <__pow5mult+0x54>
  404e6c:	4606      	mov	r6, r0
  404e6e:	07e3      	lsls	r3, r4, #31
  404e70:	d5f8      	bpl.n	404e64 <__pow5mult+0x20>
  404e72:	4632      	mov	r2, r6
  404e74:	4629      	mov	r1, r5
  404e76:	4638      	mov	r0, r7
  404e78:	f7ff ff52 	bl	404d20 <__multiply>
  404e7c:	b1b5      	cbz	r5, 404eac <__pow5mult+0x68>
  404e7e:	686a      	ldr	r2, [r5, #4]
  404e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404e82:	1064      	asrs	r4, r4, #1
  404e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404e88:	6029      	str	r1, [r5, #0]
  404e8a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404e8e:	4605      	mov	r5, r0
  404e90:	d1ea      	bne.n	404e68 <__pow5mult+0x24>
  404e92:	4628      	mov	r0, r5
  404e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e98:	4632      	mov	r2, r6
  404e9a:	4631      	mov	r1, r6
  404e9c:	4638      	mov	r0, r7
  404e9e:	f7ff ff3f 	bl	404d20 <__multiply>
  404ea2:	6030      	str	r0, [r6, #0]
  404ea4:	f8c0 8000 	str.w	r8, [r0]
  404ea8:	4606      	mov	r6, r0
  404eaa:	e7e0      	b.n	404e6e <__pow5mult+0x2a>
  404eac:	4605      	mov	r5, r0
  404eae:	e7d9      	b.n	404e64 <__pow5mult+0x20>
  404eb0:	1e5a      	subs	r2, r3, #1
  404eb2:	4d0b      	ldr	r5, [pc, #44]	; (404ee0 <__pow5mult+0x9c>)
  404eb4:	2300      	movs	r3, #0
  404eb6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  404eba:	f7ff fe97 	bl	404bec <__multadd>
  404ebe:	4605      	mov	r5, r0
  404ec0:	e7c8      	b.n	404e54 <__pow5mult+0x10>
  404ec2:	2101      	movs	r1, #1
  404ec4:	4638      	mov	r0, r7
  404ec6:	f7ff fe61 	bl	404b8c <_Balloc>
  404eca:	f240 2171 	movw	r1, #625	; 0x271
  404ece:	2201      	movs	r2, #1
  404ed0:	2300      	movs	r3, #0
  404ed2:	6141      	str	r1, [r0, #20]
  404ed4:	6102      	str	r2, [r0, #16]
  404ed6:	4606      	mov	r6, r0
  404ed8:	64b8      	str	r0, [r7, #72]	; 0x48
  404eda:	6003      	str	r3, [r0, #0]
  404edc:	e7be      	b.n	404e5c <__pow5mult+0x18>
  404ede:	bf00      	nop
  404ee0:	004073a8 	.word	0x004073a8

00404ee4 <__lshift>:
  404ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404ee8:	4691      	mov	r9, r2
  404eea:	690a      	ldr	r2, [r1, #16]
  404eec:	688b      	ldr	r3, [r1, #8]
  404eee:	ea4f 1469 	mov.w	r4, r9, asr #5
  404ef2:	eb04 0802 	add.w	r8, r4, r2
  404ef6:	f108 0501 	add.w	r5, r8, #1
  404efa:	429d      	cmp	r5, r3
  404efc:	460e      	mov	r6, r1
  404efe:	4607      	mov	r7, r0
  404f00:	6849      	ldr	r1, [r1, #4]
  404f02:	dd04      	ble.n	404f0e <__lshift+0x2a>
  404f04:	005b      	lsls	r3, r3, #1
  404f06:	429d      	cmp	r5, r3
  404f08:	f101 0101 	add.w	r1, r1, #1
  404f0c:	dcfa      	bgt.n	404f04 <__lshift+0x20>
  404f0e:	4638      	mov	r0, r7
  404f10:	f7ff fe3c 	bl	404b8c <_Balloc>
  404f14:	2c00      	cmp	r4, #0
  404f16:	f100 0314 	add.w	r3, r0, #20
  404f1a:	dd06      	ble.n	404f2a <__lshift+0x46>
  404f1c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  404f20:	2100      	movs	r1, #0
  404f22:	f843 1b04 	str.w	r1, [r3], #4
  404f26:	429a      	cmp	r2, r3
  404f28:	d1fb      	bne.n	404f22 <__lshift+0x3e>
  404f2a:	6934      	ldr	r4, [r6, #16]
  404f2c:	f106 0114 	add.w	r1, r6, #20
  404f30:	f019 091f 	ands.w	r9, r9, #31
  404f34:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  404f38:	d01d      	beq.n	404f76 <__lshift+0x92>
  404f3a:	f1c9 0c20 	rsb	ip, r9, #32
  404f3e:	2200      	movs	r2, #0
  404f40:	680c      	ldr	r4, [r1, #0]
  404f42:	fa04 f409 	lsl.w	r4, r4, r9
  404f46:	4314      	orrs	r4, r2
  404f48:	f843 4b04 	str.w	r4, [r3], #4
  404f4c:	f851 2b04 	ldr.w	r2, [r1], #4
  404f50:	458e      	cmp	lr, r1
  404f52:	fa22 f20c 	lsr.w	r2, r2, ip
  404f56:	d8f3      	bhi.n	404f40 <__lshift+0x5c>
  404f58:	601a      	str	r2, [r3, #0]
  404f5a:	b10a      	cbz	r2, 404f60 <__lshift+0x7c>
  404f5c:	f108 0502 	add.w	r5, r8, #2
  404f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404f62:	6872      	ldr	r2, [r6, #4]
  404f64:	3d01      	subs	r5, #1
  404f66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404f6a:	6105      	str	r5, [r0, #16]
  404f6c:	6031      	str	r1, [r6, #0]
  404f6e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  404f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404f76:	3b04      	subs	r3, #4
  404f78:	f851 2b04 	ldr.w	r2, [r1], #4
  404f7c:	f843 2f04 	str.w	r2, [r3, #4]!
  404f80:	458e      	cmp	lr, r1
  404f82:	d8f9      	bhi.n	404f78 <__lshift+0x94>
  404f84:	e7ec      	b.n	404f60 <__lshift+0x7c>
  404f86:	bf00      	nop

00404f88 <__mcmp>:
  404f88:	b430      	push	{r4, r5}
  404f8a:	690b      	ldr	r3, [r1, #16]
  404f8c:	4605      	mov	r5, r0
  404f8e:	6900      	ldr	r0, [r0, #16]
  404f90:	1ac0      	subs	r0, r0, r3
  404f92:	d10f      	bne.n	404fb4 <__mcmp+0x2c>
  404f94:	009b      	lsls	r3, r3, #2
  404f96:	3514      	adds	r5, #20
  404f98:	3114      	adds	r1, #20
  404f9a:	4419      	add	r1, r3
  404f9c:	442b      	add	r3, r5
  404f9e:	e001      	b.n	404fa4 <__mcmp+0x1c>
  404fa0:	429d      	cmp	r5, r3
  404fa2:	d207      	bcs.n	404fb4 <__mcmp+0x2c>
  404fa4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  404fa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404fac:	4294      	cmp	r4, r2
  404fae:	d0f7      	beq.n	404fa0 <__mcmp+0x18>
  404fb0:	d302      	bcc.n	404fb8 <__mcmp+0x30>
  404fb2:	2001      	movs	r0, #1
  404fb4:	bc30      	pop	{r4, r5}
  404fb6:	4770      	bx	lr
  404fb8:	f04f 30ff 	mov.w	r0, #4294967295
  404fbc:	e7fa      	b.n	404fb4 <__mcmp+0x2c>
  404fbe:	bf00      	nop

00404fc0 <__mdiff>:
  404fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fc4:	690f      	ldr	r7, [r1, #16]
  404fc6:	460e      	mov	r6, r1
  404fc8:	6911      	ldr	r1, [r2, #16]
  404fca:	1a7f      	subs	r7, r7, r1
  404fcc:	2f00      	cmp	r7, #0
  404fce:	4690      	mov	r8, r2
  404fd0:	d117      	bne.n	405002 <__mdiff+0x42>
  404fd2:	0089      	lsls	r1, r1, #2
  404fd4:	f106 0514 	add.w	r5, r6, #20
  404fd8:	f102 0e14 	add.w	lr, r2, #20
  404fdc:	186b      	adds	r3, r5, r1
  404fde:	4471      	add	r1, lr
  404fe0:	e001      	b.n	404fe6 <__mdiff+0x26>
  404fe2:	429d      	cmp	r5, r3
  404fe4:	d25c      	bcs.n	4050a0 <__mdiff+0xe0>
  404fe6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  404fea:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  404fee:	42a2      	cmp	r2, r4
  404ff0:	d0f7      	beq.n	404fe2 <__mdiff+0x22>
  404ff2:	d25e      	bcs.n	4050b2 <__mdiff+0xf2>
  404ff4:	4633      	mov	r3, r6
  404ff6:	462c      	mov	r4, r5
  404ff8:	4646      	mov	r6, r8
  404ffa:	4675      	mov	r5, lr
  404ffc:	4698      	mov	r8, r3
  404ffe:	2701      	movs	r7, #1
  405000:	e005      	b.n	40500e <__mdiff+0x4e>
  405002:	db58      	blt.n	4050b6 <__mdiff+0xf6>
  405004:	f106 0514 	add.w	r5, r6, #20
  405008:	f108 0414 	add.w	r4, r8, #20
  40500c:	2700      	movs	r7, #0
  40500e:	6871      	ldr	r1, [r6, #4]
  405010:	f7ff fdbc 	bl	404b8c <_Balloc>
  405014:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405018:	6936      	ldr	r6, [r6, #16]
  40501a:	60c7      	str	r7, [r0, #12]
  40501c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405020:	46a6      	mov	lr, r4
  405022:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405026:	f100 0414 	add.w	r4, r0, #20
  40502a:	2300      	movs	r3, #0
  40502c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405030:	f855 8b04 	ldr.w	r8, [r5], #4
  405034:	b28a      	uxth	r2, r1
  405036:	fa13 f388 	uxtah	r3, r3, r8
  40503a:	0c09      	lsrs	r1, r1, #16
  40503c:	1a9a      	subs	r2, r3, r2
  40503e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405042:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405046:	b292      	uxth	r2, r2
  405048:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40504c:	45f4      	cmp	ip, lr
  40504e:	f844 2b04 	str.w	r2, [r4], #4
  405052:	ea4f 4323 	mov.w	r3, r3, asr #16
  405056:	d8e9      	bhi.n	40502c <__mdiff+0x6c>
  405058:	42af      	cmp	r7, r5
  40505a:	d917      	bls.n	40508c <__mdiff+0xcc>
  40505c:	46a4      	mov	ip, r4
  40505e:	46ae      	mov	lr, r5
  405060:	f85e 2b04 	ldr.w	r2, [lr], #4
  405064:	fa13 f382 	uxtah	r3, r3, r2
  405068:	1419      	asrs	r1, r3, #16
  40506a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40506e:	b29b      	uxth	r3, r3
  405070:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405074:	4577      	cmp	r7, lr
  405076:	f84c 2b04 	str.w	r2, [ip], #4
  40507a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40507e:	d8ef      	bhi.n	405060 <__mdiff+0xa0>
  405080:	43ed      	mvns	r5, r5
  405082:	442f      	add	r7, r5
  405084:	f027 0703 	bic.w	r7, r7, #3
  405088:	3704      	adds	r7, #4
  40508a:	443c      	add	r4, r7
  40508c:	3c04      	subs	r4, #4
  40508e:	b922      	cbnz	r2, 40509a <__mdiff+0xda>
  405090:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405094:	3e01      	subs	r6, #1
  405096:	2b00      	cmp	r3, #0
  405098:	d0fa      	beq.n	405090 <__mdiff+0xd0>
  40509a:	6106      	str	r6, [r0, #16]
  40509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050a0:	2100      	movs	r1, #0
  4050a2:	f7ff fd73 	bl	404b8c <_Balloc>
  4050a6:	2201      	movs	r2, #1
  4050a8:	2300      	movs	r3, #0
  4050aa:	6102      	str	r2, [r0, #16]
  4050ac:	6143      	str	r3, [r0, #20]
  4050ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050b2:	4674      	mov	r4, lr
  4050b4:	e7ab      	b.n	40500e <__mdiff+0x4e>
  4050b6:	4633      	mov	r3, r6
  4050b8:	f106 0414 	add.w	r4, r6, #20
  4050bc:	f102 0514 	add.w	r5, r2, #20
  4050c0:	4616      	mov	r6, r2
  4050c2:	2701      	movs	r7, #1
  4050c4:	4698      	mov	r8, r3
  4050c6:	e7a2      	b.n	40500e <__mdiff+0x4e>

004050c8 <__d2b>:
  4050c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050cc:	b082      	sub	sp, #8
  4050ce:	2101      	movs	r1, #1
  4050d0:	461c      	mov	r4, r3
  4050d2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4050d6:	4615      	mov	r5, r2
  4050d8:	9e08      	ldr	r6, [sp, #32]
  4050da:	f7ff fd57 	bl	404b8c <_Balloc>
  4050de:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4050e2:	4680      	mov	r8, r0
  4050e4:	b10f      	cbz	r7, 4050ea <__d2b+0x22>
  4050e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4050ea:	9401      	str	r4, [sp, #4]
  4050ec:	b31d      	cbz	r5, 405136 <__d2b+0x6e>
  4050ee:	a802      	add	r0, sp, #8
  4050f0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4050f4:	f7ff fdda 	bl	404cac <__lo0bits>
  4050f8:	2800      	cmp	r0, #0
  4050fa:	d134      	bne.n	405166 <__d2b+0x9e>
  4050fc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405100:	f8c8 2014 	str.w	r2, [r8, #20]
  405104:	2b00      	cmp	r3, #0
  405106:	bf0c      	ite	eq
  405108:	2101      	moveq	r1, #1
  40510a:	2102      	movne	r1, #2
  40510c:	f8c8 3018 	str.w	r3, [r8, #24]
  405110:	f8c8 1010 	str.w	r1, [r8, #16]
  405114:	b9df      	cbnz	r7, 40514e <__d2b+0x86>
  405116:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40511a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40511e:	6030      	str	r0, [r6, #0]
  405120:	6918      	ldr	r0, [r3, #16]
  405122:	f7ff fda3 	bl	404c6c <__hi0bits>
  405126:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405128:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40512c:	6018      	str	r0, [r3, #0]
  40512e:	4640      	mov	r0, r8
  405130:	b002      	add	sp, #8
  405132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405136:	a801      	add	r0, sp, #4
  405138:	f7ff fdb8 	bl	404cac <__lo0bits>
  40513c:	9b01      	ldr	r3, [sp, #4]
  40513e:	f8c8 3014 	str.w	r3, [r8, #20]
  405142:	2101      	movs	r1, #1
  405144:	3020      	adds	r0, #32
  405146:	f8c8 1010 	str.w	r1, [r8, #16]
  40514a:	2f00      	cmp	r7, #0
  40514c:	d0e3      	beq.n	405116 <__d2b+0x4e>
  40514e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405150:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405154:	4407      	add	r7, r0
  405156:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40515a:	6037      	str	r7, [r6, #0]
  40515c:	6018      	str	r0, [r3, #0]
  40515e:	4640      	mov	r0, r8
  405160:	b002      	add	sp, #8
  405162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405166:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40516a:	f1c0 0220 	rsb	r2, r0, #32
  40516e:	fa03 f202 	lsl.w	r2, r3, r2
  405172:	430a      	orrs	r2, r1
  405174:	40c3      	lsrs	r3, r0
  405176:	9301      	str	r3, [sp, #4]
  405178:	f8c8 2014 	str.w	r2, [r8, #20]
  40517c:	e7c2      	b.n	405104 <__d2b+0x3c>
  40517e:	bf00      	nop

00405180 <_sbrk_r>:
  405180:	b538      	push	{r3, r4, r5, lr}
  405182:	4c07      	ldr	r4, [pc, #28]	; (4051a0 <_sbrk_r+0x20>)
  405184:	2300      	movs	r3, #0
  405186:	4605      	mov	r5, r0
  405188:	4608      	mov	r0, r1
  40518a:	6023      	str	r3, [r4, #0]
  40518c:	f7fc face 	bl	40172c <_sbrk>
  405190:	1c43      	adds	r3, r0, #1
  405192:	d000      	beq.n	405196 <_sbrk_r+0x16>
  405194:	bd38      	pop	{r3, r4, r5, pc}
  405196:	6823      	ldr	r3, [r4, #0]
  405198:	2b00      	cmp	r3, #0
  40519a:	d0fb      	beq.n	405194 <_sbrk_r+0x14>
  40519c:	602b      	str	r3, [r5, #0]
  40519e:	bd38      	pop	{r3, r4, r5, pc}
  4051a0:	20400cd8 	.word	0x20400cd8
	...

004051c0 <strlen>:
  4051c0:	f890 f000 	pld	[r0]
  4051c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4051c8:	f020 0107 	bic.w	r1, r0, #7
  4051cc:	f06f 0c00 	mvn.w	ip, #0
  4051d0:	f010 0407 	ands.w	r4, r0, #7
  4051d4:	f891 f020 	pld	[r1, #32]
  4051d8:	f040 8049 	bne.w	40526e <strlen+0xae>
  4051dc:	f04f 0400 	mov.w	r4, #0
  4051e0:	f06f 0007 	mvn.w	r0, #7
  4051e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4051e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4051ec:	f100 0008 	add.w	r0, r0, #8
  4051f0:	fa82 f24c 	uadd8	r2, r2, ip
  4051f4:	faa4 f28c 	sel	r2, r4, ip
  4051f8:	fa83 f34c 	uadd8	r3, r3, ip
  4051fc:	faa2 f38c 	sel	r3, r2, ip
  405200:	bb4b      	cbnz	r3, 405256 <strlen+0x96>
  405202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405206:	fa82 f24c 	uadd8	r2, r2, ip
  40520a:	f100 0008 	add.w	r0, r0, #8
  40520e:	faa4 f28c 	sel	r2, r4, ip
  405212:	fa83 f34c 	uadd8	r3, r3, ip
  405216:	faa2 f38c 	sel	r3, r2, ip
  40521a:	b9e3      	cbnz	r3, 405256 <strlen+0x96>
  40521c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405220:	fa82 f24c 	uadd8	r2, r2, ip
  405224:	f100 0008 	add.w	r0, r0, #8
  405228:	faa4 f28c 	sel	r2, r4, ip
  40522c:	fa83 f34c 	uadd8	r3, r3, ip
  405230:	faa2 f38c 	sel	r3, r2, ip
  405234:	b97b      	cbnz	r3, 405256 <strlen+0x96>
  405236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40523a:	f101 0120 	add.w	r1, r1, #32
  40523e:	fa82 f24c 	uadd8	r2, r2, ip
  405242:	f100 0008 	add.w	r0, r0, #8
  405246:	faa4 f28c 	sel	r2, r4, ip
  40524a:	fa83 f34c 	uadd8	r3, r3, ip
  40524e:	faa2 f38c 	sel	r3, r2, ip
  405252:	2b00      	cmp	r3, #0
  405254:	d0c6      	beq.n	4051e4 <strlen+0x24>
  405256:	2a00      	cmp	r2, #0
  405258:	bf04      	itt	eq
  40525a:	3004      	addeq	r0, #4
  40525c:	461a      	moveq	r2, r3
  40525e:	ba12      	rev	r2, r2
  405260:	fab2 f282 	clz	r2, r2
  405264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40526c:	4770      	bx	lr
  40526e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405272:	f004 0503 	and.w	r5, r4, #3
  405276:	f1c4 0000 	rsb	r0, r4, #0
  40527a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40527e:	f014 0f04 	tst.w	r4, #4
  405282:	f891 f040 	pld	[r1, #64]	; 0x40
  405286:	fa0c f505 	lsl.w	r5, ip, r5
  40528a:	ea62 0205 	orn	r2, r2, r5
  40528e:	bf1c      	itt	ne
  405290:	ea63 0305 	ornne	r3, r3, r5
  405294:	4662      	movne	r2, ip
  405296:	f04f 0400 	mov.w	r4, #0
  40529a:	e7a9      	b.n	4051f0 <strlen+0x30>

0040529c <__ssprint_r>:
  40529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052a0:	6893      	ldr	r3, [r2, #8]
  4052a2:	b083      	sub	sp, #12
  4052a4:	4690      	mov	r8, r2
  4052a6:	2b00      	cmp	r3, #0
  4052a8:	d070      	beq.n	40538c <__ssprint_r+0xf0>
  4052aa:	4682      	mov	sl, r0
  4052ac:	460c      	mov	r4, r1
  4052ae:	6817      	ldr	r7, [r2, #0]
  4052b0:	688d      	ldr	r5, [r1, #8]
  4052b2:	6808      	ldr	r0, [r1, #0]
  4052b4:	e042      	b.n	40533c <__ssprint_r+0xa0>
  4052b6:	89a3      	ldrh	r3, [r4, #12]
  4052b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4052bc:	d02e      	beq.n	40531c <__ssprint_r+0x80>
  4052be:	6965      	ldr	r5, [r4, #20]
  4052c0:	6921      	ldr	r1, [r4, #16]
  4052c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4052c6:	eba0 0b01 	sub.w	fp, r0, r1
  4052ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4052ce:	f10b 0001 	add.w	r0, fp, #1
  4052d2:	106d      	asrs	r5, r5, #1
  4052d4:	4430      	add	r0, r6
  4052d6:	42a8      	cmp	r0, r5
  4052d8:	462a      	mov	r2, r5
  4052da:	bf84      	itt	hi
  4052dc:	4605      	movhi	r5, r0
  4052de:	462a      	movhi	r2, r5
  4052e0:	055b      	lsls	r3, r3, #21
  4052e2:	d538      	bpl.n	405356 <__ssprint_r+0xba>
  4052e4:	4611      	mov	r1, r2
  4052e6:	4650      	mov	r0, sl
  4052e8:	f7ff f8a8 	bl	40443c <_malloc_r>
  4052ec:	2800      	cmp	r0, #0
  4052ee:	d03c      	beq.n	40536a <__ssprint_r+0xce>
  4052f0:	465a      	mov	r2, fp
  4052f2:	6921      	ldr	r1, [r4, #16]
  4052f4:	9001      	str	r0, [sp, #4]
  4052f6:	f7ff fba3 	bl	404a40 <memcpy>
  4052fa:	89a2      	ldrh	r2, [r4, #12]
  4052fc:	9b01      	ldr	r3, [sp, #4]
  4052fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405306:	81a2      	strh	r2, [r4, #12]
  405308:	eba5 020b 	sub.w	r2, r5, fp
  40530c:	eb03 000b 	add.w	r0, r3, fp
  405310:	6165      	str	r5, [r4, #20]
  405312:	6123      	str	r3, [r4, #16]
  405314:	6020      	str	r0, [r4, #0]
  405316:	60a2      	str	r2, [r4, #8]
  405318:	4635      	mov	r5, r6
  40531a:	46b3      	mov	fp, r6
  40531c:	465a      	mov	r2, fp
  40531e:	4649      	mov	r1, r9
  405320:	f000 fa18 	bl	405754 <memmove>
  405324:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405328:	68a2      	ldr	r2, [r4, #8]
  40532a:	6820      	ldr	r0, [r4, #0]
  40532c:	1b55      	subs	r5, r2, r5
  40532e:	4458      	add	r0, fp
  405330:	1b9e      	subs	r6, r3, r6
  405332:	60a5      	str	r5, [r4, #8]
  405334:	6020      	str	r0, [r4, #0]
  405336:	f8c8 6008 	str.w	r6, [r8, #8]
  40533a:	b33e      	cbz	r6, 40538c <__ssprint_r+0xf0>
  40533c:	687e      	ldr	r6, [r7, #4]
  40533e:	463b      	mov	r3, r7
  405340:	3708      	adds	r7, #8
  405342:	2e00      	cmp	r6, #0
  405344:	d0fa      	beq.n	40533c <__ssprint_r+0xa0>
  405346:	42ae      	cmp	r6, r5
  405348:	f8d3 9000 	ldr.w	r9, [r3]
  40534c:	46ab      	mov	fp, r5
  40534e:	d2b2      	bcs.n	4052b6 <__ssprint_r+0x1a>
  405350:	4635      	mov	r5, r6
  405352:	46b3      	mov	fp, r6
  405354:	e7e2      	b.n	40531c <__ssprint_r+0x80>
  405356:	4650      	mov	r0, sl
  405358:	f000 fa60 	bl	40581c <_realloc_r>
  40535c:	4603      	mov	r3, r0
  40535e:	2800      	cmp	r0, #0
  405360:	d1d2      	bne.n	405308 <__ssprint_r+0x6c>
  405362:	6921      	ldr	r1, [r4, #16]
  405364:	4650      	mov	r0, sl
  405366:	f000 f8f9 	bl	40555c <_free_r>
  40536a:	230c      	movs	r3, #12
  40536c:	f8ca 3000 	str.w	r3, [sl]
  405370:	89a3      	ldrh	r3, [r4, #12]
  405372:	2200      	movs	r2, #0
  405374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405378:	f04f 30ff 	mov.w	r0, #4294967295
  40537c:	81a3      	strh	r3, [r4, #12]
  40537e:	f8c8 2008 	str.w	r2, [r8, #8]
  405382:	f8c8 2004 	str.w	r2, [r8, #4]
  405386:	b003      	add	sp, #12
  405388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40538c:	2000      	movs	r0, #0
  40538e:	f8c8 0004 	str.w	r0, [r8, #4]
  405392:	b003      	add	sp, #12
  405394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405398 <__register_exitproc>:
  405398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40539c:	4d2c      	ldr	r5, [pc, #176]	; (405450 <__register_exitproc+0xb8>)
  40539e:	4606      	mov	r6, r0
  4053a0:	6828      	ldr	r0, [r5, #0]
  4053a2:	4698      	mov	r8, r3
  4053a4:	460f      	mov	r7, r1
  4053a6:	4691      	mov	r9, r2
  4053a8:	f7ff f844 	bl	404434 <__retarget_lock_acquire_recursive>
  4053ac:	4b29      	ldr	r3, [pc, #164]	; (405454 <__register_exitproc+0xbc>)
  4053ae:	681c      	ldr	r4, [r3, #0]
  4053b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4053b4:	2b00      	cmp	r3, #0
  4053b6:	d03e      	beq.n	405436 <__register_exitproc+0x9e>
  4053b8:	685a      	ldr	r2, [r3, #4]
  4053ba:	2a1f      	cmp	r2, #31
  4053bc:	dc1c      	bgt.n	4053f8 <__register_exitproc+0x60>
  4053be:	f102 0e01 	add.w	lr, r2, #1
  4053c2:	b176      	cbz	r6, 4053e2 <__register_exitproc+0x4a>
  4053c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4053c8:	2401      	movs	r4, #1
  4053ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4053ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4053d2:	4094      	lsls	r4, r2
  4053d4:	4320      	orrs	r0, r4
  4053d6:	2e02      	cmp	r6, #2
  4053d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4053dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4053e0:	d023      	beq.n	40542a <__register_exitproc+0x92>
  4053e2:	3202      	adds	r2, #2
  4053e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4053e8:	6828      	ldr	r0, [r5, #0]
  4053ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4053ee:	f7ff f823 	bl	404438 <__retarget_lock_release_recursive>
  4053f2:	2000      	movs	r0, #0
  4053f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053f8:	4b17      	ldr	r3, [pc, #92]	; (405458 <__register_exitproc+0xc0>)
  4053fa:	b30b      	cbz	r3, 405440 <__register_exitproc+0xa8>
  4053fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405400:	f3af 8000 	nop.w
  405404:	4603      	mov	r3, r0
  405406:	b1d8      	cbz	r0, 405440 <__register_exitproc+0xa8>
  405408:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40540c:	6002      	str	r2, [r0, #0]
  40540e:	2100      	movs	r1, #0
  405410:	6041      	str	r1, [r0, #4]
  405412:	460a      	mov	r2, r1
  405414:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405418:	f04f 0e01 	mov.w	lr, #1
  40541c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405420:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405424:	2e00      	cmp	r6, #0
  405426:	d0dc      	beq.n	4053e2 <__register_exitproc+0x4a>
  405428:	e7cc      	b.n	4053c4 <__register_exitproc+0x2c>
  40542a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40542e:	430c      	orrs	r4, r1
  405430:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405434:	e7d5      	b.n	4053e2 <__register_exitproc+0x4a>
  405436:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40543a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40543e:	e7bb      	b.n	4053b8 <__register_exitproc+0x20>
  405440:	6828      	ldr	r0, [r5, #0]
  405442:	f7fe fff9 	bl	404438 <__retarget_lock_release_recursive>
  405446:	f04f 30ff 	mov.w	r0, #4294967295
  40544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40544e:	bf00      	nop
  405450:	20400450 	.word	0x20400450
  405454:	00407240 	.word	0x00407240
  405458:	00000000 	.word	0x00000000

0040545c <_calloc_r>:
  40545c:	b510      	push	{r4, lr}
  40545e:	fb02 f101 	mul.w	r1, r2, r1
  405462:	f7fe ffeb 	bl	40443c <_malloc_r>
  405466:	4604      	mov	r4, r0
  405468:	b1d8      	cbz	r0, 4054a2 <_calloc_r+0x46>
  40546a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40546e:	f022 0203 	bic.w	r2, r2, #3
  405472:	3a04      	subs	r2, #4
  405474:	2a24      	cmp	r2, #36	; 0x24
  405476:	d818      	bhi.n	4054aa <_calloc_r+0x4e>
  405478:	2a13      	cmp	r2, #19
  40547a:	d914      	bls.n	4054a6 <_calloc_r+0x4a>
  40547c:	2300      	movs	r3, #0
  40547e:	2a1b      	cmp	r2, #27
  405480:	6003      	str	r3, [r0, #0]
  405482:	6043      	str	r3, [r0, #4]
  405484:	d916      	bls.n	4054b4 <_calloc_r+0x58>
  405486:	2a24      	cmp	r2, #36	; 0x24
  405488:	6083      	str	r3, [r0, #8]
  40548a:	60c3      	str	r3, [r0, #12]
  40548c:	bf11      	iteee	ne
  40548e:	f100 0210 	addne.w	r2, r0, #16
  405492:	6103      	streq	r3, [r0, #16]
  405494:	6143      	streq	r3, [r0, #20]
  405496:	f100 0218 	addeq.w	r2, r0, #24
  40549a:	2300      	movs	r3, #0
  40549c:	6013      	str	r3, [r2, #0]
  40549e:	6053      	str	r3, [r2, #4]
  4054a0:	6093      	str	r3, [r2, #8]
  4054a2:	4620      	mov	r0, r4
  4054a4:	bd10      	pop	{r4, pc}
  4054a6:	4602      	mov	r2, r0
  4054a8:	e7f7      	b.n	40549a <_calloc_r+0x3e>
  4054aa:	2100      	movs	r1, #0
  4054ac:	f7fc fd28 	bl	401f00 <memset>
  4054b0:	4620      	mov	r0, r4
  4054b2:	bd10      	pop	{r4, pc}
  4054b4:	f100 0208 	add.w	r2, r0, #8
  4054b8:	e7ef      	b.n	40549a <_calloc_r+0x3e>
  4054ba:	bf00      	nop

004054bc <_malloc_trim_r>:
  4054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4054be:	4f24      	ldr	r7, [pc, #144]	; (405550 <_malloc_trim_r+0x94>)
  4054c0:	460c      	mov	r4, r1
  4054c2:	4606      	mov	r6, r0
  4054c4:	f7ff fb56 	bl	404b74 <__malloc_lock>
  4054c8:	68bb      	ldr	r3, [r7, #8]
  4054ca:	685d      	ldr	r5, [r3, #4]
  4054cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4054d0:	310f      	adds	r1, #15
  4054d2:	f025 0503 	bic.w	r5, r5, #3
  4054d6:	4429      	add	r1, r5
  4054d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4054dc:	f021 010f 	bic.w	r1, r1, #15
  4054e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4054e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4054e8:	db07      	blt.n	4054fa <_malloc_trim_r+0x3e>
  4054ea:	2100      	movs	r1, #0
  4054ec:	4630      	mov	r0, r6
  4054ee:	f7ff fe47 	bl	405180 <_sbrk_r>
  4054f2:	68bb      	ldr	r3, [r7, #8]
  4054f4:	442b      	add	r3, r5
  4054f6:	4298      	cmp	r0, r3
  4054f8:	d004      	beq.n	405504 <_malloc_trim_r+0x48>
  4054fa:	4630      	mov	r0, r6
  4054fc:	f7ff fb40 	bl	404b80 <__malloc_unlock>
  405500:	2000      	movs	r0, #0
  405502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405504:	4261      	negs	r1, r4
  405506:	4630      	mov	r0, r6
  405508:	f7ff fe3a 	bl	405180 <_sbrk_r>
  40550c:	3001      	adds	r0, #1
  40550e:	d00d      	beq.n	40552c <_malloc_trim_r+0x70>
  405510:	4b10      	ldr	r3, [pc, #64]	; (405554 <_malloc_trim_r+0x98>)
  405512:	68ba      	ldr	r2, [r7, #8]
  405514:	6819      	ldr	r1, [r3, #0]
  405516:	1b2d      	subs	r5, r5, r4
  405518:	f045 0501 	orr.w	r5, r5, #1
  40551c:	4630      	mov	r0, r6
  40551e:	1b09      	subs	r1, r1, r4
  405520:	6055      	str	r5, [r2, #4]
  405522:	6019      	str	r1, [r3, #0]
  405524:	f7ff fb2c 	bl	404b80 <__malloc_unlock>
  405528:	2001      	movs	r0, #1
  40552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40552c:	2100      	movs	r1, #0
  40552e:	4630      	mov	r0, r6
  405530:	f7ff fe26 	bl	405180 <_sbrk_r>
  405534:	68ba      	ldr	r2, [r7, #8]
  405536:	1a83      	subs	r3, r0, r2
  405538:	2b0f      	cmp	r3, #15
  40553a:	ddde      	ble.n	4054fa <_malloc_trim_r+0x3e>
  40553c:	4c06      	ldr	r4, [pc, #24]	; (405558 <_malloc_trim_r+0x9c>)
  40553e:	4905      	ldr	r1, [pc, #20]	; (405554 <_malloc_trim_r+0x98>)
  405540:	6824      	ldr	r4, [r4, #0]
  405542:	f043 0301 	orr.w	r3, r3, #1
  405546:	1b00      	subs	r0, r0, r4
  405548:	6053      	str	r3, [r2, #4]
  40554a:	6008      	str	r0, [r1, #0]
  40554c:	e7d5      	b.n	4054fa <_malloc_trim_r+0x3e>
  40554e:	bf00      	nop
  405550:	20400454 	.word	0x20400454
  405554:	20400c74 	.word	0x20400c74
  405558:	2040085c 	.word	0x2040085c

0040555c <_free_r>:
  40555c:	2900      	cmp	r1, #0
  40555e:	d044      	beq.n	4055ea <_free_r+0x8e>
  405560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405564:	460d      	mov	r5, r1
  405566:	4680      	mov	r8, r0
  405568:	f7ff fb04 	bl	404b74 <__malloc_lock>
  40556c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405570:	4969      	ldr	r1, [pc, #420]	; (405718 <_free_r+0x1bc>)
  405572:	f027 0301 	bic.w	r3, r7, #1
  405576:	f1a5 0408 	sub.w	r4, r5, #8
  40557a:	18e2      	adds	r2, r4, r3
  40557c:	688e      	ldr	r6, [r1, #8]
  40557e:	6850      	ldr	r0, [r2, #4]
  405580:	42b2      	cmp	r2, r6
  405582:	f020 0003 	bic.w	r0, r0, #3
  405586:	d05e      	beq.n	405646 <_free_r+0xea>
  405588:	07fe      	lsls	r6, r7, #31
  40558a:	6050      	str	r0, [r2, #4]
  40558c:	d40b      	bmi.n	4055a6 <_free_r+0x4a>
  40558e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405592:	1be4      	subs	r4, r4, r7
  405594:	f101 0e08 	add.w	lr, r1, #8
  405598:	68a5      	ldr	r5, [r4, #8]
  40559a:	4575      	cmp	r5, lr
  40559c:	443b      	add	r3, r7
  40559e:	d06d      	beq.n	40567c <_free_r+0x120>
  4055a0:	68e7      	ldr	r7, [r4, #12]
  4055a2:	60ef      	str	r7, [r5, #12]
  4055a4:	60bd      	str	r5, [r7, #8]
  4055a6:	1815      	adds	r5, r2, r0
  4055a8:	686d      	ldr	r5, [r5, #4]
  4055aa:	07ed      	lsls	r5, r5, #31
  4055ac:	d53e      	bpl.n	40562c <_free_r+0xd0>
  4055ae:	f043 0201 	orr.w	r2, r3, #1
  4055b2:	6062      	str	r2, [r4, #4]
  4055b4:	50e3      	str	r3, [r4, r3]
  4055b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4055ba:	d217      	bcs.n	4055ec <_free_r+0x90>
  4055bc:	08db      	lsrs	r3, r3, #3
  4055be:	1c58      	adds	r0, r3, #1
  4055c0:	109a      	asrs	r2, r3, #2
  4055c2:	684d      	ldr	r5, [r1, #4]
  4055c4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4055c8:	60a7      	str	r7, [r4, #8]
  4055ca:	2301      	movs	r3, #1
  4055cc:	4093      	lsls	r3, r2
  4055ce:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4055d2:	432b      	orrs	r3, r5
  4055d4:	3a08      	subs	r2, #8
  4055d6:	60e2      	str	r2, [r4, #12]
  4055d8:	604b      	str	r3, [r1, #4]
  4055da:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4055de:	60fc      	str	r4, [r7, #12]
  4055e0:	4640      	mov	r0, r8
  4055e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055e6:	f7ff bacb 	b.w	404b80 <__malloc_unlock>
  4055ea:	4770      	bx	lr
  4055ec:	0a5a      	lsrs	r2, r3, #9
  4055ee:	2a04      	cmp	r2, #4
  4055f0:	d852      	bhi.n	405698 <_free_r+0x13c>
  4055f2:	099a      	lsrs	r2, r3, #6
  4055f4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4055f8:	00ff      	lsls	r7, r7, #3
  4055fa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4055fe:	19c8      	adds	r0, r1, r7
  405600:	59ca      	ldr	r2, [r1, r7]
  405602:	3808      	subs	r0, #8
  405604:	4290      	cmp	r0, r2
  405606:	d04f      	beq.n	4056a8 <_free_r+0x14c>
  405608:	6851      	ldr	r1, [r2, #4]
  40560a:	f021 0103 	bic.w	r1, r1, #3
  40560e:	428b      	cmp	r3, r1
  405610:	d232      	bcs.n	405678 <_free_r+0x11c>
  405612:	6892      	ldr	r2, [r2, #8]
  405614:	4290      	cmp	r0, r2
  405616:	d1f7      	bne.n	405608 <_free_r+0xac>
  405618:	68c3      	ldr	r3, [r0, #12]
  40561a:	60a0      	str	r0, [r4, #8]
  40561c:	60e3      	str	r3, [r4, #12]
  40561e:	609c      	str	r4, [r3, #8]
  405620:	60c4      	str	r4, [r0, #12]
  405622:	4640      	mov	r0, r8
  405624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405628:	f7ff baaa 	b.w	404b80 <__malloc_unlock>
  40562c:	6895      	ldr	r5, [r2, #8]
  40562e:	4f3b      	ldr	r7, [pc, #236]	; (40571c <_free_r+0x1c0>)
  405630:	42bd      	cmp	r5, r7
  405632:	4403      	add	r3, r0
  405634:	d040      	beq.n	4056b8 <_free_r+0x15c>
  405636:	68d0      	ldr	r0, [r2, #12]
  405638:	60e8      	str	r0, [r5, #12]
  40563a:	f043 0201 	orr.w	r2, r3, #1
  40563e:	6085      	str	r5, [r0, #8]
  405640:	6062      	str	r2, [r4, #4]
  405642:	50e3      	str	r3, [r4, r3]
  405644:	e7b7      	b.n	4055b6 <_free_r+0x5a>
  405646:	07ff      	lsls	r7, r7, #31
  405648:	4403      	add	r3, r0
  40564a:	d407      	bmi.n	40565c <_free_r+0x100>
  40564c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405650:	1aa4      	subs	r4, r4, r2
  405652:	4413      	add	r3, r2
  405654:	68a0      	ldr	r0, [r4, #8]
  405656:	68e2      	ldr	r2, [r4, #12]
  405658:	60c2      	str	r2, [r0, #12]
  40565a:	6090      	str	r0, [r2, #8]
  40565c:	4a30      	ldr	r2, [pc, #192]	; (405720 <_free_r+0x1c4>)
  40565e:	6812      	ldr	r2, [r2, #0]
  405660:	f043 0001 	orr.w	r0, r3, #1
  405664:	4293      	cmp	r3, r2
  405666:	6060      	str	r0, [r4, #4]
  405668:	608c      	str	r4, [r1, #8]
  40566a:	d3b9      	bcc.n	4055e0 <_free_r+0x84>
  40566c:	4b2d      	ldr	r3, [pc, #180]	; (405724 <_free_r+0x1c8>)
  40566e:	4640      	mov	r0, r8
  405670:	6819      	ldr	r1, [r3, #0]
  405672:	f7ff ff23 	bl	4054bc <_malloc_trim_r>
  405676:	e7b3      	b.n	4055e0 <_free_r+0x84>
  405678:	4610      	mov	r0, r2
  40567a:	e7cd      	b.n	405618 <_free_r+0xbc>
  40567c:	1811      	adds	r1, r2, r0
  40567e:	6849      	ldr	r1, [r1, #4]
  405680:	07c9      	lsls	r1, r1, #31
  405682:	d444      	bmi.n	40570e <_free_r+0x1b2>
  405684:	6891      	ldr	r1, [r2, #8]
  405686:	68d2      	ldr	r2, [r2, #12]
  405688:	60ca      	str	r2, [r1, #12]
  40568a:	4403      	add	r3, r0
  40568c:	f043 0001 	orr.w	r0, r3, #1
  405690:	6091      	str	r1, [r2, #8]
  405692:	6060      	str	r0, [r4, #4]
  405694:	50e3      	str	r3, [r4, r3]
  405696:	e7a3      	b.n	4055e0 <_free_r+0x84>
  405698:	2a14      	cmp	r2, #20
  40569a:	d816      	bhi.n	4056ca <_free_r+0x16e>
  40569c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4056a0:	00ff      	lsls	r7, r7, #3
  4056a2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4056a6:	e7aa      	b.n	4055fe <_free_r+0xa2>
  4056a8:	10aa      	asrs	r2, r5, #2
  4056aa:	2301      	movs	r3, #1
  4056ac:	684d      	ldr	r5, [r1, #4]
  4056ae:	4093      	lsls	r3, r2
  4056b0:	432b      	orrs	r3, r5
  4056b2:	604b      	str	r3, [r1, #4]
  4056b4:	4603      	mov	r3, r0
  4056b6:	e7b0      	b.n	40561a <_free_r+0xbe>
  4056b8:	f043 0201 	orr.w	r2, r3, #1
  4056bc:	614c      	str	r4, [r1, #20]
  4056be:	610c      	str	r4, [r1, #16]
  4056c0:	60e5      	str	r5, [r4, #12]
  4056c2:	60a5      	str	r5, [r4, #8]
  4056c4:	6062      	str	r2, [r4, #4]
  4056c6:	50e3      	str	r3, [r4, r3]
  4056c8:	e78a      	b.n	4055e0 <_free_r+0x84>
  4056ca:	2a54      	cmp	r2, #84	; 0x54
  4056cc:	d806      	bhi.n	4056dc <_free_r+0x180>
  4056ce:	0b1a      	lsrs	r2, r3, #12
  4056d0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4056d4:	00ff      	lsls	r7, r7, #3
  4056d6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4056da:	e790      	b.n	4055fe <_free_r+0xa2>
  4056dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4056e0:	d806      	bhi.n	4056f0 <_free_r+0x194>
  4056e2:	0bda      	lsrs	r2, r3, #15
  4056e4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4056e8:	00ff      	lsls	r7, r7, #3
  4056ea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4056ee:	e786      	b.n	4055fe <_free_r+0xa2>
  4056f0:	f240 5054 	movw	r0, #1364	; 0x554
  4056f4:	4282      	cmp	r2, r0
  4056f6:	d806      	bhi.n	405706 <_free_r+0x1aa>
  4056f8:	0c9a      	lsrs	r2, r3, #18
  4056fa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4056fe:	00ff      	lsls	r7, r7, #3
  405700:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405704:	e77b      	b.n	4055fe <_free_r+0xa2>
  405706:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40570a:	257e      	movs	r5, #126	; 0x7e
  40570c:	e777      	b.n	4055fe <_free_r+0xa2>
  40570e:	f043 0101 	orr.w	r1, r3, #1
  405712:	6061      	str	r1, [r4, #4]
  405714:	6013      	str	r3, [r2, #0]
  405716:	e763      	b.n	4055e0 <_free_r+0x84>
  405718:	20400454 	.word	0x20400454
  40571c:	2040045c 	.word	0x2040045c
  405720:	20400860 	.word	0x20400860
  405724:	20400ca4 	.word	0x20400ca4

00405728 <__ascii_mbtowc>:
  405728:	b082      	sub	sp, #8
  40572a:	b149      	cbz	r1, 405740 <__ascii_mbtowc+0x18>
  40572c:	b15a      	cbz	r2, 405746 <__ascii_mbtowc+0x1e>
  40572e:	b16b      	cbz	r3, 40574c <__ascii_mbtowc+0x24>
  405730:	7813      	ldrb	r3, [r2, #0]
  405732:	600b      	str	r3, [r1, #0]
  405734:	7812      	ldrb	r2, [r2, #0]
  405736:	1c10      	adds	r0, r2, #0
  405738:	bf18      	it	ne
  40573a:	2001      	movne	r0, #1
  40573c:	b002      	add	sp, #8
  40573e:	4770      	bx	lr
  405740:	a901      	add	r1, sp, #4
  405742:	2a00      	cmp	r2, #0
  405744:	d1f3      	bne.n	40572e <__ascii_mbtowc+0x6>
  405746:	4610      	mov	r0, r2
  405748:	b002      	add	sp, #8
  40574a:	4770      	bx	lr
  40574c:	f06f 0001 	mvn.w	r0, #1
  405750:	e7f4      	b.n	40573c <__ascii_mbtowc+0x14>
  405752:	bf00      	nop

00405754 <memmove>:
  405754:	4288      	cmp	r0, r1
  405756:	b5f0      	push	{r4, r5, r6, r7, lr}
  405758:	d90d      	bls.n	405776 <memmove+0x22>
  40575a:	188b      	adds	r3, r1, r2
  40575c:	4298      	cmp	r0, r3
  40575e:	d20a      	bcs.n	405776 <memmove+0x22>
  405760:	1884      	adds	r4, r0, r2
  405762:	2a00      	cmp	r2, #0
  405764:	d051      	beq.n	40580a <memmove+0xb6>
  405766:	4622      	mov	r2, r4
  405768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40576c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405770:	4299      	cmp	r1, r3
  405772:	d1f9      	bne.n	405768 <memmove+0x14>
  405774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405776:	2a0f      	cmp	r2, #15
  405778:	d948      	bls.n	40580c <memmove+0xb8>
  40577a:	ea41 0300 	orr.w	r3, r1, r0
  40577e:	079b      	lsls	r3, r3, #30
  405780:	d146      	bne.n	405810 <memmove+0xbc>
  405782:	f100 0410 	add.w	r4, r0, #16
  405786:	f101 0310 	add.w	r3, r1, #16
  40578a:	4615      	mov	r5, r2
  40578c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405790:	f844 6c10 	str.w	r6, [r4, #-16]
  405794:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405798:	f844 6c0c 	str.w	r6, [r4, #-12]
  40579c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4057a0:	f844 6c08 	str.w	r6, [r4, #-8]
  4057a4:	3d10      	subs	r5, #16
  4057a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4057aa:	f844 6c04 	str.w	r6, [r4, #-4]
  4057ae:	2d0f      	cmp	r5, #15
  4057b0:	f103 0310 	add.w	r3, r3, #16
  4057b4:	f104 0410 	add.w	r4, r4, #16
  4057b8:	d8e8      	bhi.n	40578c <memmove+0x38>
  4057ba:	f1a2 0310 	sub.w	r3, r2, #16
  4057be:	f023 030f 	bic.w	r3, r3, #15
  4057c2:	f002 0e0f 	and.w	lr, r2, #15
  4057c6:	3310      	adds	r3, #16
  4057c8:	f1be 0f03 	cmp.w	lr, #3
  4057cc:	4419      	add	r1, r3
  4057ce:	4403      	add	r3, r0
  4057d0:	d921      	bls.n	405816 <memmove+0xc2>
  4057d2:	1f1e      	subs	r6, r3, #4
  4057d4:	460d      	mov	r5, r1
  4057d6:	4674      	mov	r4, lr
  4057d8:	3c04      	subs	r4, #4
  4057da:	f855 7b04 	ldr.w	r7, [r5], #4
  4057de:	f846 7f04 	str.w	r7, [r6, #4]!
  4057e2:	2c03      	cmp	r4, #3
  4057e4:	d8f8      	bhi.n	4057d8 <memmove+0x84>
  4057e6:	f1ae 0404 	sub.w	r4, lr, #4
  4057ea:	f024 0403 	bic.w	r4, r4, #3
  4057ee:	3404      	adds	r4, #4
  4057f0:	4421      	add	r1, r4
  4057f2:	4423      	add	r3, r4
  4057f4:	f002 0203 	and.w	r2, r2, #3
  4057f8:	b162      	cbz	r2, 405814 <memmove+0xc0>
  4057fa:	3b01      	subs	r3, #1
  4057fc:	440a      	add	r2, r1
  4057fe:	f811 4b01 	ldrb.w	r4, [r1], #1
  405802:	f803 4f01 	strb.w	r4, [r3, #1]!
  405806:	428a      	cmp	r2, r1
  405808:	d1f9      	bne.n	4057fe <memmove+0xaa>
  40580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40580c:	4603      	mov	r3, r0
  40580e:	e7f3      	b.n	4057f8 <memmove+0xa4>
  405810:	4603      	mov	r3, r0
  405812:	e7f2      	b.n	4057fa <memmove+0xa6>
  405814:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405816:	4672      	mov	r2, lr
  405818:	e7ee      	b.n	4057f8 <memmove+0xa4>
  40581a:	bf00      	nop

0040581c <_realloc_r>:
  40581c:	2900      	cmp	r1, #0
  40581e:	f000 8095 	beq.w	40594c <_realloc_r+0x130>
  405822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405826:	460d      	mov	r5, r1
  405828:	4616      	mov	r6, r2
  40582a:	b083      	sub	sp, #12
  40582c:	4680      	mov	r8, r0
  40582e:	f106 070b 	add.w	r7, r6, #11
  405832:	f7ff f99f 	bl	404b74 <__malloc_lock>
  405836:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40583a:	2f16      	cmp	r7, #22
  40583c:	f02e 0403 	bic.w	r4, lr, #3
  405840:	f1a5 0908 	sub.w	r9, r5, #8
  405844:	d83c      	bhi.n	4058c0 <_realloc_r+0xa4>
  405846:	2210      	movs	r2, #16
  405848:	4617      	mov	r7, r2
  40584a:	42be      	cmp	r6, r7
  40584c:	d83d      	bhi.n	4058ca <_realloc_r+0xae>
  40584e:	4294      	cmp	r4, r2
  405850:	da43      	bge.n	4058da <_realloc_r+0xbe>
  405852:	4bc4      	ldr	r3, [pc, #784]	; (405b64 <_realloc_r+0x348>)
  405854:	6899      	ldr	r1, [r3, #8]
  405856:	eb09 0004 	add.w	r0, r9, r4
  40585a:	4288      	cmp	r0, r1
  40585c:	f000 80b4 	beq.w	4059c8 <_realloc_r+0x1ac>
  405860:	6843      	ldr	r3, [r0, #4]
  405862:	f023 0101 	bic.w	r1, r3, #1
  405866:	4401      	add	r1, r0
  405868:	6849      	ldr	r1, [r1, #4]
  40586a:	07c9      	lsls	r1, r1, #31
  40586c:	d54c      	bpl.n	405908 <_realloc_r+0xec>
  40586e:	f01e 0f01 	tst.w	lr, #1
  405872:	f000 809b 	beq.w	4059ac <_realloc_r+0x190>
  405876:	4631      	mov	r1, r6
  405878:	4640      	mov	r0, r8
  40587a:	f7fe fddf 	bl	40443c <_malloc_r>
  40587e:	4606      	mov	r6, r0
  405880:	2800      	cmp	r0, #0
  405882:	d03a      	beq.n	4058fa <_realloc_r+0xde>
  405884:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405888:	f023 0301 	bic.w	r3, r3, #1
  40588c:	444b      	add	r3, r9
  40588e:	f1a0 0208 	sub.w	r2, r0, #8
  405892:	429a      	cmp	r2, r3
  405894:	f000 8121 	beq.w	405ada <_realloc_r+0x2be>
  405898:	1f22      	subs	r2, r4, #4
  40589a:	2a24      	cmp	r2, #36	; 0x24
  40589c:	f200 8107 	bhi.w	405aae <_realloc_r+0x292>
  4058a0:	2a13      	cmp	r2, #19
  4058a2:	f200 80db 	bhi.w	405a5c <_realloc_r+0x240>
  4058a6:	4603      	mov	r3, r0
  4058a8:	462a      	mov	r2, r5
  4058aa:	6811      	ldr	r1, [r2, #0]
  4058ac:	6019      	str	r1, [r3, #0]
  4058ae:	6851      	ldr	r1, [r2, #4]
  4058b0:	6059      	str	r1, [r3, #4]
  4058b2:	6892      	ldr	r2, [r2, #8]
  4058b4:	609a      	str	r2, [r3, #8]
  4058b6:	4629      	mov	r1, r5
  4058b8:	4640      	mov	r0, r8
  4058ba:	f7ff fe4f 	bl	40555c <_free_r>
  4058be:	e01c      	b.n	4058fa <_realloc_r+0xde>
  4058c0:	f027 0707 	bic.w	r7, r7, #7
  4058c4:	2f00      	cmp	r7, #0
  4058c6:	463a      	mov	r2, r7
  4058c8:	dabf      	bge.n	40584a <_realloc_r+0x2e>
  4058ca:	2600      	movs	r6, #0
  4058cc:	230c      	movs	r3, #12
  4058ce:	4630      	mov	r0, r6
  4058d0:	f8c8 3000 	str.w	r3, [r8]
  4058d4:	b003      	add	sp, #12
  4058d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058da:	462e      	mov	r6, r5
  4058dc:	1be3      	subs	r3, r4, r7
  4058de:	2b0f      	cmp	r3, #15
  4058e0:	d81e      	bhi.n	405920 <_realloc_r+0x104>
  4058e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4058e6:	f003 0301 	and.w	r3, r3, #1
  4058ea:	4323      	orrs	r3, r4
  4058ec:	444c      	add	r4, r9
  4058ee:	f8c9 3004 	str.w	r3, [r9, #4]
  4058f2:	6863      	ldr	r3, [r4, #4]
  4058f4:	f043 0301 	orr.w	r3, r3, #1
  4058f8:	6063      	str	r3, [r4, #4]
  4058fa:	4640      	mov	r0, r8
  4058fc:	f7ff f940 	bl	404b80 <__malloc_unlock>
  405900:	4630      	mov	r0, r6
  405902:	b003      	add	sp, #12
  405904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405908:	f023 0303 	bic.w	r3, r3, #3
  40590c:	18e1      	adds	r1, r4, r3
  40590e:	4291      	cmp	r1, r2
  405910:	db1f      	blt.n	405952 <_realloc_r+0x136>
  405912:	68c3      	ldr	r3, [r0, #12]
  405914:	6882      	ldr	r2, [r0, #8]
  405916:	462e      	mov	r6, r5
  405918:	60d3      	str	r3, [r2, #12]
  40591a:	460c      	mov	r4, r1
  40591c:	609a      	str	r2, [r3, #8]
  40591e:	e7dd      	b.n	4058dc <_realloc_r+0xc0>
  405920:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405924:	eb09 0107 	add.w	r1, r9, r7
  405928:	f002 0201 	and.w	r2, r2, #1
  40592c:	444c      	add	r4, r9
  40592e:	f043 0301 	orr.w	r3, r3, #1
  405932:	4317      	orrs	r7, r2
  405934:	f8c9 7004 	str.w	r7, [r9, #4]
  405938:	604b      	str	r3, [r1, #4]
  40593a:	6863      	ldr	r3, [r4, #4]
  40593c:	f043 0301 	orr.w	r3, r3, #1
  405940:	3108      	adds	r1, #8
  405942:	6063      	str	r3, [r4, #4]
  405944:	4640      	mov	r0, r8
  405946:	f7ff fe09 	bl	40555c <_free_r>
  40594a:	e7d6      	b.n	4058fa <_realloc_r+0xde>
  40594c:	4611      	mov	r1, r2
  40594e:	f7fe bd75 	b.w	40443c <_malloc_r>
  405952:	f01e 0f01 	tst.w	lr, #1
  405956:	d18e      	bne.n	405876 <_realloc_r+0x5a>
  405958:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40595c:	eba9 0a01 	sub.w	sl, r9, r1
  405960:	f8da 1004 	ldr.w	r1, [sl, #4]
  405964:	f021 0103 	bic.w	r1, r1, #3
  405968:	440b      	add	r3, r1
  40596a:	4423      	add	r3, r4
  40596c:	4293      	cmp	r3, r2
  40596e:	db25      	blt.n	4059bc <_realloc_r+0x1a0>
  405970:	68c2      	ldr	r2, [r0, #12]
  405972:	6881      	ldr	r1, [r0, #8]
  405974:	4656      	mov	r6, sl
  405976:	60ca      	str	r2, [r1, #12]
  405978:	6091      	str	r1, [r2, #8]
  40597a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40597e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405982:	1f22      	subs	r2, r4, #4
  405984:	2a24      	cmp	r2, #36	; 0x24
  405986:	60c1      	str	r1, [r0, #12]
  405988:	6088      	str	r0, [r1, #8]
  40598a:	f200 8094 	bhi.w	405ab6 <_realloc_r+0x29a>
  40598e:	2a13      	cmp	r2, #19
  405990:	d96f      	bls.n	405a72 <_realloc_r+0x256>
  405992:	6829      	ldr	r1, [r5, #0]
  405994:	f8ca 1008 	str.w	r1, [sl, #8]
  405998:	6869      	ldr	r1, [r5, #4]
  40599a:	f8ca 100c 	str.w	r1, [sl, #12]
  40599e:	2a1b      	cmp	r2, #27
  4059a0:	f200 80a2 	bhi.w	405ae8 <_realloc_r+0x2cc>
  4059a4:	3508      	adds	r5, #8
  4059a6:	f10a 0210 	add.w	r2, sl, #16
  4059aa:	e063      	b.n	405a74 <_realloc_r+0x258>
  4059ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4059b0:	eba9 0a03 	sub.w	sl, r9, r3
  4059b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4059b8:	f021 0103 	bic.w	r1, r1, #3
  4059bc:	1863      	adds	r3, r4, r1
  4059be:	4293      	cmp	r3, r2
  4059c0:	f6ff af59 	blt.w	405876 <_realloc_r+0x5a>
  4059c4:	4656      	mov	r6, sl
  4059c6:	e7d8      	b.n	40597a <_realloc_r+0x15e>
  4059c8:	6841      	ldr	r1, [r0, #4]
  4059ca:	f021 0b03 	bic.w	fp, r1, #3
  4059ce:	44a3      	add	fp, r4
  4059d0:	f107 0010 	add.w	r0, r7, #16
  4059d4:	4583      	cmp	fp, r0
  4059d6:	da56      	bge.n	405a86 <_realloc_r+0x26a>
  4059d8:	f01e 0f01 	tst.w	lr, #1
  4059dc:	f47f af4b 	bne.w	405876 <_realloc_r+0x5a>
  4059e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4059e4:	eba9 0a01 	sub.w	sl, r9, r1
  4059e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4059ec:	f021 0103 	bic.w	r1, r1, #3
  4059f0:	448b      	add	fp, r1
  4059f2:	4558      	cmp	r0, fp
  4059f4:	dce2      	bgt.n	4059bc <_realloc_r+0x1a0>
  4059f6:	4656      	mov	r6, sl
  4059f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4059fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405a00:	1f22      	subs	r2, r4, #4
  405a02:	2a24      	cmp	r2, #36	; 0x24
  405a04:	60c1      	str	r1, [r0, #12]
  405a06:	6088      	str	r0, [r1, #8]
  405a08:	f200 808f 	bhi.w	405b2a <_realloc_r+0x30e>
  405a0c:	2a13      	cmp	r2, #19
  405a0e:	f240 808a 	bls.w	405b26 <_realloc_r+0x30a>
  405a12:	6829      	ldr	r1, [r5, #0]
  405a14:	f8ca 1008 	str.w	r1, [sl, #8]
  405a18:	6869      	ldr	r1, [r5, #4]
  405a1a:	f8ca 100c 	str.w	r1, [sl, #12]
  405a1e:	2a1b      	cmp	r2, #27
  405a20:	f200 808a 	bhi.w	405b38 <_realloc_r+0x31c>
  405a24:	3508      	adds	r5, #8
  405a26:	f10a 0210 	add.w	r2, sl, #16
  405a2a:	6829      	ldr	r1, [r5, #0]
  405a2c:	6011      	str	r1, [r2, #0]
  405a2e:	6869      	ldr	r1, [r5, #4]
  405a30:	6051      	str	r1, [r2, #4]
  405a32:	68a9      	ldr	r1, [r5, #8]
  405a34:	6091      	str	r1, [r2, #8]
  405a36:	eb0a 0107 	add.w	r1, sl, r7
  405a3a:	ebab 0207 	sub.w	r2, fp, r7
  405a3e:	f042 0201 	orr.w	r2, r2, #1
  405a42:	6099      	str	r1, [r3, #8]
  405a44:	604a      	str	r2, [r1, #4]
  405a46:	f8da 3004 	ldr.w	r3, [sl, #4]
  405a4a:	f003 0301 	and.w	r3, r3, #1
  405a4e:	431f      	orrs	r7, r3
  405a50:	4640      	mov	r0, r8
  405a52:	f8ca 7004 	str.w	r7, [sl, #4]
  405a56:	f7ff f893 	bl	404b80 <__malloc_unlock>
  405a5a:	e751      	b.n	405900 <_realloc_r+0xe4>
  405a5c:	682b      	ldr	r3, [r5, #0]
  405a5e:	6003      	str	r3, [r0, #0]
  405a60:	686b      	ldr	r3, [r5, #4]
  405a62:	6043      	str	r3, [r0, #4]
  405a64:	2a1b      	cmp	r2, #27
  405a66:	d82d      	bhi.n	405ac4 <_realloc_r+0x2a8>
  405a68:	f100 0308 	add.w	r3, r0, #8
  405a6c:	f105 0208 	add.w	r2, r5, #8
  405a70:	e71b      	b.n	4058aa <_realloc_r+0x8e>
  405a72:	4632      	mov	r2, r6
  405a74:	6829      	ldr	r1, [r5, #0]
  405a76:	6011      	str	r1, [r2, #0]
  405a78:	6869      	ldr	r1, [r5, #4]
  405a7a:	6051      	str	r1, [r2, #4]
  405a7c:	68a9      	ldr	r1, [r5, #8]
  405a7e:	6091      	str	r1, [r2, #8]
  405a80:	461c      	mov	r4, r3
  405a82:	46d1      	mov	r9, sl
  405a84:	e72a      	b.n	4058dc <_realloc_r+0xc0>
  405a86:	eb09 0107 	add.w	r1, r9, r7
  405a8a:	ebab 0b07 	sub.w	fp, fp, r7
  405a8e:	f04b 0201 	orr.w	r2, fp, #1
  405a92:	6099      	str	r1, [r3, #8]
  405a94:	604a      	str	r2, [r1, #4]
  405a96:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405a9a:	f003 0301 	and.w	r3, r3, #1
  405a9e:	431f      	orrs	r7, r3
  405aa0:	4640      	mov	r0, r8
  405aa2:	f845 7c04 	str.w	r7, [r5, #-4]
  405aa6:	f7ff f86b 	bl	404b80 <__malloc_unlock>
  405aaa:	462e      	mov	r6, r5
  405aac:	e728      	b.n	405900 <_realloc_r+0xe4>
  405aae:	4629      	mov	r1, r5
  405ab0:	f7ff fe50 	bl	405754 <memmove>
  405ab4:	e6ff      	b.n	4058b6 <_realloc_r+0x9a>
  405ab6:	4629      	mov	r1, r5
  405ab8:	4630      	mov	r0, r6
  405aba:	461c      	mov	r4, r3
  405abc:	46d1      	mov	r9, sl
  405abe:	f7ff fe49 	bl	405754 <memmove>
  405ac2:	e70b      	b.n	4058dc <_realloc_r+0xc0>
  405ac4:	68ab      	ldr	r3, [r5, #8]
  405ac6:	6083      	str	r3, [r0, #8]
  405ac8:	68eb      	ldr	r3, [r5, #12]
  405aca:	60c3      	str	r3, [r0, #12]
  405acc:	2a24      	cmp	r2, #36	; 0x24
  405ace:	d017      	beq.n	405b00 <_realloc_r+0x2e4>
  405ad0:	f100 0310 	add.w	r3, r0, #16
  405ad4:	f105 0210 	add.w	r2, r5, #16
  405ad8:	e6e7      	b.n	4058aa <_realloc_r+0x8e>
  405ada:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405ade:	f023 0303 	bic.w	r3, r3, #3
  405ae2:	441c      	add	r4, r3
  405ae4:	462e      	mov	r6, r5
  405ae6:	e6f9      	b.n	4058dc <_realloc_r+0xc0>
  405ae8:	68a9      	ldr	r1, [r5, #8]
  405aea:	f8ca 1010 	str.w	r1, [sl, #16]
  405aee:	68e9      	ldr	r1, [r5, #12]
  405af0:	f8ca 1014 	str.w	r1, [sl, #20]
  405af4:	2a24      	cmp	r2, #36	; 0x24
  405af6:	d00c      	beq.n	405b12 <_realloc_r+0x2f6>
  405af8:	3510      	adds	r5, #16
  405afa:	f10a 0218 	add.w	r2, sl, #24
  405afe:	e7b9      	b.n	405a74 <_realloc_r+0x258>
  405b00:	692b      	ldr	r3, [r5, #16]
  405b02:	6103      	str	r3, [r0, #16]
  405b04:	696b      	ldr	r3, [r5, #20]
  405b06:	6143      	str	r3, [r0, #20]
  405b08:	f105 0218 	add.w	r2, r5, #24
  405b0c:	f100 0318 	add.w	r3, r0, #24
  405b10:	e6cb      	b.n	4058aa <_realloc_r+0x8e>
  405b12:	692a      	ldr	r2, [r5, #16]
  405b14:	f8ca 2018 	str.w	r2, [sl, #24]
  405b18:	696a      	ldr	r2, [r5, #20]
  405b1a:	f8ca 201c 	str.w	r2, [sl, #28]
  405b1e:	3518      	adds	r5, #24
  405b20:	f10a 0220 	add.w	r2, sl, #32
  405b24:	e7a6      	b.n	405a74 <_realloc_r+0x258>
  405b26:	4632      	mov	r2, r6
  405b28:	e77f      	b.n	405a2a <_realloc_r+0x20e>
  405b2a:	4629      	mov	r1, r5
  405b2c:	4630      	mov	r0, r6
  405b2e:	9301      	str	r3, [sp, #4]
  405b30:	f7ff fe10 	bl	405754 <memmove>
  405b34:	9b01      	ldr	r3, [sp, #4]
  405b36:	e77e      	b.n	405a36 <_realloc_r+0x21a>
  405b38:	68a9      	ldr	r1, [r5, #8]
  405b3a:	f8ca 1010 	str.w	r1, [sl, #16]
  405b3e:	68e9      	ldr	r1, [r5, #12]
  405b40:	f8ca 1014 	str.w	r1, [sl, #20]
  405b44:	2a24      	cmp	r2, #36	; 0x24
  405b46:	d003      	beq.n	405b50 <_realloc_r+0x334>
  405b48:	3510      	adds	r5, #16
  405b4a:	f10a 0218 	add.w	r2, sl, #24
  405b4e:	e76c      	b.n	405a2a <_realloc_r+0x20e>
  405b50:	692a      	ldr	r2, [r5, #16]
  405b52:	f8ca 2018 	str.w	r2, [sl, #24]
  405b56:	696a      	ldr	r2, [r5, #20]
  405b58:	f8ca 201c 	str.w	r2, [sl, #28]
  405b5c:	3518      	adds	r5, #24
  405b5e:	f10a 0220 	add.w	r2, sl, #32
  405b62:	e762      	b.n	405a2a <_realloc_r+0x20e>
  405b64:	20400454 	.word	0x20400454

00405b68 <__ascii_wctomb>:
  405b68:	b121      	cbz	r1, 405b74 <__ascii_wctomb+0xc>
  405b6a:	2aff      	cmp	r2, #255	; 0xff
  405b6c:	d804      	bhi.n	405b78 <__ascii_wctomb+0x10>
  405b6e:	700a      	strb	r2, [r1, #0]
  405b70:	2001      	movs	r0, #1
  405b72:	4770      	bx	lr
  405b74:	4608      	mov	r0, r1
  405b76:	4770      	bx	lr
  405b78:	238a      	movs	r3, #138	; 0x8a
  405b7a:	6003      	str	r3, [r0, #0]
  405b7c:	f04f 30ff 	mov.w	r0, #4294967295
  405b80:	4770      	bx	lr
  405b82:	bf00      	nop

00405b84 <__aeabi_drsub>:
  405b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405b88:	e002      	b.n	405b90 <__adddf3>
  405b8a:	bf00      	nop

00405b8c <__aeabi_dsub>:
  405b8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405b90 <__adddf3>:
  405b90:	b530      	push	{r4, r5, lr}
  405b92:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405b96:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405b9a:	ea94 0f05 	teq	r4, r5
  405b9e:	bf08      	it	eq
  405ba0:	ea90 0f02 	teqeq	r0, r2
  405ba4:	bf1f      	itttt	ne
  405ba6:	ea54 0c00 	orrsne.w	ip, r4, r0
  405baa:	ea55 0c02 	orrsne.w	ip, r5, r2
  405bae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405bb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405bb6:	f000 80e2 	beq.w	405d7e <__adddf3+0x1ee>
  405bba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405bbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405bc2:	bfb8      	it	lt
  405bc4:	426d      	neglt	r5, r5
  405bc6:	dd0c      	ble.n	405be2 <__adddf3+0x52>
  405bc8:	442c      	add	r4, r5
  405bca:	ea80 0202 	eor.w	r2, r0, r2
  405bce:	ea81 0303 	eor.w	r3, r1, r3
  405bd2:	ea82 0000 	eor.w	r0, r2, r0
  405bd6:	ea83 0101 	eor.w	r1, r3, r1
  405bda:	ea80 0202 	eor.w	r2, r0, r2
  405bde:	ea81 0303 	eor.w	r3, r1, r3
  405be2:	2d36      	cmp	r5, #54	; 0x36
  405be4:	bf88      	it	hi
  405be6:	bd30      	pophi	{r4, r5, pc}
  405be8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405bec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405bf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405bf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405bf8:	d002      	beq.n	405c00 <__adddf3+0x70>
  405bfa:	4240      	negs	r0, r0
  405bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405c00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405c04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405c08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405c0c:	d002      	beq.n	405c14 <__adddf3+0x84>
  405c0e:	4252      	negs	r2, r2
  405c10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405c14:	ea94 0f05 	teq	r4, r5
  405c18:	f000 80a7 	beq.w	405d6a <__adddf3+0x1da>
  405c1c:	f1a4 0401 	sub.w	r4, r4, #1
  405c20:	f1d5 0e20 	rsbs	lr, r5, #32
  405c24:	db0d      	blt.n	405c42 <__adddf3+0xb2>
  405c26:	fa02 fc0e 	lsl.w	ip, r2, lr
  405c2a:	fa22 f205 	lsr.w	r2, r2, r5
  405c2e:	1880      	adds	r0, r0, r2
  405c30:	f141 0100 	adc.w	r1, r1, #0
  405c34:	fa03 f20e 	lsl.w	r2, r3, lr
  405c38:	1880      	adds	r0, r0, r2
  405c3a:	fa43 f305 	asr.w	r3, r3, r5
  405c3e:	4159      	adcs	r1, r3
  405c40:	e00e      	b.n	405c60 <__adddf3+0xd0>
  405c42:	f1a5 0520 	sub.w	r5, r5, #32
  405c46:	f10e 0e20 	add.w	lr, lr, #32
  405c4a:	2a01      	cmp	r2, #1
  405c4c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405c50:	bf28      	it	cs
  405c52:	f04c 0c02 	orrcs.w	ip, ip, #2
  405c56:	fa43 f305 	asr.w	r3, r3, r5
  405c5a:	18c0      	adds	r0, r0, r3
  405c5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405c60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405c64:	d507      	bpl.n	405c76 <__adddf3+0xe6>
  405c66:	f04f 0e00 	mov.w	lr, #0
  405c6a:	f1dc 0c00 	rsbs	ip, ip, #0
  405c6e:	eb7e 0000 	sbcs.w	r0, lr, r0
  405c72:	eb6e 0101 	sbc.w	r1, lr, r1
  405c76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405c7a:	d31b      	bcc.n	405cb4 <__adddf3+0x124>
  405c7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405c80:	d30c      	bcc.n	405c9c <__adddf3+0x10c>
  405c82:	0849      	lsrs	r1, r1, #1
  405c84:	ea5f 0030 	movs.w	r0, r0, rrx
  405c88:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405c8c:	f104 0401 	add.w	r4, r4, #1
  405c90:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405c94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405c98:	f080 809a 	bcs.w	405dd0 <__adddf3+0x240>
  405c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405ca0:	bf08      	it	eq
  405ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405ca6:	f150 0000 	adcs.w	r0, r0, #0
  405caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405cae:	ea41 0105 	orr.w	r1, r1, r5
  405cb2:	bd30      	pop	{r4, r5, pc}
  405cb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405cb8:	4140      	adcs	r0, r0
  405cba:	eb41 0101 	adc.w	r1, r1, r1
  405cbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405cc2:	f1a4 0401 	sub.w	r4, r4, #1
  405cc6:	d1e9      	bne.n	405c9c <__adddf3+0x10c>
  405cc8:	f091 0f00 	teq	r1, #0
  405ccc:	bf04      	itt	eq
  405cce:	4601      	moveq	r1, r0
  405cd0:	2000      	moveq	r0, #0
  405cd2:	fab1 f381 	clz	r3, r1
  405cd6:	bf08      	it	eq
  405cd8:	3320      	addeq	r3, #32
  405cda:	f1a3 030b 	sub.w	r3, r3, #11
  405cde:	f1b3 0220 	subs.w	r2, r3, #32
  405ce2:	da0c      	bge.n	405cfe <__adddf3+0x16e>
  405ce4:	320c      	adds	r2, #12
  405ce6:	dd08      	ble.n	405cfa <__adddf3+0x16a>
  405ce8:	f102 0c14 	add.w	ip, r2, #20
  405cec:	f1c2 020c 	rsb	r2, r2, #12
  405cf0:	fa01 f00c 	lsl.w	r0, r1, ip
  405cf4:	fa21 f102 	lsr.w	r1, r1, r2
  405cf8:	e00c      	b.n	405d14 <__adddf3+0x184>
  405cfa:	f102 0214 	add.w	r2, r2, #20
  405cfe:	bfd8      	it	le
  405d00:	f1c2 0c20 	rsble	ip, r2, #32
  405d04:	fa01 f102 	lsl.w	r1, r1, r2
  405d08:	fa20 fc0c 	lsr.w	ip, r0, ip
  405d0c:	bfdc      	itt	le
  405d0e:	ea41 010c 	orrle.w	r1, r1, ip
  405d12:	4090      	lslle	r0, r2
  405d14:	1ae4      	subs	r4, r4, r3
  405d16:	bfa2      	ittt	ge
  405d18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405d1c:	4329      	orrge	r1, r5
  405d1e:	bd30      	popge	{r4, r5, pc}
  405d20:	ea6f 0404 	mvn.w	r4, r4
  405d24:	3c1f      	subs	r4, #31
  405d26:	da1c      	bge.n	405d62 <__adddf3+0x1d2>
  405d28:	340c      	adds	r4, #12
  405d2a:	dc0e      	bgt.n	405d4a <__adddf3+0x1ba>
  405d2c:	f104 0414 	add.w	r4, r4, #20
  405d30:	f1c4 0220 	rsb	r2, r4, #32
  405d34:	fa20 f004 	lsr.w	r0, r0, r4
  405d38:	fa01 f302 	lsl.w	r3, r1, r2
  405d3c:	ea40 0003 	orr.w	r0, r0, r3
  405d40:	fa21 f304 	lsr.w	r3, r1, r4
  405d44:	ea45 0103 	orr.w	r1, r5, r3
  405d48:	bd30      	pop	{r4, r5, pc}
  405d4a:	f1c4 040c 	rsb	r4, r4, #12
  405d4e:	f1c4 0220 	rsb	r2, r4, #32
  405d52:	fa20 f002 	lsr.w	r0, r0, r2
  405d56:	fa01 f304 	lsl.w	r3, r1, r4
  405d5a:	ea40 0003 	orr.w	r0, r0, r3
  405d5e:	4629      	mov	r1, r5
  405d60:	bd30      	pop	{r4, r5, pc}
  405d62:	fa21 f004 	lsr.w	r0, r1, r4
  405d66:	4629      	mov	r1, r5
  405d68:	bd30      	pop	{r4, r5, pc}
  405d6a:	f094 0f00 	teq	r4, #0
  405d6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405d72:	bf06      	itte	eq
  405d74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405d78:	3401      	addeq	r4, #1
  405d7a:	3d01      	subne	r5, #1
  405d7c:	e74e      	b.n	405c1c <__adddf3+0x8c>
  405d7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405d82:	bf18      	it	ne
  405d84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405d88:	d029      	beq.n	405dde <__adddf3+0x24e>
  405d8a:	ea94 0f05 	teq	r4, r5
  405d8e:	bf08      	it	eq
  405d90:	ea90 0f02 	teqeq	r0, r2
  405d94:	d005      	beq.n	405da2 <__adddf3+0x212>
  405d96:	ea54 0c00 	orrs.w	ip, r4, r0
  405d9a:	bf04      	itt	eq
  405d9c:	4619      	moveq	r1, r3
  405d9e:	4610      	moveq	r0, r2
  405da0:	bd30      	pop	{r4, r5, pc}
  405da2:	ea91 0f03 	teq	r1, r3
  405da6:	bf1e      	ittt	ne
  405da8:	2100      	movne	r1, #0
  405daa:	2000      	movne	r0, #0
  405dac:	bd30      	popne	{r4, r5, pc}
  405dae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405db2:	d105      	bne.n	405dc0 <__adddf3+0x230>
  405db4:	0040      	lsls	r0, r0, #1
  405db6:	4149      	adcs	r1, r1
  405db8:	bf28      	it	cs
  405dba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405dbe:	bd30      	pop	{r4, r5, pc}
  405dc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405dc4:	bf3c      	itt	cc
  405dc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405dca:	bd30      	popcc	{r4, r5, pc}
  405dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405dd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405dd8:	f04f 0000 	mov.w	r0, #0
  405ddc:	bd30      	pop	{r4, r5, pc}
  405dde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405de2:	bf1a      	itte	ne
  405de4:	4619      	movne	r1, r3
  405de6:	4610      	movne	r0, r2
  405de8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405dec:	bf1c      	itt	ne
  405dee:	460b      	movne	r3, r1
  405df0:	4602      	movne	r2, r0
  405df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405df6:	bf06      	itte	eq
  405df8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405dfc:	ea91 0f03 	teqeq	r1, r3
  405e00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405e04:	bd30      	pop	{r4, r5, pc}
  405e06:	bf00      	nop

00405e08 <__aeabi_ui2d>:
  405e08:	f090 0f00 	teq	r0, #0
  405e0c:	bf04      	itt	eq
  405e0e:	2100      	moveq	r1, #0
  405e10:	4770      	bxeq	lr
  405e12:	b530      	push	{r4, r5, lr}
  405e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405e1c:	f04f 0500 	mov.w	r5, #0
  405e20:	f04f 0100 	mov.w	r1, #0
  405e24:	e750      	b.n	405cc8 <__adddf3+0x138>
  405e26:	bf00      	nop

00405e28 <__aeabi_i2d>:
  405e28:	f090 0f00 	teq	r0, #0
  405e2c:	bf04      	itt	eq
  405e2e:	2100      	moveq	r1, #0
  405e30:	4770      	bxeq	lr
  405e32:	b530      	push	{r4, r5, lr}
  405e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405e3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405e40:	bf48      	it	mi
  405e42:	4240      	negmi	r0, r0
  405e44:	f04f 0100 	mov.w	r1, #0
  405e48:	e73e      	b.n	405cc8 <__adddf3+0x138>
  405e4a:	bf00      	nop

00405e4c <__aeabi_f2d>:
  405e4c:	0042      	lsls	r2, r0, #1
  405e4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405e52:	ea4f 0131 	mov.w	r1, r1, rrx
  405e56:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405e5a:	bf1f      	itttt	ne
  405e5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405e64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405e68:	4770      	bxne	lr
  405e6a:	f092 0f00 	teq	r2, #0
  405e6e:	bf14      	ite	ne
  405e70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405e74:	4770      	bxeq	lr
  405e76:	b530      	push	{r4, r5, lr}
  405e78:	f44f 7460 	mov.w	r4, #896	; 0x380
  405e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405e84:	e720      	b.n	405cc8 <__adddf3+0x138>
  405e86:	bf00      	nop

00405e88 <__aeabi_ul2d>:
  405e88:	ea50 0201 	orrs.w	r2, r0, r1
  405e8c:	bf08      	it	eq
  405e8e:	4770      	bxeq	lr
  405e90:	b530      	push	{r4, r5, lr}
  405e92:	f04f 0500 	mov.w	r5, #0
  405e96:	e00a      	b.n	405eae <__aeabi_l2d+0x16>

00405e98 <__aeabi_l2d>:
  405e98:	ea50 0201 	orrs.w	r2, r0, r1
  405e9c:	bf08      	it	eq
  405e9e:	4770      	bxeq	lr
  405ea0:	b530      	push	{r4, r5, lr}
  405ea2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405ea6:	d502      	bpl.n	405eae <__aeabi_l2d+0x16>
  405ea8:	4240      	negs	r0, r0
  405eaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405eae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405eb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405eb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405eba:	f43f aedc 	beq.w	405c76 <__adddf3+0xe6>
  405ebe:	f04f 0203 	mov.w	r2, #3
  405ec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405ec6:	bf18      	it	ne
  405ec8:	3203      	addne	r2, #3
  405eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405ece:	bf18      	it	ne
  405ed0:	3203      	addne	r2, #3
  405ed2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405ed6:	f1c2 0320 	rsb	r3, r2, #32
  405eda:	fa00 fc03 	lsl.w	ip, r0, r3
  405ede:	fa20 f002 	lsr.w	r0, r0, r2
  405ee2:	fa01 fe03 	lsl.w	lr, r1, r3
  405ee6:	ea40 000e 	orr.w	r0, r0, lr
  405eea:	fa21 f102 	lsr.w	r1, r1, r2
  405eee:	4414      	add	r4, r2
  405ef0:	e6c1      	b.n	405c76 <__adddf3+0xe6>
  405ef2:	bf00      	nop

00405ef4 <__aeabi_dmul>:
  405ef4:	b570      	push	{r4, r5, r6, lr}
  405ef6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405efa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405efe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405f02:	bf1d      	ittte	ne
  405f04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405f08:	ea94 0f0c 	teqne	r4, ip
  405f0c:	ea95 0f0c 	teqne	r5, ip
  405f10:	f000 f8de 	bleq	4060d0 <__aeabi_dmul+0x1dc>
  405f14:	442c      	add	r4, r5
  405f16:	ea81 0603 	eor.w	r6, r1, r3
  405f1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405f1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405f22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405f26:	bf18      	it	ne
  405f28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405f34:	d038      	beq.n	405fa8 <__aeabi_dmul+0xb4>
  405f36:	fba0 ce02 	umull	ip, lr, r0, r2
  405f3a:	f04f 0500 	mov.w	r5, #0
  405f3e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405f42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405f46:	fbe0 e503 	umlal	lr, r5, r0, r3
  405f4a:	f04f 0600 	mov.w	r6, #0
  405f4e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405f52:	f09c 0f00 	teq	ip, #0
  405f56:	bf18      	it	ne
  405f58:	f04e 0e01 	orrne.w	lr, lr, #1
  405f5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405f60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405f64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405f68:	d204      	bcs.n	405f74 <__aeabi_dmul+0x80>
  405f6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405f6e:	416d      	adcs	r5, r5
  405f70:	eb46 0606 	adc.w	r6, r6, r6
  405f74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405f78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405f7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405f80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405f84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405f88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405f8c:	bf88      	it	hi
  405f8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405f92:	d81e      	bhi.n	405fd2 <__aeabi_dmul+0xde>
  405f94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405f98:	bf08      	it	eq
  405f9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405f9e:	f150 0000 	adcs.w	r0, r0, #0
  405fa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405fa6:	bd70      	pop	{r4, r5, r6, pc}
  405fa8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405fac:	ea46 0101 	orr.w	r1, r6, r1
  405fb0:	ea40 0002 	orr.w	r0, r0, r2
  405fb4:	ea81 0103 	eor.w	r1, r1, r3
  405fb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405fbc:	bfc2      	ittt	gt
  405fbe:	ebd4 050c 	rsbsgt	r5, r4, ip
  405fc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405fc6:	bd70      	popgt	{r4, r5, r6, pc}
  405fc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405fcc:	f04f 0e00 	mov.w	lr, #0
  405fd0:	3c01      	subs	r4, #1
  405fd2:	f300 80ab 	bgt.w	40612c <__aeabi_dmul+0x238>
  405fd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405fda:	bfde      	ittt	le
  405fdc:	2000      	movle	r0, #0
  405fde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405fe2:	bd70      	pople	{r4, r5, r6, pc}
  405fe4:	f1c4 0400 	rsb	r4, r4, #0
  405fe8:	3c20      	subs	r4, #32
  405fea:	da35      	bge.n	406058 <__aeabi_dmul+0x164>
  405fec:	340c      	adds	r4, #12
  405fee:	dc1b      	bgt.n	406028 <__aeabi_dmul+0x134>
  405ff0:	f104 0414 	add.w	r4, r4, #20
  405ff4:	f1c4 0520 	rsb	r5, r4, #32
  405ff8:	fa00 f305 	lsl.w	r3, r0, r5
  405ffc:	fa20 f004 	lsr.w	r0, r0, r4
  406000:	fa01 f205 	lsl.w	r2, r1, r5
  406004:	ea40 0002 	orr.w	r0, r0, r2
  406008:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40600c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406014:	fa21 f604 	lsr.w	r6, r1, r4
  406018:	eb42 0106 	adc.w	r1, r2, r6
  40601c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406020:	bf08      	it	eq
  406022:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406026:	bd70      	pop	{r4, r5, r6, pc}
  406028:	f1c4 040c 	rsb	r4, r4, #12
  40602c:	f1c4 0520 	rsb	r5, r4, #32
  406030:	fa00 f304 	lsl.w	r3, r0, r4
  406034:	fa20 f005 	lsr.w	r0, r0, r5
  406038:	fa01 f204 	lsl.w	r2, r1, r4
  40603c:	ea40 0002 	orr.w	r0, r0, r2
  406040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406048:	f141 0100 	adc.w	r1, r1, #0
  40604c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406050:	bf08      	it	eq
  406052:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406056:	bd70      	pop	{r4, r5, r6, pc}
  406058:	f1c4 0520 	rsb	r5, r4, #32
  40605c:	fa00 f205 	lsl.w	r2, r0, r5
  406060:	ea4e 0e02 	orr.w	lr, lr, r2
  406064:	fa20 f304 	lsr.w	r3, r0, r4
  406068:	fa01 f205 	lsl.w	r2, r1, r5
  40606c:	ea43 0302 	orr.w	r3, r3, r2
  406070:	fa21 f004 	lsr.w	r0, r1, r4
  406074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406078:	fa21 f204 	lsr.w	r2, r1, r4
  40607c:	ea20 0002 	bic.w	r0, r0, r2
  406080:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406084:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406088:	bf08      	it	eq
  40608a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40608e:	bd70      	pop	{r4, r5, r6, pc}
  406090:	f094 0f00 	teq	r4, #0
  406094:	d10f      	bne.n	4060b6 <__aeabi_dmul+0x1c2>
  406096:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40609a:	0040      	lsls	r0, r0, #1
  40609c:	eb41 0101 	adc.w	r1, r1, r1
  4060a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060a4:	bf08      	it	eq
  4060a6:	3c01      	subeq	r4, #1
  4060a8:	d0f7      	beq.n	40609a <__aeabi_dmul+0x1a6>
  4060aa:	ea41 0106 	orr.w	r1, r1, r6
  4060ae:	f095 0f00 	teq	r5, #0
  4060b2:	bf18      	it	ne
  4060b4:	4770      	bxne	lr
  4060b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4060ba:	0052      	lsls	r2, r2, #1
  4060bc:	eb43 0303 	adc.w	r3, r3, r3
  4060c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4060c4:	bf08      	it	eq
  4060c6:	3d01      	subeq	r5, #1
  4060c8:	d0f7      	beq.n	4060ba <__aeabi_dmul+0x1c6>
  4060ca:	ea43 0306 	orr.w	r3, r3, r6
  4060ce:	4770      	bx	lr
  4060d0:	ea94 0f0c 	teq	r4, ip
  4060d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4060d8:	bf18      	it	ne
  4060da:	ea95 0f0c 	teqne	r5, ip
  4060de:	d00c      	beq.n	4060fa <__aeabi_dmul+0x206>
  4060e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4060e4:	bf18      	it	ne
  4060e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4060ea:	d1d1      	bne.n	406090 <__aeabi_dmul+0x19c>
  4060ec:	ea81 0103 	eor.w	r1, r1, r3
  4060f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4060f4:	f04f 0000 	mov.w	r0, #0
  4060f8:	bd70      	pop	{r4, r5, r6, pc}
  4060fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4060fe:	bf06      	itte	eq
  406100:	4610      	moveq	r0, r2
  406102:	4619      	moveq	r1, r3
  406104:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406108:	d019      	beq.n	40613e <__aeabi_dmul+0x24a>
  40610a:	ea94 0f0c 	teq	r4, ip
  40610e:	d102      	bne.n	406116 <__aeabi_dmul+0x222>
  406110:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406114:	d113      	bne.n	40613e <__aeabi_dmul+0x24a>
  406116:	ea95 0f0c 	teq	r5, ip
  40611a:	d105      	bne.n	406128 <__aeabi_dmul+0x234>
  40611c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406120:	bf1c      	itt	ne
  406122:	4610      	movne	r0, r2
  406124:	4619      	movne	r1, r3
  406126:	d10a      	bne.n	40613e <__aeabi_dmul+0x24a>
  406128:	ea81 0103 	eor.w	r1, r1, r3
  40612c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406130:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406134:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406138:	f04f 0000 	mov.w	r0, #0
  40613c:	bd70      	pop	{r4, r5, r6, pc}
  40613e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406142:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406146:	bd70      	pop	{r4, r5, r6, pc}

00406148 <__aeabi_ddiv>:
  406148:	b570      	push	{r4, r5, r6, lr}
  40614a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40614e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406152:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406156:	bf1d      	ittte	ne
  406158:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40615c:	ea94 0f0c 	teqne	r4, ip
  406160:	ea95 0f0c 	teqne	r5, ip
  406164:	f000 f8a7 	bleq	4062b6 <__aeabi_ddiv+0x16e>
  406168:	eba4 0405 	sub.w	r4, r4, r5
  40616c:	ea81 0e03 	eor.w	lr, r1, r3
  406170:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406174:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406178:	f000 8088 	beq.w	40628c <__aeabi_ddiv+0x144>
  40617c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406180:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406184:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406188:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40618c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406190:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406194:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406198:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40619c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4061a0:	429d      	cmp	r5, r3
  4061a2:	bf08      	it	eq
  4061a4:	4296      	cmpeq	r6, r2
  4061a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4061aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4061ae:	d202      	bcs.n	4061b6 <__aeabi_ddiv+0x6e>
  4061b0:	085b      	lsrs	r3, r3, #1
  4061b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4061b6:	1ab6      	subs	r6, r6, r2
  4061b8:	eb65 0503 	sbc.w	r5, r5, r3
  4061bc:	085b      	lsrs	r3, r3, #1
  4061be:	ea4f 0232 	mov.w	r2, r2, rrx
  4061c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4061c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4061ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4061ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4061d2:	bf22      	ittt	cs
  4061d4:	1ab6      	subcs	r6, r6, r2
  4061d6:	4675      	movcs	r5, lr
  4061d8:	ea40 000c 	orrcs.w	r0, r0, ip
  4061dc:	085b      	lsrs	r3, r3, #1
  4061de:	ea4f 0232 	mov.w	r2, r2, rrx
  4061e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4061e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4061ea:	bf22      	ittt	cs
  4061ec:	1ab6      	subcs	r6, r6, r2
  4061ee:	4675      	movcs	r5, lr
  4061f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4061f4:	085b      	lsrs	r3, r3, #1
  4061f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4061fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4061fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  406202:	bf22      	ittt	cs
  406204:	1ab6      	subcs	r6, r6, r2
  406206:	4675      	movcs	r5, lr
  406208:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40620c:	085b      	lsrs	r3, r3, #1
  40620e:	ea4f 0232 	mov.w	r2, r2, rrx
  406212:	ebb6 0e02 	subs.w	lr, r6, r2
  406216:	eb75 0e03 	sbcs.w	lr, r5, r3
  40621a:	bf22      	ittt	cs
  40621c:	1ab6      	subcs	r6, r6, r2
  40621e:	4675      	movcs	r5, lr
  406220:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406224:	ea55 0e06 	orrs.w	lr, r5, r6
  406228:	d018      	beq.n	40625c <__aeabi_ddiv+0x114>
  40622a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40622e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406232:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406236:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40623a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40623e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406242:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406246:	d1c0      	bne.n	4061ca <__aeabi_ddiv+0x82>
  406248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40624c:	d10b      	bne.n	406266 <__aeabi_ddiv+0x11e>
  40624e:	ea41 0100 	orr.w	r1, r1, r0
  406252:	f04f 0000 	mov.w	r0, #0
  406256:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40625a:	e7b6      	b.n	4061ca <__aeabi_ddiv+0x82>
  40625c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406260:	bf04      	itt	eq
  406262:	4301      	orreq	r1, r0
  406264:	2000      	moveq	r0, #0
  406266:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40626a:	bf88      	it	hi
  40626c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406270:	f63f aeaf 	bhi.w	405fd2 <__aeabi_dmul+0xde>
  406274:	ebb5 0c03 	subs.w	ip, r5, r3
  406278:	bf04      	itt	eq
  40627a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40627e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406282:	f150 0000 	adcs.w	r0, r0, #0
  406286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40628a:	bd70      	pop	{r4, r5, r6, pc}
  40628c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406290:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406294:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406298:	bfc2      	ittt	gt
  40629a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40629e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4062a2:	bd70      	popgt	{r4, r5, r6, pc}
  4062a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4062a8:	f04f 0e00 	mov.w	lr, #0
  4062ac:	3c01      	subs	r4, #1
  4062ae:	e690      	b.n	405fd2 <__aeabi_dmul+0xde>
  4062b0:	ea45 0e06 	orr.w	lr, r5, r6
  4062b4:	e68d      	b.n	405fd2 <__aeabi_dmul+0xde>
  4062b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4062ba:	ea94 0f0c 	teq	r4, ip
  4062be:	bf08      	it	eq
  4062c0:	ea95 0f0c 	teqeq	r5, ip
  4062c4:	f43f af3b 	beq.w	40613e <__aeabi_dmul+0x24a>
  4062c8:	ea94 0f0c 	teq	r4, ip
  4062cc:	d10a      	bne.n	4062e4 <__aeabi_ddiv+0x19c>
  4062ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4062d2:	f47f af34 	bne.w	40613e <__aeabi_dmul+0x24a>
  4062d6:	ea95 0f0c 	teq	r5, ip
  4062da:	f47f af25 	bne.w	406128 <__aeabi_dmul+0x234>
  4062de:	4610      	mov	r0, r2
  4062e0:	4619      	mov	r1, r3
  4062e2:	e72c      	b.n	40613e <__aeabi_dmul+0x24a>
  4062e4:	ea95 0f0c 	teq	r5, ip
  4062e8:	d106      	bne.n	4062f8 <__aeabi_ddiv+0x1b0>
  4062ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4062ee:	f43f aefd 	beq.w	4060ec <__aeabi_dmul+0x1f8>
  4062f2:	4610      	mov	r0, r2
  4062f4:	4619      	mov	r1, r3
  4062f6:	e722      	b.n	40613e <__aeabi_dmul+0x24a>
  4062f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4062fc:	bf18      	it	ne
  4062fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406302:	f47f aec5 	bne.w	406090 <__aeabi_dmul+0x19c>
  406306:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40630a:	f47f af0d 	bne.w	406128 <__aeabi_dmul+0x234>
  40630e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406312:	f47f aeeb 	bne.w	4060ec <__aeabi_dmul+0x1f8>
  406316:	e712      	b.n	40613e <__aeabi_dmul+0x24a>

00406318 <__gedf2>:
  406318:	f04f 3cff 	mov.w	ip, #4294967295
  40631c:	e006      	b.n	40632c <__cmpdf2+0x4>
  40631e:	bf00      	nop

00406320 <__ledf2>:
  406320:	f04f 0c01 	mov.w	ip, #1
  406324:	e002      	b.n	40632c <__cmpdf2+0x4>
  406326:	bf00      	nop

00406328 <__cmpdf2>:
  406328:	f04f 0c01 	mov.w	ip, #1
  40632c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406330:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406334:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40633c:	bf18      	it	ne
  40633e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406342:	d01b      	beq.n	40637c <__cmpdf2+0x54>
  406344:	b001      	add	sp, #4
  406346:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40634a:	bf0c      	ite	eq
  40634c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406350:	ea91 0f03 	teqne	r1, r3
  406354:	bf02      	ittt	eq
  406356:	ea90 0f02 	teqeq	r0, r2
  40635a:	2000      	moveq	r0, #0
  40635c:	4770      	bxeq	lr
  40635e:	f110 0f00 	cmn.w	r0, #0
  406362:	ea91 0f03 	teq	r1, r3
  406366:	bf58      	it	pl
  406368:	4299      	cmppl	r1, r3
  40636a:	bf08      	it	eq
  40636c:	4290      	cmpeq	r0, r2
  40636e:	bf2c      	ite	cs
  406370:	17d8      	asrcs	r0, r3, #31
  406372:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406376:	f040 0001 	orr.w	r0, r0, #1
  40637a:	4770      	bx	lr
  40637c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406384:	d102      	bne.n	40638c <__cmpdf2+0x64>
  406386:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40638a:	d107      	bne.n	40639c <__cmpdf2+0x74>
  40638c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406394:	d1d6      	bne.n	406344 <__cmpdf2+0x1c>
  406396:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40639a:	d0d3      	beq.n	406344 <__cmpdf2+0x1c>
  40639c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4063a0:	4770      	bx	lr
  4063a2:	bf00      	nop

004063a4 <__aeabi_cdrcmple>:
  4063a4:	4684      	mov	ip, r0
  4063a6:	4610      	mov	r0, r2
  4063a8:	4662      	mov	r2, ip
  4063aa:	468c      	mov	ip, r1
  4063ac:	4619      	mov	r1, r3
  4063ae:	4663      	mov	r3, ip
  4063b0:	e000      	b.n	4063b4 <__aeabi_cdcmpeq>
  4063b2:	bf00      	nop

004063b4 <__aeabi_cdcmpeq>:
  4063b4:	b501      	push	{r0, lr}
  4063b6:	f7ff ffb7 	bl	406328 <__cmpdf2>
  4063ba:	2800      	cmp	r0, #0
  4063bc:	bf48      	it	mi
  4063be:	f110 0f00 	cmnmi.w	r0, #0
  4063c2:	bd01      	pop	{r0, pc}

004063c4 <__aeabi_dcmpeq>:
  4063c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4063c8:	f7ff fff4 	bl	4063b4 <__aeabi_cdcmpeq>
  4063cc:	bf0c      	ite	eq
  4063ce:	2001      	moveq	r0, #1
  4063d0:	2000      	movne	r0, #0
  4063d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4063d6:	bf00      	nop

004063d8 <__aeabi_dcmplt>:
  4063d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4063dc:	f7ff ffea 	bl	4063b4 <__aeabi_cdcmpeq>
  4063e0:	bf34      	ite	cc
  4063e2:	2001      	movcc	r0, #1
  4063e4:	2000      	movcs	r0, #0
  4063e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4063ea:	bf00      	nop

004063ec <__aeabi_dcmple>:
  4063ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4063f0:	f7ff ffe0 	bl	4063b4 <__aeabi_cdcmpeq>
  4063f4:	bf94      	ite	ls
  4063f6:	2001      	movls	r0, #1
  4063f8:	2000      	movhi	r0, #0
  4063fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4063fe:	bf00      	nop

00406400 <__aeabi_dcmpge>:
  406400:	f84d ed08 	str.w	lr, [sp, #-8]!
  406404:	f7ff ffce 	bl	4063a4 <__aeabi_cdrcmple>
  406408:	bf94      	ite	ls
  40640a:	2001      	movls	r0, #1
  40640c:	2000      	movhi	r0, #0
  40640e:	f85d fb08 	ldr.w	pc, [sp], #8
  406412:	bf00      	nop

00406414 <__aeabi_dcmpgt>:
  406414:	f84d ed08 	str.w	lr, [sp, #-8]!
  406418:	f7ff ffc4 	bl	4063a4 <__aeabi_cdrcmple>
  40641c:	bf34      	ite	cc
  40641e:	2001      	movcc	r0, #1
  406420:	2000      	movcs	r0, #0
  406422:	f85d fb08 	ldr.w	pc, [sp], #8
  406426:	bf00      	nop

00406428 <__aeabi_dcmpun>:
  406428:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40642c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406430:	d102      	bne.n	406438 <__aeabi_dcmpun+0x10>
  406432:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406436:	d10a      	bne.n	40644e <__aeabi_dcmpun+0x26>
  406438:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40643c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406440:	d102      	bne.n	406448 <__aeabi_dcmpun+0x20>
  406442:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406446:	d102      	bne.n	40644e <__aeabi_dcmpun+0x26>
  406448:	f04f 0000 	mov.w	r0, #0
  40644c:	4770      	bx	lr
  40644e:	f04f 0001 	mov.w	r0, #1
  406452:	4770      	bx	lr

00406454 <__aeabi_d2iz>:
  406454:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40645c:	d215      	bcs.n	40648a <__aeabi_d2iz+0x36>
  40645e:	d511      	bpl.n	406484 <__aeabi_d2iz+0x30>
  406460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406468:	d912      	bls.n	406490 <__aeabi_d2iz+0x3c>
  40646a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40646e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406476:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40647a:	fa23 f002 	lsr.w	r0, r3, r2
  40647e:	bf18      	it	ne
  406480:	4240      	negne	r0, r0
  406482:	4770      	bx	lr
  406484:	f04f 0000 	mov.w	r0, #0
  406488:	4770      	bx	lr
  40648a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40648e:	d105      	bne.n	40649c <__aeabi_d2iz+0x48>
  406490:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406494:	bf08      	it	eq
  406496:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40649a:	4770      	bx	lr
  40649c:	f04f 0000 	mov.w	r0, #0
  4064a0:	4770      	bx	lr
  4064a2:	bf00      	nop

004064a4 <__aeabi_uldivmod>:
  4064a4:	b953      	cbnz	r3, 4064bc <__aeabi_uldivmod+0x18>
  4064a6:	b94a      	cbnz	r2, 4064bc <__aeabi_uldivmod+0x18>
  4064a8:	2900      	cmp	r1, #0
  4064aa:	bf08      	it	eq
  4064ac:	2800      	cmpeq	r0, #0
  4064ae:	bf1c      	itt	ne
  4064b0:	f04f 31ff 	movne.w	r1, #4294967295
  4064b4:	f04f 30ff 	movne.w	r0, #4294967295
  4064b8:	f000 b97a 	b.w	4067b0 <__aeabi_idiv0>
  4064bc:	f1ad 0c08 	sub.w	ip, sp, #8
  4064c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4064c4:	f000 f806 	bl	4064d4 <__udivmoddi4>
  4064c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4064cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4064d0:	b004      	add	sp, #16
  4064d2:	4770      	bx	lr

004064d4 <__udivmoddi4>:
  4064d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4064d8:	468c      	mov	ip, r1
  4064da:	460d      	mov	r5, r1
  4064dc:	4604      	mov	r4, r0
  4064de:	9e08      	ldr	r6, [sp, #32]
  4064e0:	2b00      	cmp	r3, #0
  4064e2:	d151      	bne.n	406588 <__udivmoddi4+0xb4>
  4064e4:	428a      	cmp	r2, r1
  4064e6:	4617      	mov	r7, r2
  4064e8:	d96d      	bls.n	4065c6 <__udivmoddi4+0xf2>
  4064ea:	fab2 fe82 	clz	lr, r2
  4064ee:	f1be 0f00 	cmp.w	lr, #0
  4064f2:	d00b      	beq.n	40650c <__udivmoddi4+0x38>
  4064f4:	f1ce 0c20 	rsb	ip, lr, #32
  4064f8:	fa01 f50e 	lsl.w	r5, r1, lr
  4064fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  406500:	fa02 f70e 	lsl.w	r7, r2, lr
  406504:	ea4c 0c05 	orr.w	ip, ip, r5
  406508:	fa00 f40e 	lsl.w	r4, r0, lr
  40650c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406510:	0c25      	lsrs	r5, r4, #16
  406512:	fbbc f8fa 	udiv	r8, ip, sl
  406516:	fa1f f987 	uxth.w	r9, r7
  40651a:	fb0a cc18 	mls	ip, sl, r8, ip
  40651e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406522:	fb08 f309 	mul.w	r3, r8, r9
  406526:	42ab      	cmp	r3, r5
  406528:	d90a      	bls.n	406540 <__udivmoddi4+0x6c>
  40652a:	19ed      	adds	r5, r5, r7
  40652c:	f108 32ff 	add.w	r2, r8, #4294967295
  406530:	f080 8123 	bcs.w	40677a <__udivmoddi4+0x2a6>
  406534:	42ab      	cmp	r3, r5
  406536:	f240 8120 	bls.w	40677a <__udivmoddi4+0x2a6>
  40653a:	f1a8 0802 	sub.w	r8, r8, #2
  40653e:	443d      	add	r5, r7
  406540:	1aed      	subs	r5, r5, r3
  406542:	b2a4      	uxth	r4, r4
  406544:	fbb5 f0fa 	udiv	r0, r5, sl
  406548:	fb0a 5510 	mls	r5, sl, r0, r5
  40654c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406550:	fb00 f909 	mul.w	r9, r0, r9
  406554:	45a1      	cmp	r9, r4
  406556:	d909      	bls.n	40656c <__udivmoddi4+0x98>
  406558:	19e4      	adds	r4, r4, r7
  40655a:	f100 33ff 	add.w	r3, r0, #4294967295
  40655e:	f080 810a 	bcs.w	406776 <__udivmoddi4+0x2a2>
  406562:	45a1      	cmp	r9, r4
  406564:	f240 8107 	bls.w	406776 <__udivmoddi4+0x2a2>
  406568:	3802      	subs	r0, #2
  40656a:	443c      	add	r4, r7
  40656c:	eba4 0409 	sub.w	r4, r4, r9
  406570:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406574:	2100      	movs	r1, #0
  406576:	2e00      	cmp	r6, #0
  406578:	d061      	beq.n	40663e <__udivmoddi4+0x16a>
  40657a:	fa24 f40e 	lsr.w	r4, r4, lr
  40657e:	2300      	movs	r3, #0
  406580:	6034      	str	r4, [r6, #0]
  406582:	6073      	str	r3, [r6, #4]
  406584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406588:	428b      	cmp	r3, r1
  40658a:	d907      	bls.n	40659c <__udivmoddi4+0xc8>
  40658c:	2e00      	cmp	r6, #0
  40658e:	d054      	beq.n	40663a <__udivmoddi4+0x166>
  406590:	2100      	movs	r1, #0
  406592:	e886 0021 	stmia.w	r6, {r0, r5}
  406596:	4608      	mov	r0, r1
  406598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40659c:	fab3 f183 	clz	r1, r3
  4065a0:	2900      	cmp	r1, #0
  4065a2:	f040 808e 	bne.w	4066c2 <__udivmoddi4+0x1ee>
  4065a6:	42ab      	cmp	r3, r5
  4065a8:	d302      	bcc.n	4065b0 <__udivmoddi4+0xdc>
  4065aa:	4282      	cmp	r2, r0
  4065ac:	f200 80fa 	bhi.w	4067a4 <__udivmoddi4+0x2d0>
  4065b0:	1a84      	subs	r4, r0, r2
  4065b2:	eb65 0503 	sbc.w	r5, r5, r3
  4065b6:	2001      	movs	r0, #1
  4065b8:	46ac      	mov	ip, r5
  4065ba:	2e00      	cmp	r6, #0
  4065bc:	d03f      	beq.n	40663e <__udivmoddi4+0x16a>
  4065be:	e886 1010 	stmia.w	r6, {r4, ip}
  4065c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065c6:	b912      	cbnz	r2, 4065ce <__udivmoddi4+0xfa>
  4065c8:	2701      	movs	r7, #1
  4065ca:	fbb7 f7f2 	udiv	r7, r7, r2
  4065ce:	fab7 fe87 	clz	lr, r7
  4065d2:	f1be 0f00 	cmp.w	lr, #0
  4065d6:	d134      	bne.n	406642 <__udivmoddi4+0x16e>
  4065d8:	1beb      	subs	r3, r5, r7
  4065da:	0c3a      	lsrs	r2, r7, #16
  4065dc:	fa1f fc87 	uxth.w	ip, r7
  4065e0:	2101      	movs	r1, #1
  4065e2:	fbb3 f8f2 	udiv	r8, r3, r2
  4065e6:	0c25      	lsrs	r5, r4, #16
  4065e8:	fb02 3318 	mls	r3, r2, r8, r3
  4065ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4065f0:	fb0c f308 	mul.w	r3, ip, r8
  4065f4:	42ab      	cmp	r3, r5
  4065f6:	d907      	bls.n	406608 <__udivmoddi4+0x134>
  4065f8:	19ed      	adds	r5, r5, r7
  4065fa:	f108 30ff 	add.w	r0, r8, #4294967295
  4065fe:	d202      	bcs.n	406606 <__udivmoddi4+0x132>
  406600:	42ab      	cmp	r3, r5
  406602:	f200 80d1 	bhi.w	4067a8 <__udivmoddi4+0x2d4>
  406606:	4680      	mov	r8, r0
  406608:	1aed      	subs	r5, r5, r3
  40660a:	b2a3      	uxth	r3, r4
  40660c:	fbb5 f0f2 	udiv	r0, r5, r2
  406610:	fb02 5510 	mls	r5, r2, r0, r5
  406614:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406618:	fb0c fc00 	mul.w	ip, ip, r0
  40661c:	45a4      	cmp	ip, r4
  40661e:	d907      	bls.n	406630 <__udivmoddi4+0x15c>
  406620:	19e4      	adds	r4, r4, r7
  406622:	f100 33ff 	add.w	r3, r0, #4294967295
  406626:	d202      	bcs.n	40662e <__udivmoddi4+0x15a>
  406628:	45a4      	cmp	ip, r4
  40662a:	f200 80b8 	bhi.w	40679e <__udivmoddi4+0x2ca>
  40662e:	4618      	mov	r0, r3
  406630:	eba4 040c 	sub.w	r4, r4, ip
  406634:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406638:	e79d      	b.n	406576 <__udivmoddi4+0xa2>
  40663a:	4631      	mov	r1, r6
  40663c:	4630      	mov	r0, r6
  40663e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406642:	f1ce 0420 	rsb	r4, lr, #32
  406646:	fa05 f30e 	lsl.w	r3, r5, lr
  40664a:	fa07 f70e 	lsl.w	r7, r7, lr
  40664e:	fa20 f804 	lsr.w	r8, r0, r4
  406652:	0c3a      	lsrs	r2, r7, #16
  406654:	fa25 f404 	lsr.w	r4, r5, r4
  406658:	ea48 0803 	orr.w	r8, r8, r3
  40665c:	fbb4 f1f2 	udiv	r1, r4, r2
  406660:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406664:	fb02 4411 	mls	r4, r2, r1, r4
  406668:	fa1f fc87 	uxth.w	ip, r7
  40666c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406670:	fb01 f30c 	mul.w	r3, r1, ip
  406674:	42ab      	cmp	r3, r5
  406676:	fa00 f40e 	lsl.w	r4, r0, lr
  40667a:	d909      	bls.n	406690 <__udivmoddi4+0x1bc>
  40667c:	19ed      	adds	r5, r5, r7
  40667e:	f101 30ff 	add.w	r0, r1, #4294967295
  406682:	f080 808a 	bcs.w	40679a <__udivmoddi4+0x2c6>
  406686:	42ab      	cmp	r3, r5
  406688:	f240 8087 	bls.w	40679a <__udivmoddi4+0x2c6>
  40668c:	3902      	subs	r1, #2
  40668e:	443d      	add	r5, r7
  406690:	1aeb      	subs	r3, r5, r3
  406692:	fa1f f588 	uxth.w	r5, r8
  406696:	fbb3 f0f2 	udiv	r0, r3, r2
  40669a:	fb02 3310 	mls	r3, r2, r0, r3
  40669e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4066a2:	fb00 f30c 	mul.w	r3, r0, ip
  4066a6:	42ab      	cmp	r3, r5
  4066a8:	d907      	bls.n	4066ba <__udivmoddi4+0x1e6>
  4066aa:	19ed      	adds	r5, r5, r7
  4066ac:	f100 38ff 	add.w	r8, r0, #4294967295
  4066b0:	d26f      	bcs.n	406792 <__udivmoddi4+0x2be>
  4066b2:	42ab      	cmp	r3, r5
  4066b4:	d96d      	bls.n	406792 <__udivmoddi4+0x2be>
  4066b6:	3802      	subs	r0, #2
  4066b8:	443d      	add	r5, r7
  4066ba:	1aeb      	subs	r3, r5, r3
  4066bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4066c0:	e78f      	b.n	4065e2 <__udivmoddi4+0x10e>
  4066c2:	f1c1 0720 	rsb	r7, r1, #32
  4066c6:	fa22 f807 	lsr.w	r8, r2, r7
  4066ca:	408b      	lsls	r3, r1
  4066cc:	fa05 f401 	lsl.w	r4, r5, r1
  4066d0:	ea48 0303 	orr.w	r3, r8, r3
  4066d4:	fa20 fe07 	lsr.w	lr, r0, r7
  4066d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4066dc:	40fd      	lsrs	r5, r7
  4066de:	ea4e 0e04 	orr.w	lr, lr, r4
  4066e2:	fbb5 f9fc 	udiv	r9, r5, ip
  4066e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4066ea:	fb0c 5519 	mls	r5, ip, r9, r5
  4066ee:	fa1f f883 	uxth.w	r8, r3
  4066f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4066f6:	fb09 f408 	mul.w	r4, r9, r8
  4066fa:	42ac      	cmp	r4, r5
  4066fc:	fa02 f201 	lsl.w	r2, r2, r1
  406700:	fa00 fa01 	lsl.w	sl, r0, r1
  406704:	d908      	bls.n	406718 <__udivmoddi4+0x244>
  406706:	18ed      	adds	r5, r5, r3
  406708:	f109 30ff 	add.w	r0, r9, #4294967295
  40670c:	d243      	bcs.n	406796 <__udivmoddi4+0x2c2>
  40670e:	42ac      	cmp	r4, r5
  406710:	d941      	bls.n	406796 <__udivmoddi4+0x2c2>
  406712:	f1a9 0902 	sub.w	r9, r9, #2
  406716:	441d      	add	r5, r3
  406718:	1b2d      	subs	r5, r5, r4
  40671a:	fa1f fe8e 	uxth.w	lr, lr
  40671e:	fbb5 f0fc 	udiv	r0, r5, ip
  406722:	fb0c 5510 	mls	r5, ip, r0, r5
  406726:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40672a:	fb00 f808 	mul.w	r8, r0, r8
  40672e:	45a0      	cmp	r8, r4
  406730:	d907      	bls.n	406742 <__udivmoddi4+0x26e>
  406732:	18e4      	adds	r4, r4, r3
  406734:	f100 35ff 	add.w	r5, r0, #4294967295
  406738:	d229      	bcs.n	40678e <__udivmoddi4+0x2ba>
  40673a:	45a0      	cmp	r8, r4
  40673c:	d927      	bls.n	40678e <__udivmoddi4+0x2ba>
  40673e:	3802      	subs	r0, #2
  406740:	441c      	add	r4, r3
  406742:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406746:	eba4 0408 	sub.w	r4, r4, r8
  40674a:	fba0 8902 	umull	r8, r9, r0, r2
  40674e:	454c      	cmp	r4, r9
  406750:	46c6      	mov	lr, r8
  406752:	464d      	mov	r5, r9
  406754:	d315      	bcc.n	406782 <__udivmoddi4+0x2ae>
  406756:	d012      	beq.n	40677e <__udivmoddi4+0x2aa>
  406758:	b156      	cbz	r6, 406770 <__udivmoddi4+0x29c>
  40675a:	ebba 030e 	subs.w	r3, sl, lr
  40675e:	eb64 0405 	sbc.w	r4, r4, r5
  406762:	fa04 f707 	lsl.w	r7, r4, r7
  406766:	40cb      	lsrs	r3, r1
  406768:	431f      	orrs	r7, r3
  40676a:	40cc      	lsrs	r4, r1
  40676c:	6037      	str	r7, [r6, #0]
  40676e:	6074      	str	r4, [r6, #4]
  406770:	2100      	movs	r1, #0
  406772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406776:	4618      	mov	r0, r3
  406778:	e6f8      	b.n	40656c <__udivmoddi4+0x98>
  40677a:	4690      	mov	r8, r2
  40677c:	e6e0      	b.n	406540 <__udivmoddi4+0x6c>
  40677e:	45c2      	cmp	sl, r8
  406780:	d2ea      	bcs.n	406758 <__udivmoddi4+0x284>
  406782:	ebb8 0e02 	subs.w	lr, r8, r2
  406786:	eb69 0503 	sbc.w	r5, r9, r3
  40678a:	3801      	subs	r0, #1
  40678c:	e7e4      	b.n	406758 <__udivmoddi4+0x284>
  40678e:	4628      	mov	r0, r5
  406790:	e7d7      	b.n	406742 <__udivmoddi4+0x26e>
  406792:	4640      	mov	r0, r8
  406794:	e791      	b.n	4066ba <__udivmoddi4+0x1e6>
  406796:	4681      	mov	r9, r0
  406798:	e7be      	b.n	406718 <__udivmoddi4+0x244>
  40679a:	4601      	mov	r1, r0
  40679c:	e778      	b.n	406690 <__udivmoddi4+0x1bc>
  40679e:	3802      	subs	r0, #2
  4067a0:	443c      	add	r4, r7
  4067a2:	e745      	b.n	406630 <__udivmoddi4+0x15c>
  4067a4:	4608      	mov	r0, r1
  4067a6:	e708      	b.n	4065ba <__udivmoddi4+0xe6>
  4067a8:	f1a8 0802 	sub.w	r8, r8, #2
  4067ac:	443d      	add	r5, r7
  4067ae:	e72b      	b.n	406608 <__udivmoddi4+0x134>

004067b0 <__aeabi_idiv0>:
  4067b0:	4770      	bx	lr
  4067b2:	bf00      	nop

004067b4 <sysfont_glyphs>:
	...
  4067d4:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  4067e4:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  4067f4:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  40680c:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  40681c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  40682c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406844:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406854:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406864:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  40687c:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  406898:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  4068a8:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  4068b8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  4068c8:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  4068f0:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406918:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406928:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  40694c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  40695c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  40696c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  40697c:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406994:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  4069a4:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  4069b4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  4069cc:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  4069dc:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  4069ec:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406a04:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406a14:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406a24:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  406a3c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  406a4c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  406a5c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406a74:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406a84:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406a94:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  406ab0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406ac0:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406ad0:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406aec:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406b04:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406b1c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406b2c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406b3c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406b54:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406b64:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406b74:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406b8c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406b9c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406bac:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406bc4:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406bd4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406be4:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406bfc:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406c0c:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406c1c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406c34:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406c44:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406c54:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406c6c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406c7c:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406c8c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406ca4:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406cb4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406cc4:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406cdc:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406cec:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406cfc:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406d14:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406d24:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406d34:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406d4c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406d5c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406d6c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406d84:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406d94:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406da4:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406dbc:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406dcc:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406ddc:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406df4:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406e04:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  406e14:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  406e2c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  406e3c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  406e4c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  406e64:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  406e74:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  406e84:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  406eac:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  406ebc:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  406ed8:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  406ef0:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  406f00:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406f10:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  406f28:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  406f38:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  406f48:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  406f60:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  406f70:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  406f80:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  406f90:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  406fa0:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  406fb0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  406fc0:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  406fd0:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  406fe0:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  406ff0:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  407008:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  407018:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  407028:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  407044:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  407060:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  40707c:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  40708c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  40709c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4070b4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  4070d0:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  4070ec:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  407108:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407124:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  407140:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40715c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  407178:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  407188:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  407198:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4071a8:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4071b8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4071c8:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4071d8:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  4071e8:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  4071f8:	0000 0000 07e5 0000 0003 0000 0013 0000     ................
  407208:	000c 0000 0014 0000 0031 0000 0014 0000     ........1.......
  407218:	0035 0000 3031 0000 0031 0000 6c25 3a75     5...10..1...%lu:
  407228:	6c25 3a75 6c25 0075 2020 2020 2020 2020     %lu:%lu.        
  407238:	2020 2020 0000 0000                             ....

00407240 <_global_impure_ptr>:
  407240:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  407250:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407260:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407270:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407280:	296c 0000 0030 0000                         l)..0...

00407288 <blanks.7223>:
  407288:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407298 <zeroes.7224>:
  407298:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4072a8:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

004072b8 <__mprec_bigtens>:
  4072b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4072c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4072d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004072e0 <__mprec_tens>:
  4072e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4072f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407300:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407310:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407320:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407330:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407340:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407350:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407360:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407370:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407380:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  407390:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4073a0:	9db4 79d9 7843 44ea                         ...yCx.D

004073a8 <p05.6055>:
  4073a8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4073b8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004073c4 <_ctype_>:
  4073c4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4073d4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4073e4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4073f4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407404:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407414:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  407424:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  407434:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  407444:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004074c8 <_init>:
  4074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074ca:	bf00      	nop
  4074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4074ce:	bc08      	pop	{r3}
  4074d0:	469e      	mov	lr, r3
  4074d2:	4770      	bx	lr

004074d4 <__init_array_start>:
  4074d4:	00403445 	.word	0x00403445

004074d8 <__frame_dummy_init_array_entry>:
  4074d8:	00400165                                e.@.

004074dc <_fini>:
  4074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074de:	bf00      	nop
  4074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4074e2:	bc08      	pop	{r3}
  4074e4:	469e      	mov	lr, r3
  4074e6:	4770      	bx	lr

004074e8 <__fini_array_start>:
  4074e8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 67b4 0040 0e0a 7d20               .....g@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cb4 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	5b69 0040 5729 0040 0000 0000 73c4 0040     i[@.)W@......s@.
20400954:	73c0 0040 723c 0040 723c 0040 723c 0040     .s@.<r@.<r@.<r@.
20400964:	723c 0040 723c 0040 723c 0040 723c 0040     <r@.<r@.<r@.<r@.
20400974:	723c 0040 723c 0040 ffff ffff ffff ffff     <r@.<r@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
